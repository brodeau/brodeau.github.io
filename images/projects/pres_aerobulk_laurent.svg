<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.2" viewBox="0 0 28000 15750" preserveAspectRatio="xMidYMid" fill-rule="evenodd" stroke-width="28.222" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" xmlns:ooo="http://xml.openoffice.org/svg/export" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:presentation="http://sun.com/xmlns/staroffice/presentation" xmlns:smil="http://www.w3.org/2001/SMIL20/" xmlns:anim="urn:oasis:names:tc:opendocument:xmlns:animation:1.0" xml:space="preserve">
 <defs class="ClipPathGroup">
  <clipPath id="presentation_clip_path" clipPathUnits="userSpaceOnUse">
   <rect x="0" y="0" width="28000" height="15750"/>
  </clipPath>
  <clipPath id="presentation_clip_path_shrink" clipPathUnits="userSpaceOnUse">
   <rect x="28" y="15" width="27944" height="15719"/>
  </clipPath>
 </defs>
 <defs>
  <g id="ooo:meta_slides" ooo:number-of-slides="1" ooo:start-slide-number="0">
   <g id="ooo:meta_dummy_slide" ooo:slide="dummy-slide" ooo:master="dummy-master-page" ooo:background-visibility="hidden" ooo:master-objects-visibility="hidden" ooo:has-transition="false"/>
   <g id="ooo:meta_slide_0" ooo:slide="id1" ooo:master="id2" ooo:has-transition="true"/>
  </g>
 </defs>
 <defs id="presentation-animations"/>
 <defs>
  <font id="EmbeddedFont_1" horiz-adv-x="2048">
   <font-face font-family="Liberation Sans embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1851" descent="435"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="x" horiz-adv-x="999" d="M 801,0 L 510,444 217,0 23,0 408,556 41,1082 240,1082 510,661 778,1082 979,1082 612,558 1002,0 801,0 Z"/>
   <glyph unicode="v" horiz-adv-x="1035" d="M 613,0 L 400,0 7,1082 199,1082 437,378 C 446,351 469,272 506,141 L 541,258 580,376 826,1082 1017,1082 613,0 Z"/>
   <glyph unicode="u" horiz-adv-x="890" d="M 314,1082 L 314,396 C 314,325 321,269 335,230 349,191 371,162 402,145 433,128 478,119 537,119 624,119 692,149 742,208 792,267 817,350 817,455 L 817,1082 997,1082 997,231 C 997,105 999,28 1003,0 L 833,0 C 832,3 832,12 831,27 830,42 830,59 829,78 828,97 826,132 825,185 L 822,185 C 781,110 733,58 679,27 624,-4 557,-20 476,-20 357,-20 271,10 216,69 161,128 133,225 133,361 L 133,1082 314,1082 Z"/>
   <glyph unicode="t" horiz-adv-x="545" d="M 554,8 C 495,-8 434,-16 372,-16 228,-16 156,66 156,229 L 156,951 31,951 31,1082 163,1082 216,1324 336,1324 336,1082 536,1082 536,951 336,951 336,268 C 336,216 345,180 362,159 379,138 408,127 450,127 474,127 509,132 554,141 L 554,8 Z"/>
   <glyph unicode="r" horiz-adv-x="527" d="M 142,0 L 142,830 C 142,906 140,990 136,1082 L 306,1082 C 311,959 314,886 314,861 L 318,861 C 347,954 380,1017 417,1051 454,1085 507,1102 575,1102 599,1102 623,1099 648,1092 L 648,927 C 624,934 592,937 552,937 477,937 420,905 381,841 342,776 322,684 322,564 L 322,0 142,0 Z"/>
   <glyph unicode="o" horiz-adv-x="998" d="M 1053,542 C 1053,353 1011,212 928,119 845,26 724,-20 565,-20 407,-20 288,28 207,125 126,221 86,360 86,542 86,915 248,1102 571,1102 736,1102 858,1057 936,966 1014,875 1053,733 1053,542 Z M 864,542 C 864,691 842,800 798,868 753,935 679,969 574,969 469,969 393,935 346,866 299,797 275,689 275,542 275,399 298,292 345,221 391,149 464,113 563,113 671,113 748,148 795,217 841,286 864,395 864,542 Z"/>
   <glyph unicode="n" horiz-adv-x="890" d="M 825,0 L 825,686 C 825,757 818,813 804,852 790,891 768,920 737,937 706,954 661,963 602,963 515,963 447,933 397,874 347,815 322,732 322,627 L 322,0 142,0 142,851 C 142,977 140,1054 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 313,950 314,897 L 317,897 C 358,972 406,1025 461,1056 515,1087 582,1102 663,1102 782,1102 869,1073 924,1014 979,955 1006,857 1006,721 L 1006,0 825,0 Z"/>
   <glyph unicode="m" horiz-adv-x="1452" d="M 768,0 L 768,686 C 768,791 754,863 725,903 696,943 645,963 570,963 493,963 433,934 388,875 343,816 321,734 321,627 L 321,0 142,0 142,851 C 142,977 140,1054 136,1082 L 306,1082 C 307,1079 307,1070 308,1055 309,1040 310,1024 311,1005 312,986 313,950 314,897 L 317,897 C 356,974 400,1027 450,1057 500,1087 561,1102 633,1102 715,1102 780,1086 828,1053 875,1020 908,968 927,897 L 930,897 C 967,970 1013,1022 1066,1054 1119,1086 1183,1102 1258,1102 1367,1102 1447,1072 1497,1013 1546,954 1571,856 1571,721 L 1571,0 1393,0 1393,686 C 1393,791 1379,863 1350,903 1321,943 1270,963 1195,963 1116,963 1055,934 1012,876 968,817 946,734 946,627 L 946,0 768,0 Z"/>
   <glyph unicode="l" horiz-adv-x="201" d="M 138,0 L 138,1484 318,1484 318,0 138,0 Z"/>
   <glyph unicode="k" horiz-adv-x="908" d="M 816,0 L 450,494 318,385 318,0 138,0 138,1484 318,1484 318,557 793,1082 1004,1082 565,617 1027,0 816,0 Z"/>
   <glyph unicode="i" horiz-adv-x="201" d="M 137,1312 L 137,1484 317,1484 317,1312 137,1312 Z M 137,0 L 137,1082 317,1082 317,0 137,0 Z"/>
   <glyph unicode="h" horiz-adv-x="890" d="M 317,897 C 356,968 402,1020 457,1053 511,1086 580,1102 663,1102 780,1102 867,1073 923,1015 978,956 1006,858 1006,721 L 1006,0 825,0 825,686 C 825,762 818,819 804,856 790,893 767,920 735,937 703,954 659,963 602,963 517,963 450,934 399,875 348,816 322,737 322,638 L 322,0 142,0 142,1484 322,1484 322,1098 C 322,1057 321,1015 319,972 316,929 315,904 314,897 L 317,897 Z"/>
   <glyph unicode="f" horiz-adv-x="564" d="M 361,951 L 361,0 181,0 181,951 29,951 29,1082 181,1082 181,1204 C 181,1303 203,1374 246,1417 289,1460 356,1482 445,1482 495,1482 537,1478 572,1470 L 572,1333 C 542,1338 515,1341 492,1341 446,1341 413,1329 392,1306 371,1283 361,1240 361,1179 L 361,1082 572,1082 572,951 361,951 Z"/>
   <glyph unicode="e" horiz-adv-x="980" d="M 276,503 C 276,379 302,283 353,216 404,149 479,115 578,115 656,115 719,131 766,162 813,193 844,233 861,281 L 1019,236 C 954,65 807,-20 578,-20 418,-20 296,28 213,123 129,218 87,360 87,548 87,727 129,864 213,959 296,1054 416,1102 571,1102 889,1102 1048,910 1048,527 L 1048,503 276,503 Z M 862,641 C 852,755 823,838 775,891 727,943 658,969 568,969 481,969 412,940 361,882 310,823 282,743 278,641 L 862,641 Z"/>
   <glyph unicode="d" horiz-adv-x="944" d="M 821,174 C 788,105 744,55 689,25 634,-5 565,-20 484,-20 347,-20 247,26 183,118 118,210 86,349 86,536 86,913 219,1102 484,1102 566,1102 634,1087 689,1057 744,1027 788,979 821,914 L 823,914 821,1035 821,1484 1001,1484 1001,223 C 1001,110 1003,36 1007,0 L 835,0 C 833,11 831,35 829,74 826,113 825,146 825,174 L 821,174 Z M 275,542 C 275,391 295,282 335,217 375,152 440,119 530,119 632,119 706,154 752,225 798,296 821,405 821,554 821,697 798,802 752,869 706,936 633,969 532,969 441,969 376,936 336,869 295,802 275,693 275,542 Z"/>
   <glyph unicode="c" horiz-adv-x="908" d="M 275,546 C 275,402 298,295 343,226 388,157 457,122 548,122 612,122 666,139 709,174 752,209 778,262 788,334 L 970,322 C 956,218 912,135 837,73 762,11 668,-20 553,-20 402,-20 286,28 207,124 127,219 87,359 87,542 87,724 127,863 207,959 287,1054 402,1102 551,1102 662,1102 754,1073 827,1016 900,959 945,880 964,779 L 779,765 C 770,825 746,873 708,908 670,943 616,961 546,961 451,961 382,929 339,866 296,803 275,696 275,546 Z"/>
   <glyph unicode="a" horiz-adv-x="1071" d="M 414,-20 C 305,-20 224,9 169,66 114,123 87,202 87,302 87,414 124,500 198,560 271,620 390,652 554,656 L 797,660 797,719 C 797,807 778,870 741,908 704,946 645,965 565,965 484,965 426,951 389,924 352,897 330,853 323,793 L 135,810 C 166,1005 310,1102 569,1102 705,1102 807,1071 876,1009 945,946 979,856 979,738 L 979,272 C 979,219 986,179 1000,152 1014,125 1041,111 1080,111 1097,111 1117,113 1139,118 L 1139,6 C 1094,-5 1047,-10 1000,-10 933,-10 885,8 855,43 824,78 807,132 803,207 L 797,207 C 751,124 698,66 637,32 576,-3 501,-20 414,-20 Z M 455,115 C 521,115 580,130 631,160 682,190 723,231 753,284 782,336 797,390 797,445 L 797,534 600,530 C 515,529 451,520 408,504 364,488 330,463 307,430 284,397 272,353 272,299 272,240 288,195 320,163 351,131 396,115 455,115 Z"/>
   <glyph unicode="T" horiz-adv-x="1181" d="M 720,1253 L 720,0 530,0 530,1253 46,1253 46,1409 1204,1409 1204,1253 720,1253 Z"/>
   <glyph unicode="S" horiz-adv-x="1198" d="M 1272,389 C 1272,259 1221,158 1120,87 1018,16 875,-20 690,-20 347,-20 148,99 93,338 L 278,375 C 299,290 345,228 414,189 483,149 578,129 697,129 820,129 916,150 983,193 1050,235 1083,297 1083,379 1083,425 1073,462 1052,491 1031,520 1001,543 963,562 925,581 880,596 827,609 774,622 716,635 652,650 541,675 456,699 399,724 341,749 295,776 262,807 229,837 203,872 186,913 168,954 159,1000 159,1053 159,1174 205,1267 298,1332 390,1397 522,1430 694,1430 854,1430 976,1406 1061,1357 1146,1308 1205,1224 1239,1106 L 1051,1073 C 1030,1148 991,1202 933,1236 875,1269 795,1286 692,1286 579,1286 493,1267 434,1230 375,1193 345,1137 345,1063 345,1020 357,984 380,956 403,927 436,903 479,884 522,864 609,840 738,811 781,801 825,791 868,781 911,770 952,758 991,744 1030,729 1067,712 1102,693 1136,674 1166,650 1191,622 1216,594 1236,561 1251,523 1265,485 1272,440 1272,389 Z"/>
   <glyph unicode="O" horiz-adv-x="1416" d="M 1495,711 C 1495,564 1467,435 1411,324 1354,213 1273,128 1168,69 1063,10 938,-20 795,-20 650,-20 526,9 421,68 316,127 235,212 180,323 125,434 97,563 97,711 97,936 159,1113 282,1240 405,1367 577,1430 797,1430 940,1430 1065,1402 1170,1345 1275,1288 1356,1205 1412,1096 1467,987 1495,859 1495,711 Z M 1300,711 C 1300,886 1256,1024 1169,1124 1081,1224 957,1274 797,1274 636,1274 511,1225 423,1126 335,1027 291,889 291,711 291,534 336,394 425,291 514,187 637,135 795,135 958,135 1083,185 1170,286 1257,386 1300,528 1300,711 Z"/>
   <glyph unicode="L" horiz-adv-x="927" d="M 168,0 L 168,1409 359,1409 359,156 1071,156 1071,0 168,0 Z"/>
   <glyph unicode="F" horiz-adv-x="1017" d="M 359,1253 L 359,729 1145,729 1145,571 359,571 359,0 168,0 168,1409 1169,1409 1169,1253 359,1253 Z"/>
   <glyph unicode="C" horiz-adv-x="1325" d="M 792,1274 C 636,1274 515,1224 428,1124 341,1023 298,886 298,711 298,538 343,400 434,295 524,190 646,137 800,137 997,137 1146,235 1245,430 L 1401,352 C 1343,231 1262,138 1157,75 1052,12 930,-20 791,-20 649,-20 526,10 423,69 319,128 240,212 186,322 131,431 104,561 104,711 104,936 165,1112 286,1239 407,1366 575,1430 790,1430 940,1430 1065,1401 1166,1342 1267,1283 1341,1196 1388,1081 L 1207,1021 C 1174,1103 1122,1166 1050,1209 977,1252 891,1274 792,1274 Z"/>
   <glyph unicode=" " horiz-adv-x="562"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_2" horiz-adv-x="2048">
   <font-face font-family="Liberation Serif embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1832" descent="435"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="u" horiz-adv-x="981" d="M 313,268 C 313,153 366,96 473,96 556,96 633,106 705,127 L 705,870 563,895 563,940 870,940 870,70 989,45 989,0 715,0 707,76 C 660,50 605,28 543,9 481,-10 429,-20 387,-20 227,-20 147,72 147,256 L 147,870 27,895 27,940 313,940 313,268 Z"/>
   <glyph unicode="t" horiz-adv-x="545" d="M 334,-20 C 270,-20 222,-1 191,37 159,75 143,128 143,197 L 143,856 20,856 20,901 145,940 246,1153 309,1153 309,940 524,940 524,856 309,856 309,215 C 309,172 319,139 339,117 358,95 384,84 416,84 455,84 502,89 557,100 L 557,35 C 534,19 500,6 456,-5 412,-15 371,-20 334,-20 Z"/>
   <glyph unicode="r" horiz-adv-x="636" d="M 664,965 L 664,711 621,711 563,821 C 530,821 490,817 445,808 399,799 359,787 326,772 L 326,70 487,45 487,0 41,0 41,45 160,70 160,870 41,895 41,940 315,940 324,823 C 364,856 418,888 487,919 555,950 609,965 649,965 L 664,965 Z"/>
   <glyph unicode="o" horiz-adv-x="890" d="M 946,475 C 946,145 799,-20 506,-20 365,-20 258,22 186,107 114,192 78,314 78,475 78,634 114,755 186,839 258,923 367,965 514,965 657,965 764,924 837,842 910,759 946,637 946,475 Z M 766,475 C 766,619 745,723 703,788 661,853 595,885 506,885 419,885 356,854 317,792 278,730 258,624 258,475 258,324 278,217 318,154 357,91 420,59 506,59 594,59 659,92 702,157 745,222 766,328 766,475 Z"/>
   <glyph unicode="n" horiz-adv-x="963" d="M 324,864 C 375,893 430,918 488,937 546,956 594,965 633,965 714,965 776,941 817,894 858,847 879,778 879,688 L 879,70 993,45 993,0 588,0 588,45 713,70 713,670 C 713,725 700,769 673,801 646,832 604,848 547,848 487,848 413,838 326,819 L 326,70 453,45 453,0 47,0 47,45 160,70 160,870 47,895 47,940 315,940 324,864 Z"/>
   <glyph unicode="m" horiz-adv-x="1543" d="M 326,864 C 376,893 429,917 485,936 541,955 590,965 633,965 679,965 722,956 761,939 800,922 829,894 848,856 899,885 960,910 1029,932 1098,954 1155,965 1200,965 1360,965 1440,873 1440,688 L 1440,70 1561,45 1561,0 1134,0 1134,45 1274,70 1274,670 C 1274,785 1221,842 1114,842 1097,842 1077,841 1054,838 1031,835 1008,832 985,829 962,826 940,822 919,818 898,813 880,810 866,807 877,771 883,731 883,688 L 883,70 1024,45 1024,0 578,0 578,45 717,70 717,670 C 717,725 703,768 675,798 646,827 604,842 547,842 488,842 415,832 328,813 L 328,70 469,45 469,0 43,0 43,45 162,70 162,870 43,895 43,940 318,940 326,864 Z"/>
   <glyph unicode="i" horiz-adv-x="509" d="M 379,1247 C 379,1218 368,1192 347,1171 326,1150 300,1139 270,1139 241,1139 215,1150 194,1171 173,1192 162,1218 162,1247 162,1277 173,1303 194,1324 215,1345 241,1356 270,1356 300,1356 326,1345 347,1324 368,1303 379,1277 379,1247 Z M 369,70 L 530,45 530,0 43,0 43,45 203,70 203,870 70,895 70,940 369,940 369,70 Z"/>
   <glyph unicode="f" horiz-adv-x="636" d="M 225,856 L 63,856 63,905 225,944 225,1010 C 225,1149 253,1255 308,1330 363,1405 440,1442 539,1442 590,1442 638,1436 682,1423 L 682,1218 633,1218 588,1341 C 565,1355 538,1362 506,1362 464,1362 434,1343 417,1306 400,1269 391,1199 391,1096 L 391,940 641,940 641,856 391,856 391,78 594,45 594,0 86,0 86,45 225,78 225,856 Z"/>
   <glyph unicode="e" horiz-adv-x="781" d="M 260,473 L 260,455 C 260,363 270,292 291,241 311,190 342,151 385,124 427,97 482,84 551,84 587,84 630,87 679,93 728,99 769,106 801,113 L 801,57 C 769,36 726,18 671,3 616,-12 559,-20 502,-20 356,-20 249,19 182,98 114,177 80,303 80,477 80,641 114,763 183,844 252,925 350,965 477,965 718,965 838,828 838,555 L 838,473 260,473 Z M 477,885 C 408,885 355,857 318,801 281,745 262,662 262,553 L 664,553 C 664,672 649,758 618,809 587,860 540,885 477,885 Z"/>
   <glyph unicode="d" horiz-adv-x="944" d="M 723,70 C 648,10 560,-20 459,-20 202,-20 74,140 74,461 74,626 110,751 183,837 256,922 363,965 504,965 576,965 649,957 723,942 719,964 717,1019 717,1108 L 717,1352 559,1376 559,1421 883,1421 883,70 999,45 999,0 735,0 723,70 Z M 254,461 C 254,334 275,240 318,178 361,115 426,84 514,84 589,84 657,97 717,123 L 717,866 C 658,877 590,883 514,883 341,883 254,742 254,461 Z"/>
   <glyph unicode="b" horiz-adv-x="963" d="M 766,496 C 766,619 745,710 702,770 659,830 593,860 504,860 465,860 426,857 387,850 348,843 320,835 303,827 L 303,82 C 359,71 426,66 504,66 596,66 663,102 704,174 745,246 766,353 766,496 Z M 137,1352 L 0,1376 0,1421 303,1421 303,1085 C 303,1049 301,983 297,887 364,939 448,965 549,965 677,965 775,926 844,849 912,771 946,653 946,496 946,327 909,199 834,112 759,24 650,-20 508,-20 451,-20 388,-14 319,-1 250,12 189,28 137,49 L 137,1352 Z"/>
   <glyph unicode="a" horiz-adv-x="836" d="M 465,961 C 568,961 643,940 692,898 740,856 764,792 764,705 L 764,70 881,45 881,0 623,0 604,94 C 528,18 431,-20 313,-20 152,-20 72,73 72,260 72,323 84,375 109,416 133,457 172,488 225,510 278,531 356,543 457,545 L 598,549 598,696 C 598,761 586,808 563,839 539,870 502,885 453,885 386,885 325,869 270,838 L 236,721 180,721 180,926 C 288,949 383,961 465,961 Z M 598,479 L 467,475 C 378,472 317,454 286,423 254,392 238,339 238,266 238,149 286,90 381,90 426,90 466,95 499,106 532,116 565,129 598,145 L 598,479 Z"/>
   <glyph unicode="&gt;" horiz-adv-x="980" d="M 104,186 L 104,289 913,680 104,1071 104,1174 1057,705 1057,655 104,186 Z"/>
   <glyph unicode="&lt;" horiz-adv-x="980" d="M 102,655 L 102,705 1055,1174 1055,1071 246,680 1055,289 1055,186 102,655 Z"/>
   <glyph unicode="/" horiz-adv-x="582" d="M 100,-20 L 0,-20 471,1350 569,1350 100,-20 Z"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_3" horiz-adv-x="2048">
   <font-face font-family="Open Sans embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="2195" descent="599"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="”" horiz-adv-x="691" d="M 309,1462 L 324,1440 C 307,1373 282,1296 249,1208 216,1119 182,1037 147,961 L 25,961 C 72,1151 106,1318 127,1462 L 309,1462 Z M 678,1462 L 692,1440 C 676,1379 652,1305 620,1216 588,1127 553,1042 516,961 L 391,961 C 408,1028 428,1112 450,1215 472,1318 487,1400 496,1462 L 678,1462 Z"/>
   <glyph unicode="“" horiz-adv-x="691" d="M 406,961 L 391,983 C 428,1126 488,1286 569,1462 L 692,1462 C 672,1385 652,1299 633,1203 613,1106 599,1026 590,961 L 406,961 Z M 37,961 L 25,983 C 40,1043 63,1118 96,1207 129,1296 164,1381 201,1462 L 324,1462 C 280,1293 246,1126 221,961 L 37,961 Z"/>
   <glyph unicode="z" horiz-adv-x="817" d="M 877,0 L 82,0 82,113 680,967 119,967 119,1096 862,1096 862,967 272,129 877,129 877,0 Z"/>
   <glyph unicode="y" horiz-adv-x="1035" d="M 2,1096 L 180,1096 420,471 C 473,328 505,225 518,162 L 526,162 C 535,196 553,254 581,337 608,419 699,672 852,1096 L 1030,1096 559,-152 C 512,-275 458,-363 396,-415 333,-466 257,-492 166,-492 115,-492 65,-486 16,-475 L 16,-342 C 53,-350 94,-354 139,-354 253,-354 334,-290 383,-162 L 444,-6 2,1096 Z"/>
   <glyph unicode="x" horiz-adv-x="999" d="M 440,561 L 59,1096 248,1096 537,676 825,1096 1012,1096 631,561 1032,0 844,0 537,444 227,0 39,0 440,561 Z"/>
   <glyph unicode="v" horiz-adv-x="1035" d="M 416,0 L 0,1096 178,1096 414,446 C 467,294 499,195 508,150 L 516,150 C 523,185 547,259 586,370 625,481 712,723 848,1096 L 1026,1096 610,0 416,0 Z"/>
   <glyph unicode="u" horiz-adv-x="927" d="M 332,1096 L 332,385 C 332,296 352,229 393,185 434,141 497,119 584,119 699,119 783,150 836,213 889,276 915,378 915,520 L 915,1096 1081,1096 1081,0 944,0 920,147 911,147 C 877,93 830,52 770,23 709,-6 640,-20 563,-20 430,-20 330,12 264,75 197,138 164,240 164,379 L 164,1096 332,1096 Z"/>
   <glyph unicode="t" horiz-adv-x="672" d="M 530,117 C 559,117 588,119 615,124 642,128 664,132 680,137 L 680,10 C 662,1 636,-6 601,-12 566,-17 534,-20 506,-20 294,-20 188,92 188,315 L 188,967 31,967 31,1047 188,1116 258,1350 354,1350 354,1096 672,1096 672,967 354,967 354,322 C 354,256 370,205 401,170 432,135 475,117 530,117 Z"/>
   <glyph unicode="s" horiz-adv-x="799" d="M 883,299 C 883,197 845,118 769,63 693,8 586,-20 449,-20 304,-20 190,3 109,49 L 109,203 C 162,176 218,155 279,140 339,125 397,117 453,117 540,117 606,131 653,159 700,186 723,228 723,285 723,328 705,364 668,395 631,425 558,461 451,502 349,540 277,573 234,602 191,630 159,662 138,698 117,734 106,777 106,827 106,916 142,987 215,1039 288,1090 387,1116 514,1116 632,1116 747,1092 860,1044 L 801,909 C 691,954 591,977 502,977 423,977 364,965 324,940 284,915 264,881 264,838 264,809 272,784 287,763 302,742 326,723 359,704 392,685 456,658 551,623 681,576 769,528 815,480 860,432 883,372 883,299 Z"/>
   <glyph unicode="r" horiz-adv-x="654" d="M 676,1116 C 725,1116 768,1112 807,1104 L 784,950 C 739,960 699,965 664,965 575,965 500,929 437,857 374,785 342,695 342,588 L 342,0 176,0 176,1096 313,1096 332,893 340,893 C 381,964 430,1019 487,1058 544,1097 607,1116 676,1116 Z"/>
   <glyph unicode="p" horiz-adv-x="981" d="M 686,-20 C 615,-20 550,-7 491,20 432,46 382,86 342,141 L 330,141 C 338,77 342,16 342,-41 L 342,-492 176,-492 176,1096 311,1096 334,946 342,946 C 385,1006 434,1049 491,1076 548,1103 613,1116 686,1116 831,1116 944,1066 1023,967 1102,868 1141,728 1141,549 1141,369 1101,229 1021,130 940,30 829,-20 686,-20 Z M 662,975 C 550,975 469,944 419,882 369,820 343,721 342,586 L 342,549 C 342,395 368,285 419,219 470,152 553,119 666,119 761,119 835,157 889,234 942,311 969,416 969,551 969,688 942,793 889,866 835,939 759,975 662,975 Z"/>
   <glyph unicode="o" horiz-adv-x="1017" d="M 1122,549 C 1122,370 1077,231 987,131 897,30 773,-20 614,-20 516,-20 429,3 353,49 277,95 218,161 177,247 136,333 115,434 115,549 115,728 160,867 249,967 338,1066 462,1116 621,1116 774,1116 896,1065 987,963 1077,861 1122,723 1122,549 Z M 287,549 C 287,409 315,302 371,229 427,156 509,119 618,119 727,119 809,156 866,229 922,302 950,408 950,549 950,688 922,794 866,867 809,939 726,975 616,975 507,975 425,939 370,868 315,797 287,690 287,549 Z"/>
   <glyph unicode="n" horiz-adv-x="945" d="M 926,0 L 926,709 C 926,798 906,865 865,909 824,953 761,975 674,975 559,975 475,944 422,882 369,820 342,718 342,575 L 342,0 176,0 176,1096 311,1096 338,946 346,946 C 380,1000 428,1042 489,1072 550,1101 619,1116 694,1116 826,1116 925,1084 992,1021 1059,957 1092,855 1092,715 L 1092,0 926,0 Z"/>
   <glyph unicode="m" horiz-adv-x="1580" d="M 1573,0 L 1573,713 C 1573,800 1554,866 1517,910 1480,953 1422,975 1343,975 1240,975 1163,945 1114,886 1065,827 1040,735 1040,612 L 1040,0 874,0 874,713 C 874,800 855,866 818,910 781,953 722,975 643,975 539,975 463,944 415,882 366,819 342,717 342,575 L 342,0 176,0 176,1096 311,1096 338,946 346,946 C 377,999 422,1041 479,1071 536,1101 599,1116 670,1116 841,1116 953,1054 1006,930 L 1014,930 C 1047,987 1094,1033 1156,1066 1218,1099 1289,1116 1368,1116 1492,1116 1585,1084 1647,1021 1708,957 1739,855 1739,715 L 1739,0 1573,0 Z"/>
   <glyph unicode="l" horiz-adv-x="183" d="M 342,0 L 176,0 176,1556 342,1556 342,0 Z"/>
   <glyph unicode="k" horiz-adv-x="908" d="M 340,561 C 369,602 412,655 471,721 L 825,1096 1022,1096 578,629 1053,0 852,0 465,518 340,410 340,0 176,0 176,1556 340,1556 340,731 C 340,694 337,638 332,561 L 340,561 Z"/>
   <glyph unicode="i" horiz-adv-x="219" d="M 342,0 L 176,0 176,1096 342,1096 342,0 Z M 162,1393 C 162,1431 171,1459 190,1477 209,1494 232,1503 260,1503 287,1503 310,1494 329,1476 348,1458 358,1430 358,1393 358,1356 348,1328 329,1310 310,1291 287,1282 260,1282 232,1282 209,1291 190,1310 171,1328 162,1356 162,1393 Z"/>
   <glyph unicode="h" horiz-adv-x="945" d="M 926,0 L 926,709 C 926,798 906,865 865,909 824,953 761,975 674,975 559,975 475,944 422,881 369,818 342,716 342,573 L 342,0 176,0 176,1556 342,1556 342,1085 C 342,1028 339,981 334,944 L 344,944 C 377,997 423,1038 484,1069 544,1099 613,1114 690,1114 824,1114 925,1082 992,1019 1059,955 1092,854 1092,715 L 1092,0 926,0 Z"/>
   <glyph unicode="g" horiz-adv-x="1054" d="M 1073,1096 L 1073,991 870,967 C 889,944 905,913 920,876 935,838 942,795 942,748 942,641 905,555 832,491 759,427 658,395 530,395 497,395 467,398 438,403 367,366 332,319 332,262 332,232 344,210 369,196 394,181 436,174 496,174 L 690,174 C 809,174 900,149 964,99 1027,49 1059,-24 1059,-119 1059,-240 1010,-333 913,-397 816,-460 674,-492 487,-492 344,-492 233,-465 156,-412 78,-359 39,-283 39,-186 39,-119 60,-62 103,-13 146,36 206,69 283,86 255,99 232,118 213,145 194,172 184,203 184,238 184,278 195,313 216,343 237,373 271,402 317,430 260,453 214,493 179,549 143,605 125,669 125,741 125,861 161,954 233,1019 305,1084 407,1116 539,1116 596,1116 648,1109 694,1096 L 1073,1096 Z M 199,-184 C 199,-243 224,-288 274,-319 324,-350 396,-365 489,-365 628,-365 732,-344 799,-303 866,-261 899,-204 899,-133 899,-74 881,-32 844,-10 807,14 738,25 637,25 L 438,25 C 363,25 304,7 262,-29 220,-65 199,-117 199,-184 Z M 289,745 C 289,668 311,610 354,571 397,532 458,512 535,512 697,512 778,591 778,748 778,913 696,995 532,995 454,995 394,974 352,932 310,890 289,828 289,745 Z"/>
   <glyph unicode="f" horiz-adv-x="781" d="M 670,967 L 391,967 391,0 225,0 225,967 29,967 29,1042 225,1102 225,1163 C 225,1432 343,1567 578,1567 636,1567 704,1555 782,1532 L 739,1399 C 675,1420 620,1430 575,1430 512,1430 466,1409 436,1368 406,1326 391,1259 391,1167 L 391,1096 670,1096 670,967 Z"/>
   <glyph unicode="e" horiz-adv-x="944" d="M 639,-20 C 477,-20 349,29 256,128 162,227 115,364 115,539 115,716 159,856 246,960 333,1064 449,1116 596,1116 733,1116 842,1071 922,981 1002,890 1042,771 1042,623 L 1042,518 287,518 C 290,389 323,292 385,225 446,158 533,125 645,125 763,125 880,150 995,199 L 995,51 C 936,26 881,8 829,-4 776,-14 713,-20 639,-20 Z M 594,977 C 506,977 436,948 384,891 331,834 300,754 291,653 L 864,653 C 864,758 841,838 794,894 747,949 681,977 594,977 Z"/>
   <glyph unicode="d" horiz-adv-x="981" d="M 922,147 L 913,147 C 836,36 722,-20 569,-20 426,-20 314,29 235,127 155,225 115,364 115,545 115,726 155,866 235,966 315,1066 426,1116 569,1116 718,1116 832,1062 911,954 L 924,954 917,1033 913,1110 913,1556 1079,1556 1079,0 944,0 922,147 Z M 590,119 C 703,119 786,150 837,212 888,273 913,373 913,510 L 913,545 C 913,700 887,811 836,878 784,944 701,977 588,977 491,977 416,939 365,864 313,788 287,681 287,543 287,403 313,297 364,226 415,155 491,119 590,119 Z"/>
   <glyph unicode="c" horiz-adv-x="817" d="M 614,-20 C 455,-20 333,29 246,127 159,224 115,362 115,541 115,724 159,866 248,966 336,1066 462,1116 625,1116 678,1116 730,1110 783,1099 836,1088 877,1074 907,1059 L 856,918 C 819,933 779,945 736,955 693,964 654,969 621,969 398,969 287,827 287,543 287,408 314,305 369,233 423,161 503,125 610,125 701,125 795,145 891,184 L 891,37 C 818,-1 725,-20 614,-20 Z"/>
   <glyph unicode="b" horiz-adv-x="981" d="M 686,1114 C 830,1114 942,1065 1022,967 1101,868 1141,729 1141,549 1141,369 1101,229 1021,130 940,30 829,-20 686,-20 615,-20 550,-7 491,20 432,46 382,86 342,141 L 330,141 295,0 176,0 176,1556 342,1556 342,1178 C 342,1093 339,1017 334,950 L 342,950 C 419,1059 534,1114 686,1114 Z M 662,975 C 549,975 467,943 417,878 367,813 342,703 342,549 342,395 368,285 419,219 470,152 553,119 666,119 768,119 844,156 894,231 944,305 969,412 969,551 969,694 944,800 894,870 844,940 767,975 662,975 Z"/>
   <glyph unicode="a" horiz-adv-x="890" d="M 850,0 L 817,156 809,156 C 754,87 700,41 646,17 591,-8 523,-20 442,-20 333,-20 248,8 187,64 125,120 94,200 94,303 94,524 271,640 625,651 L 811,657 811,725 C 811,811 793,875 756,916 719,957 659,977 578,977 487,977 383,949 268,893 L 217,1020 C 271,1049 330,1072 395,1089 459,1106 523,1114 588,1114 719,1114 816,1085 879,1027 942,969 973,876 973,748 L 973,0 850,0 Z M 475,117 C 578,117 660,145 719,202 778,259 807,338 807,440 L 807,539 641,532 C 509,527 414,507 356,471 297,434 268,378 268,301 268,241 286,195 323,164 359,133 410,117 475,117 Z"/>
   <glyph unicode="W" horiz-adv-x="1870" d="M 1477,0 L 1309,0 1014,979 C 1000,1022 984,1077 967,1143 950,1209 941,1249 940,1262 925,1174 902,1078 870,973 L 584,0 416,0 27,1462 207,1462 438,559 C 470,432 493,318 508,215 526,337 553,456 588,573 L 850,1462 1030,1462 1305,565 C 1337,462 1364,345 1386,215 1399,310 1423,425 1458,561 L 1688,1462 1868,1462 1477,0 Z"/>
   <glyph unicode="T" horiz-adv-x="1108" d="M 651,0 L 481,0 481,1311 18,1311 18,1462 1114,1462 1114,1311 651,1311 651,0 Z"/>
   <glyph unicode="S" horiz-adv-x="944" d="M 1026,389 C 1026,260 979,160 886,88 793,16 666,-20 506,-20 333,-20 199,2 106,47 L 106,211 C 166,186 231,166 302,151 373,136 443,129 512,129 625,129 711,151 768,194 825,237 854,296 854,373 854,424 844,465 824,498 803,530 769,560 722,587 674,614 601,645 504,680 368,729 271,786 213,853 154,920 125,1007 125,1114 125,1227 167,1316 252,1383 337,1450 449,1483 588,1483 733,1483 867,1456 989,1403 L 936,1255 C 815,1306 698,1331 584,1331 494,1331 424,1312 373,1273 322,1234 297,1181 297,1112 297,1061 306,1020 325,988 344,955 375,926 420,899 464,872 532,842 623,809 776,754 882,696 940,633 997,570 1026,489 1026,389 Z"/>
   <glyph unicode="R" horiz-adv-x="1035" d="M 371,608 L 371,0 201,0 201,1462 602,1462 C 781,1462 914,1428 1000,1359 1085,1290 1128,1187 1128,1049 1128,856 1030,725 834,657 L 1231,0 1030,0 676,608 371,608 Z M 371,754 L 604,754 C 724,754 812,778 868,826 924,873 952,945 952,1040 952,1137 924,1206 867,1249 810,1292 718,1313 592,1313 L 371,1313 371,754 Z"/>
   <glyph unicode="P" horiz-adv-x="944" d="M 1128,1036 C 1128,888 1078,774 977,695 876,615 731,575 543,575 L 371,575 371,0 201,0 201,1462 580,1462 C 945,1462 1128,1320 1128,1036 Z M 371,721 L 524,721 C 675,721 784,745 851,794 918,843 952,921 952,1028 952,1125 920,1197 857,1244 794,1291 695,1315 561,1315 L 371,1315 371,721 Z"/>
   <glyph unicode="O" horiz-adv-x="1380" d="M 1470,733 C 1470,499 1411,315 1293,181 1174,47 1010,-20 799,-20 584,-20 418,46 301,178 184,309 125,495 125,735 125,973 184,1158 301,1289 418,1420 585,1485 801,1485 1011,1485 1175,1418 1293,1285 1411,1152 1470,968 1470,733 Z M 305,733 C 305,535 347,385 432,283 516,180 638,129 799,129 961,129 1083,180 1166,282 1249,384 1290,534 1290,733 1290,930 1249,1079 1167,1181 1084,1282 962,1333 801,1333 639,1333 516,1282 432,1180 347,1077 305,928 305,733 Z"/>
   <glyph unicode="N" horiz-adv-x="1162" d="M 1343,0 L 1149,0 350,1227 342,1227 C 353,1083 358,951 358,831 L 358,0 201,0 201,1462 393,1462 1190,240 1198,240 C 1197,258 1194,316 1189,414 1184,511 1183,581 1184,623 L 1184,1462 1343,1462 1343,0 Z"/>
   <glyph unicode="M" horiz-adv-x="1452" d="M 848,0 L 352,1296 344,1296 C 353,1193 358,1071 358,930 L 358,0 201,0 201,1462 457,1462 920,256 928,256 1395,1462 1649,1462 1649,0 1479,0 1479,942 C 1479,1050 1484,1167 1493,1294 L 1485,1294 985,0 848,0 Z"/>
   <glyph unicode="L" horiz-adv-x="835" d="M 201,0 L 201,1462 371,1462 371,154 1016,154 1016,0 201,0 Z"/>
   <glyph unicode="I" horiz-adv-x="182" d="M 201,0 L 201,1462 371,1462 371,0 201,0 Z"/>
   <glyph unicode="F" horiz-adv-x="835" d="M 371,0 L 201,0 201,1462 1016,1462 1016,1311 371,1311 371,776 977,776 977,625 371,625 371,0 Z"/>
   <glyph unicode="E" horiz-adv-x="835" d="M 1016,0 L 201,0 201,1462 1016,1462 1016,1311 371,1311 371,840 977,840 977,690 371,690 371,152 1016,152 1016,0 Z"/>
   <glyph unicode="D" horiz-adv-x="1180" d="M 1368,745 C 1368,504 1303,319 1172,192 1041,64 852,0 606,0 L 201,0 201,1462 649,1462 C 876,1462 1053,1399 1179,1273 1305,1147 1368,971 1368,745 Z M 1188,739 C 1188,930 1140,1073 1045,1170 949,1267 807,1315 618,1315 L 371,1315 371,147 578,147 C 781,147 933,197 1035,297 1137,396 1188,544 1188,739 Z"/>
   <glyph unicode="C" horiz-adv-x="1126" d="M 827,1331 C 666,1331 540,1278 447,1171 354,1064 307,917 307,731 307,540 352,392 442,288 531,183 659,131 825,131 927,131 1043,149 1174,186 L 1174,37 C 1073,-1 948,-20 799,-20 584,-20 418,45 301,176 184,307 125,492 125,733 125,884 153,1016 210,1129 266,1242 347,1330 454,1391 560,1452 685,1483 829,1483 982,1483 1116,1455 1231,1399 L 1159,1253 C 1048,1305 938,1331 827,1331 Z"/>
   <glyph unicode="B" horiz-adv-x="1017" d="M 201,1462 L 614,1462 C 808,1462 948,1433 1035,1375 1122,1317 1165,1225 1165,1100 1165,1013 1141,942 1093,886 1044,829 974,793 881,776 L 881,766 C 1103,728 1214,611 1214,416 1214,285 1170,183 1082,110 993,37 870,0 711,0 L 201,0 201,1462 Z M 371,836 L 651,836 C 771,836 857,855 910,893 963,930 989,994 989,1083 989,1165 960,1224 901,1261 842,1297 749,1315 621,1315 L 371,1315 371,836 Z M 371,692 L 371,145 676,145 C 794,145 883,168 943,214 1002,259 1032,331 1032,428 1032,519 1002,585 941,628 880,671 787,692 662,692 L 371,692 Z"/>
   <glyph unicode="A" horiz-adv-x="1307" d="M 1120,0 L 938,465 352,465 172,0 0,0 578,1468 721,1468 1296,0 1120,0 Z M 885,618 L 715,1071 C 693,1128 670,1199 647,1282 632,1218 611,1148 584,1071 L 412,618 885,618 Z"/>
   <glyph unicode="=" horiz-adv-x="944" d="M 119,858 L 119,995 1049,995 1049,858 119,858 Z M 119,449 L 119,586 1049,586 1049,449 119,449 Z"/>
   <glyph unicode=":" horiz-adv-x="255" d="M 152,106 C 152,151 162,185 183,208 203,231 232,242 270,242 309,242 339,231 361,208 382,185 393,151 393,106 393,63 382,29 360,6 338,-17 308,-29 270,-29 236,-29 208,-18 186,3 163,24 152,58 152,106 Z M 152,989 C 152,1079 191,1124 270,1124 352,1124 393,1079 393,989 393,946 382,912 360,889 338,866 308,854 270,854 236,854 208,865 186,886 163,907 152,941 152,989 Z"/>
   <glyph unicode="5" horiz-adv-x="944" d="M 557,893 C 711,893 832,855 921,779 1009,702 1053,598 1053,465 1053,314 1005,195 909,109 812,23 679,-20 510,-20 345,-20 220,6 133,59 L 133,219 C 180,189 238,166 307,149 376,132 445,123 512,123 629,123 721,151 786,206 851,261 883,341 883,446 883,650 758,752 508,752 445,752 360,742 254,723 L 168,778 223,1462 950,1462 950,1309 365,1309 328,870 C 405,885 481,893 557,893 Z"/>
   <glyph unicode="3" horiz-adv-x="962" d="M 1006,1118 C 1006,1025 980,948 928,889 875,830 801,790 705,770 L 705,762 C 822,747 909,710 966,650 1023,590 1051,511 1051,414 1051,275 1003,168 906,93 809,18 672,-20 494,-20 417,-20 346,-14 282,-3 217,9 155,30 94,59 L 94,217 C 157,186 225,162 297,146 368,129 436,121 500,121 753,121 879,220 879,418 879,595 740,684 461,684 L 317,684 317,827 463,827 C 577,827 667,852 734,903 801,953 834,1023 834,1112 834,1183 810,1239 761,1280 712,1321 645,1341 561,1341 497,1341 437,1332 380,1315 323,1298 259,1266 186,1219 L 102,1331 C 162,1378 231,1416 310,1443 388,1470 470,1483 557,1483 699,1483 809,1451 888,1386 967,1321 1006,1231 1006,1118 Z"/>
   <glyph unicode="0" horiz-adv-x="980" d="M 1069,733 C 1069,480 1029,292 950,167 870,42 748,-20 584,-20 427,-20 307,44 225,172 143,299 102,486 102,733 102,988 142,1177 221,1300 300,1423 421,1485 584,1485 743,1485 863,1421 946,1292 1028,1163 1069,977 1069,733 Z M 270,733 C 270,520 295,366 345,269 395,172 475,123 584,123 695,123 775,172 825,271 874,369 899,523 899,733 899,943 874,1097 825,1195 775,1292 695,1341 584,1341 475,1341 395,1293 345,1197 295,1100 270,946 270,733 Z"/>
   <glyph unicode="/" horiz-adv-x="727" d="M 731,1462 L 186,0 20,0 565,1462 731,1462 Z"/>
   <glyph unicode="." horiz-adv-x="255" d="M 152,106 C 152,151 162,185 183,208 203,231 232,242 270,242 309,242 339,231 361,208 382,185 393,151 393,106 393,63 382,29 360,6 338,-17 308,-29 270,-29 236,-29 208,-18 186,3 163,24 152,58 152,106 Z"/>
   <glyph unicode="," horiz-adv-x="328" d="M 350,238 L 365,215 C 348,148 323,71 290,-18 257,-106 223,-188 188,-264 L 63,-264 C 81,-195 101,-109 123,-7 144,95 159,177 168,238 L 350,238 Z"/>
   <glyph unicode=")" horiz-adv-x="473" d="M 524,561 C 524,386 498,222 447,71 395,-80 320,-212 223,-324 L 63,-324 C 156,-199 227,-59 276,94 325,247 350,403 350,563 350,726 326,884 278,1038 229,1192 157,1333 61,1462 L 223,1462 C 321,1345 396,1210 447,1056 498,901 524,736 524,561 Z"/>
   <glyph unicode="(" horiz-adv-x="490" d="M 82,561 C 82,738 108,903 160,1057 211,1211 286,1346 383,1462 L 545,1462 C 449,1333 377,1192 329,1038 280,884 256,726 256,563 256,403 281,247 330,94 379,-59 450,-198 543,-324 L 383,-324 C 285,-211 210,-78 159,73 108,224 82,387 82,561 Z"/>
   <glyph unicode="&amp;" horiz-adv-x="1398" d="M 414,1171 C 414,1125 426,1081 450,1040 474,998 515,948 573,889 659,939 719,985 753,1028 786,1070 803,1119 803,1174 803,1225 786,1267 752,1300 717,1332 671,1348 614,1348 555,1348 507,1332 470,1300 433,1268 414,1225 414,1171 Z M 569,129 C 730,129 863,180 969,283 L 532,707 C 458,662 406,624 375,595 344,565 322,533 307,499 292,465 285,426 285,383 285,305 311,243 363,198 414,152 483,129 569,129 Z M 113,379 C 113,466 136,542 183,609 229,676 312,743 432,811 375,874 337,922 317,955 296,988 280,1022 268,1057 256,1092 250,1129 250,1167 250,1267 283,1345 348,1401 413,1457 504,1485 621,1485 729,1485 814,1457 876,1402 938,1346 969,1268 969,1169 969,1098 946,1032 901,972 856,911 781,850 676,788 L 1083,397 C 1120,438 1150,487 1173,543 1195,598 1214,659 1229,725 L 1397,725 C 1352,534 1283,390 1192,291 L 1491,0 1262,0 1077,178 C 998,107 918,57 837,26 756,-5 665,-20 565,-20 422,-20 311,15 232,86 153,157 113,254 113,379 Z"/>
   <glyph unicode=" " horiz-adv-x="526"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_4" horiz-adv-x="2048">
   <font-face font-family="Open Sans embedded" units-per-em="2048" font-weight="normal" font-style="italic" ascent="2195" descent="599"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="z" horiz-adv-x="944" d="M 690,0 L -29,0 -6,117 688,971 209,971 236,1096 893,1096 864,956 184,125 715,125 690,0 Z"/>
   <glyph unicode="u" horiz-adv-x="1017" d="M 451,1096 L 301,401 C 289,342 283,295 283,262 283,167 332,119 430,119 489,119 546,139 603,179 660,219 710,276 753,351 796,426 829,516 852,621 L 952,1096 1118,1096 887,0 748,0 770,203 758,203 C 693,120 630,62 571,29 512,-4 450,-20 387,-20 302,-20 235,3 186,50 137,96 113,162 113,248 113,289 120,347 135,420 L 281,1096 451,1096 Z"/>
   <glyph unicode="t" horiz-adv-x="672" d="M 395,117 C 432,117 480,126 539,143 L 539,14 C 516,5 488,-3 455,-10 422,-17 395,-20 375,-20 292,-20 228,0 184,40 139,79 117,138 117,217 117,261 123,311 135,367 L 262,969 90,969 104,1042 289,1120 414,1348 512,1348 457,1096 731,1096 705,969 432,969 303,365 C 291,307 285,263 285,233 285,196 295,167 314,147 333,127 360,117 395,117 Z"/>
   <glyph unicode="q" horiz-adv-x="1035" d="M 641,1116 C 704,1116 759,1099 807,1066 854,1032 890,985 915,924 L 928,924 995,1096 1120,1096 784,-492 618,-492 719,-12 C 725,18 744,92 776,209 L 768,209 C 705,128 643,70 583,34 523,-2 461,-20 397,-20 304,-20 231,13 178,78 125,143 98,233 98,350 98,491 122,622 171,742 219,862 284,954 367,1019 449,1084 540,1116 641,1116 Z M 449,119 C 510,119 574,150 639,211 704,272 757,351 798,448 838,545 858,645 858,748 858,818 840,873 804,914 767,955 716,975 651,975 584,975 521,947 462,891 403,834 357,757 322,658 287,559 270,455 270,346 270,195 330,119 449,119 Z"/>
   <glyph unicode="k" horiz-adv-x="1017" d="M 330,559 L 856,1096 1057,1096 588,629 883,0 696,0 461,524 309,401 227,0 57,0 387,1556 557,1556 C 509,1332 466,1131 428,954 390,777 356,645 326,559 L 330,559 Z"/>
   <glyph unicode="a" horiz-adv-x="1035" d="M 639,1116 C 700,1116 755,1100 803,1067 851,1034 888,986 915,924 L 926,924 993,1096 1120,1096 887,0 754,0 780,209 772,209 C 653,56 527,-20 395,-20 302,-20 230,13 177,79 124,145 98,235 98,350 98,489 122,617 169,736 216,855 282,948 365,1015 448,1082 540,1116 639,1116 Z M 449,119 C 514,119 578,150 642,212 706,273 758,354 798,453 838,552 858,651 858,750 858,819 839,873 802,914 765,955 716,975 655,975 586,975 521,946 462,889 402,832 355,754 321,656 287,558 270,455 270,346 270,270 286,213 317,176 348,138 392,119 449,119 Z"/>
   <glyph unicode="T" horiz-adv-x="1036" d="M 487,0 L 315,0 592,1311 186,1311 219,1462 1204,1462 1174,1311 766,1311 487,0 Z"/>
   <glyph unicode="S" horiz-adv-x="1035" d="M 913,424 C 913,283 866,174 773,97 679,19 547,-20 377,-20 306,-20 244,-15 191,-6 137,4 86,20 39,43 L 39,213 C 147,157 260,129 379,129 487,129 573,154 636,205 699,255 731,324 731,412 731,464 714,510 679,550 644,589 578,636 483,690 382,747 313,803 274,860 235,917 215,984 215,1061 215,1186 259,1287 347,1366 435,1444 551,1483 694,1483 760,1483 822,1477 879,1464 936,1451 996,1430 1059,1399 L 993,1249 C 949,1274 900,1294 845,1309 790,1324 740,1331 694,1331 605,1331 533,1308 479,1262 424,1215 397,1152 397,1073 397,1037 403,1006 414,981 425,955 443,931 468,908 493,885 540,854 610,813 708,754 774,708 809,675 843,642 869,605 887,565 904,524 913,477 913,424 Z"/>
   <glyph unicode="0" horiz-adv-x="999" d="M 1092,1014 C 1092,817 1066,638 1014,475 961,312 890,189 800,106 709,22 604,-20 485,-20 368,-20 278,23 215,108 152,193 121,316 121,477 121,657 148,829 203,992 258,1155 330,1278 420,1361 509,1444 612,1485 727,1485 970,1485 1092,1328 1092,1014 Z M 717,1341 C 642,1341 572,1303 508,1226 444,1149 392,1041 353,903 313,764 293,623 293,479 293,364 310,276 343,215 376,154 430,123 504,123 581,123 650,161 713,237 776,313 826,422 864,565 901,708 920,859 920,1018 920,1233 852,1341 717,1341 Z"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_5" horiz-adv-x="2048">
   <font-face font-family="Open Sans embedded" units-per-em="2048" font-weight="bold" font-style="normal" ascent="2195" descent="599"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="u" horiz-adv-x="1053" d="M 952,0 L 911,143 895,143 C 862,91 816,51 756,23 696,-6 628,-20 551,-20 420,-20 321,15 254,86 187,156 154,257 154,389 L 154,1118 459,1118 459,465 C 459,384 473,324 502,284 531,243 576,223 639,223 724,223 786,252 824,309 862,366 881,460 881,592 L 881,1118 1186,1118 1186,0 952,0 Z"/>
   <glyph unicode="t" horiz-adv-x="800" d="M 631,223 C 684,223 748,235 823,258 L 823,31 C 747,-3 654,-20 543,-20 421,-20 332,11 277,73 221,134 193,227 193,350 L 193,889 47,889 47,1018 215,1120 303,1356 498,1356 498,1118 811,1118 811,889 498,889 498,350 C 498,307 510,275 535,254 559,233 591,223 631,223 Z"/>
   <glyph unicode="r" horiz-adv-x="745" d="M 784,1139 C 825,1139 860,1136 887,1130 L 864,844 C 839,851 809,854 774,854 677,854 601,829 547,779 492,729 465,659 465,569 L 465,0 160,0 160,1118 391,1118 436,930 451,930 C 486,993 533,1043 592,1082 651,1120 715,1139 784,1139 Z"/>
   <glyph unicode="p" horiz-adv-x="1072" d="M 774,-20 C 643,-20 540,28 465,123 L 449,123 C 460,30 465,-24 465,-39 L 465,-492 160,-492 160,1118 408,1118 451,973 465,973 C 536,1084 642,1139 782,1139 914,1139 1017,1088 1092,986 1167,884 1204,742 1204,561 1204,442 1187,338 1152,250 1117,162 1067,95 1002,49 937,3 861,-20 774,-20 Z M 684,895 C 609,895 554,872 519,826 484,779 466,703 465,596 L 465,563 C 465,443 483,357 519,305 554,253 611,227 688,227 825,227 893,340 893,565 893,675 876,758 843,813 809,868 756,895 684,895 Z"/>
   <glyph unicode="o" horiz-adv-x="1089" d="M 403,561 C 403,450 421,367 458,310 494,253 553,225 635,225 716,225 775,253 811,310 846,366 864,450 864,561 864,672 846,755 810,810 774,865 715,893 633,893 552,893 493,866 457,811 421,756 403,672 403,561 Z M 1176,561 C 1176,379 1128,237 1032,134 936,31 802,-20 631,-20 524,-20 429,4 347,51 265,98 202,165 158,253 114,341 92,444 92,561 92,744 140,886 235,987 330,1088 464,1139 637,1139 744,1139 839,1116 921,1069 1003,1022 1066,955 1110,868 1154,781 1176,678 1176,561 Z"/>
   <glyph unicode="n" horiz-adv-x="1053" d="M 1192,0 L 887,0 887,653 C 887,734 873,794 844,835 815,875 770,895 707,895 622,895 560,867 522,810 484,753 465,658 465,526 L 465,0 160,0 160,1118 393,1118 434,975 451,975 C 485,1029 532,1070 592,1098 651,1125 719,1139 795,1139 925,1139 1024,1104 1091,1034 1158,963 1192,862 1192,729 L 1192,0 Z"/>
   <glyph unicode="m" horiz-adv-x="1725" d="M 1161,0 L 856,0 856,653 C 856,734 843,794 816,835 789,875 746,895 688,895 610,895 553,866 518,809 483,752 465,657 465,526 L 465,0 160,0 160,1118 393,1118 434,975 451,975 C 481,1026 524,1067 581,1096 638,1125 703,1139 776,1139 943,1139 1057,1084 1116,975 L 1143,975 C 1173,1027 1217,1067 1276,1096 1334,1125 1400,1139 1473,1139 1600,1139 1696,1107 1761,1042 1826,977 1858,872 1858,729 L 1858,0 1552,0 1552,653 C 1552,734 1539,794 1512,835 1485,875 1442,895 1384,895 1309,895 1254,868 1217,815 1180,762 1161,677 1161,561 L 1161,0 Z"/>
   <glyph unicode="l" horiz-adv-x="328" d="M 465,0 L 160,0 160,1556 465,1556 465,0 Z"/>
   <glyph unicode="k" horiz-adv-x="1144" d="M 453,608 L 586,778 899,1118 1243,1118 799,633 1270,0 918,0 596,453 465,348 465,0 160,0 160,1556 465,1556 465,862 449,608 453,608 Z"/>
   <glyph unicode="i" horiz-adv-x="346" d="M 147,1407 C 147,1506 202,1556 313,1556 424,1556 479,1506 479,1407 479,1360 465,1323 438,1297 410,1270 368,1257 313,1257 202,1257 147,1307 147,1407 Z M 465,0 L 160,0 160,1118 465,1118 465,0 Z"/>
   <glyph unicode="h" horiz-adv-x="1053" d="M 1192,0 L 887,0 887,653 C 887,814 827,895 707,895 622,895 560,866 522,808 484,750 465,656 465,526 L 465,0 160,0 160,1556 465,1556 465,1239 C 465,1214 463,1156 458,1065 L 451,975 467,975 C 535,1084 643,1139 791,1139 922,1139 1022,1104 1090,1033 1158,962 1192,861 1192,729 L 1192,0 Z"/>
   <glyph unicode="g" horiz-adv-x="1144" d="M 1133,1118 L 1133,963 958,918 C 990,868 1006,812 1006,750 1006,631 964,537 881,470 797,403 681,370 532,370 L 477,370 432,375 C 401,351 385,325 385,296 385,253 441,231 553,231 L 743,231 C 866,231 959,205 1024,152 1088,99 1120,22 1120,-80 1120,-211 1066,-312 957,-384 848,-456 691,-492 487,-492 331,-492 212,-465 130,-411 47,-356 6,-280 6,-182 6,-115 27,-58 69,-13 111,32 173,65 254,84 223,97 195,119 172,150 149,180 137,212 137,246 137,289 149,324 174,353 199,381 234,409 281,436 222,461 176,502 142,558 107,614 90,680 90,756 90,878 130,972 209,1039 288,1106 402,1139 549,1139 580,1139 618,1136 661,1131 704,1125 731,1121 743,1118 L 1133,1118 Z M 270,-158 C 270,-200 290,-233 331,-257 371,-281 427,-293 500,-293 609,-293 695,-278 757,-248 819,-218 850,-177 850,-125 850,-83 832,-54 795,-38 758,-22 702,-14 625,-14 L 467,-14 C 411,-14 364,-27 327,-54 289,-80 270,-115 270,-158 Z M 381,752 C 381,691 395,643 423,608 450,573 492,555 549,555 606,555 648,573 675,608 702,643 715,691 715,752 715,887 660,954 549,954 437,954 381,887 381,752 Z"/>
   <glyph unicode="b" horiz-adv-x="1072" d="M 782,1139 C 914,1139 1017,1088 1092,985 1167,882 1204,740 1204,561 1204,376 1166,233 1089,132 1012,31 907,-20 774,-20 643,-20 540,28 465,123 L 444,123 393,0 160,0 160,1556 465,1556 465,1194 C 465,1148 461,1074 453,973 L 465,973 C 536,1084 642,1139 782,1139 Z M 684,895 C 609,895 554,872 519,826 484,779 466,703 465,596 L 465,563 C 465,443 483,357 519,305 554,253 611,227 688,227 751,227 801,256 838,314 875,371 893,455 893,565 893,675 874,758 837,813 800,868 749,895 684,895 Z"/>
   <glyph unicode="a" horiz-adv-x="1017" d="M 870,0 L 811,152 803,152 C 752,87 699,43 645,18 590,-7 519,-20 432,-20 325,-20 240,11 179,72 117,133 86,221 86,334 86,453 128,540 211,597 294,653 419,684 586,690 L 780,696 780,745 C 780,858 722,915 606,915 517,915 412,888 291,834 L 190,1040 C 319,1107 461,1141 618,1141 768,1141 883,1108 963,1043 1043,978 1083,878 1083,745 L 1083,0 870,0 Z M 780,518 L 662,514 C 573,511 507,495 464,466 421,437 399,392 399,332 399,246 448,203 547,203 618,203 674,223 717,264 759,305 780,359 780,426 L 780,518 Z"/>
   <glyph unicode="O" horiz-adv-x="1416" d="M 1511,733 C 1511,491 1451,305 1331,175 1211,45 1039,-20 815,-20 591,-20 419,45 299,175 179,305 119,492 119,735 119,978 179,1164 300,1293 420,1421 592,1485 817,1485 1042,1485 1214,1420 1333,1291 1452,1162 1511,976 1511,733 Z M 444,733 C 444,570 475,447 537,364 599,281 692,240 815,240 1062,240 1186,404 1186,733 1186,1062 1063,1227 817,1227 694,1227 601,1186 538,1103 475,1020 444,896 444,733 Z"/>
   <glyph unicode="I" horiz-adv-x="328" d="M 184,0 L 184,1462 494,1462 494,0 184,0 Z"/>
   <glyph unicode="5" horiz-adv-x="999" d="M 614,934 C 755,934 868,894 952,815 1035,736 1077,627 1077,489 1077,326 1027,200 926,112 825,24 681,-20 494,-20 331,-20 200,6 100,59 L 100,326 C 153,298 214,275 284,258 354,240 420,231 483,231 672,231 766,308 766,463 766,610 668,684 473,684 438,684 399,681 356,674 313,667 279,659 252,651 L 129,717 184,1462 977,1462 977,1200 455,1200 428,913 463,920 C 504,929 554,934 614,934 Z"/>
   <glyph unicode="4" horiz-adv-x="1126" d="M 1137,303 L 961,303 961,0 659,0 659,303 35,303 35,518 676,1462 961,1462 961,543 1137,543 1137,303 Z M 659,543 L 659,791 C 659,832 661,892 664,971 667,1050 670,1095 672,1108 L 664,1108 C 639,1053 610,1000 575,948 L 307,543 659,543 Z"/>
   <glyph unicode="3" horiz-adv-x="1035" d="M 1047,1135 C 1047,1044 1019,966 964,902 909,838 831,794 731,770 L 731,764 C 849,749 938,714 999,657 1060,600 1090,523 1090,426 1090,285 1039,176 937,98 835,19 689,-20 500,-20 341,-20 201,6 78,59 L 78,322 C 135,293 197,270 265,252 333,234 400,225 467,225 569,225 644,242 693,277 742,312 766,367 766,444 766,513 738,561 682,590 626,619 537,633 414,633 L 303,633 303,870 416,870 C 529,870 612,885 665,915 717,944 743,995 743,1067 743,1178 674,1233 535,1233 487,1233 438,1225 389,1209 339,1193 284,1165 223,1126 L 80,1339 C 213,1435 372,1483 557,1483 708,1483 828,1452 916,1391 1003,1330 1047,1244 1047,1135 Z"/>
   <glyph unicode="2" horiz-adv-x="1035" d="M 1104,0 L 82,0 82,215 449,586 C 558,697 629,775 662,818 695,861 719,900 734,937 749,974 756,1012 756,1051 756,1110 740,1153 708,1182 675,1211 632,1225 578,1225 521,1225 466,1212 413,1186 360,1160 304,1123 246,1075 L 78,1274 C 150,1335 210,1379 257,1404 304,1429 356,1449 412,1463 468,1476 531,1483 600,1483 691,1483 772,1466 842,1433 912,1400 966,1353 1005,1293 1044,1233 1063,1164 1063,1087 1063,1020 1051,957 1028,898 1004,839 967,778 918,716 868,654 780,566 655,451 L 467,274 467,260 1104,260 1104,0 Z"/>
   <glyph unicode="1" horiz-adv-x="745" d="M 846,0 L 537,0 537,846 540,985 545,1137 C 494,1086 458,1052 438,1036 L 270,901 121,1087 592,1462 846,1462 846,0 Z"/>
   <glyph unicode="/" horiz-adv-x="854" d="M 836,1462 L 291,0 14,0 559,1462 836,1462 Z"/>
   <glyph unicode=" " horiz-adv-x="526"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_6" horiz-adv-x="2048">
   <font-face font-family="OpenSymbol embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1887" descent="635"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="" horiz-adv-x="1144" d="M 8,1128 L 1137,1128 1137,0 8,0 8,1128 Z"/>
  </font>
 </defs>
 <defs>
  <font id="EmbeddedFont_7" horiz-adv-x="2048">
   <font-face font-family="StarSymbol embedded" units-per-em="2048" font-weight="normal" font-style="normal" ascent="1887" descent="635"/>
   <missing-glyph horiz-adv-x="2048" d="M 0,0 L 2047,0 2047,2047 0,2047 0,0 Z"/>
   <glyph unicode="●" horiz-adv-x="1198" d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z"/>
   <glyph unicode="–" horiz-adv-x="1162" d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z"/>
  </font>
 </defs>
 <defs class="TextShapeIndex">
  <g ooo:slide="id1" ooo:id-list="id6 id7 id8 id9 id10 id11 id12 id13 id14 id15 id16 id17 id18 id19 id20 id21"/>
 </defs>
 <defs class="EmbeddedBulletChars">
  <g id="bullet-char-template-57356" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 580,1141 L 1163,571 580,0 -4,571 580,1141 Z"/>
  </g>
  <g id="bullet-char-template-57354" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 8,1128 L 1137,1128 1137,0 8,0 8,1128 Z"/>
  </g>
  <g id="bullet-char-template-10146" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 174,0 L 602,739 174,1481 1456,739 174,0 Z M 1358,739 L 309,1346 659,739 1358,739 Z"/>
  </g>
  <g id="bullet-char-template-10132" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 2015,739 L 1276,0 717,0 1260,543 174,543 174,936 1260,936 717,1481 1274,1481 2015,739 Z"/>
  </g>
  <g id="bullet-char-template-10007" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 0,-2 C -7,14 -16,27 -25,37 L 356,567 C 262,823 215,952 215,954 215,979 228,992 255,992 264,992 276,990 289,987 310,991 331,999 354,1012 L 381,999 492,748 772,1049 836,1024 860,1049 C 881,1039 901,1025 922,1006 886,937 835,863 770,784 769,783 710,716 594,584 L 774,223 C 774,196 753,168 711,139 L 727,119 C 717,90 699,76 672,76 641,76 570,178 457,381 L 164,-76 C 142,-110 111,-127 72,-127 30,-127 9,-110 8,-76 1,-67 -2,-52 -2,-32 -2,-23 -1,-13 0,-2 Z"/>
  </g>
  <g id="bullet-char-template-10004" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 285,-33 C 182,-33 111,30 74,156 52,228 41,333 41,471 41,549 55,616 82,672 116,743 169,778 240,778 293,778 328,747 346,684 L 369,508 C 377,444 397,411 428,410 L 1163,1116 C 1174,1127 1196,1133 1229,1133 1271,1133 1292,1118 1292,1087 L 1292,965 C 1292,929 1282,901 1262,881 L 442,47 C 390,-6 338,-33 285,-33 Z"/>
  </g>
  <g id="bullet-char-template-9679" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 813,0 C 632,0 489,54 383,161 276,268 223,411 223,592 223,773 276,916 383,1023 489,1130 632,1184 813,1184 992,1184 1136,1130 1245,1023 1353,916 1407,772 1407,592 1407,412 1353,268 1245,161 1136,54 992,0 813,0 Z"/>
  </g>
  <g id="bullet-char-template-8226" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 346,457 C 273,457 209,483 155,535 101,586 74,649 74,723 74,796 101,859 155,911 209,963 273,989 346,989 419,989 480,963 531,910 582,859 608,796 608,723 608,648 583,586 532,535 482,483 420,457 346,457 Z"/>
  </g>
  <g id="bullet-char-template-8211" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M -4,459 L 1135,459 1135,606 -4,606 -4,459 Z"/>
  </g>
  <g id="bullet-char-template-61548" transform="scale(0.00048828125,-0.00048828125)">
   <path d="M 173,740 C 173,903 231,1043 346,1159 462,1274 601,1332 765,1332 928,1332 1067,1274 1183,1159 1299,1043 1357,903 1357,740 1357,577 1299,437 1183,322 1067,206 928,148 765,148 601,148 462,206 346,322 231,437 173,577 173,740 Z"/>
  </g>
 </defs>
 <defs class="TextEmbeddedBitmaps"/>
 <defs>
  <g id="dummy-master-page" ooo:name="dummy-master-page" class="Master_Slide">
   <g id="bg-dummy-master-page" class="Background" visibility="hidden"/>
   <g id="bo-dummy-master-page" class="BackgroundObjects" visibility="hidden"/>
  </g>
  <g id="id2" ooo:name="Default" class="Master_Slide">
   <g id="bg-id2" class="Background"/>
   <g id="bo-id2" class="BackgroundObjects">
    <g visibility="hidden" ooo:text-adjust="left" class="Date/Time">
     <g id="id3">
      <rect class="BoundingBox" stroke="none" fill="none" x="1400" y="14348" width="6524" height="1086"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Serif, serif" font-size="493px" font-weight="400"><tspan class="TextPosition" x="1400" y="14784"><tspan class="PlaceholderText" fill="rgb(0,0,0)" stroke="none">&lt;date/time&gt;</tspan></tspan></tspan></text>
     </g>
    </g>
    <g visibility="hidden" ooo:text-adjust="center" class="Footer">
     <g id="id4">
      <rect class="BoundingBox" stroke="none" fill="none" x="9576" y="14348" width="8876" height="1086"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Serif, serif" font-size="493px" font-weight="400"><tspan class="TextPosition" x="13152" y="14784"><tspan class="PlaceholderText" fill="rgb(0,0,0)" stroke="none">&lt;footer&gt;</tspan></tspan></tspan></text>
     </g>
    </g>
    <g visibility="hidden" ooo:text-adjust="right" class="Slide_Number">
     <g id="id5">
      <rect class="BoundingBox" stroke="none" fill="none" x="20076" y="14348" width="6524" height="1086"/>
      <text class="TextShape"><tspan class="TextParagraph" font-family="Liberation Serif, serif" font-size="493px" font-weight="400"><tspan class="TextPosition" x="24551" y="14784"><tspan class="PlaceholderText" fill="rgb(0,0,0)" stroke="none">&lt;number&gt;</tspan></tspan></tspan></text>
     </g>
    </g>
   </g>
  </g>
 </defs>
 <g class="DummySlide">
  <g>
   <g id="dummy-slide" class="Slide" clip-path="url(#presentation_clip_path)">
    <g ooo:name="dummy-page" class="Page"/>
   </g>
  </g>
 </g>
 <g class="SlideGroup">
  <g visibility="hidden">
   <g id="container-id1">
    <g id="id1" class="Slide" clip-path="url(#presentation_clip_path)">
     <g ooo:name="page1" class="Page">
      <g class="Graphic">
       <g id="id6">
        <rect class="BoundingBox" stroke="none" fill="none" x="12500" y="254" width="3001" height="2191"/>
        <path fill="none" stroke="rgb(0,0,0)" stroke-width="127" stroke-linejoin="miter" d="M 14550,1129 C 14550,1403 14328,1625 14054,1625 13780,1625 13557,1403 13557,1129 13557,855 13780,633 14054,633"/>
        <path fill="none" stroke="rgb(0,0,0)" stroke-width="127" stroke-linejoin="miter" stroke-linecap="square" d="M 13108,1389 L 15236,1390"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 13987,704 C 13978,756 13945,810 13945,810 L 14400,633 13945,456 C 13945,456 13978,510 13987,562 13997,618 13995,633 13995,633 13995,633 13997,648 13987,704 L 13987,704 Z"/>
        <path fill="none" stroke="rgb(0,0,0)" stroke-width="1" stroke-linejoin="miter" d="M 13987,704 C 13978,756 13945,810 13945,810 L 14400,633 13945,456 C 13945,456 13978,510 13987,562 13997,618 13995,633 13995,633 13995,633 13997,648 13987,704 L 13987,704 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 13116,1460 C 13125,1512 13158,1566 13158,1566 L 12703,1389 13158,1212 C 13158,1212 13125,1266 13116,1319 13106,1374 13108,1389 13108,1389 13108,1389 13106,1404 13116,1460 L 13116,1460 Z"/>
        <path fill="none" stroke="rgb(0,0,0)" stroke-width="1" stroke-linejoin="miter" d="M 13116,1460 C 13125,1512 13158,1566 13158,1566 L 12703,1389 13158,1212 C 13158,1212 13125,1266 13116,1319 13106,1374 13108,1389 13108,1389 13108,1389 13106,1404 13116,1460 L 13116,1460 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 12806,2058 L 12998,2058 12902,1821 12806,2058 Z M 13010,2087 L 12792,2087 12731,2239 12701,2239 12901,1745 13102,2239 13071,2239 13010,2087 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 13183,2045 L 13419,2045 C 13413,2012 13399,1985 13377,1963 13355,1942 13329,1931 13301,1931 13272,1931 13247,1942 13225,1963 13203,1985 13189,2012 13183,2045 L 13183,2045 Z M 13450,2072 L 13179,2072 C 13179,2111 13191,2145 13215,2172 13238,2199 13267,2213 13299,2213 13321,2213 13342,2207 13363,2195 13383,2183 13399,2167 13410,2148 L 13435,2162 C 13422,2186 13403,2206 13378,2221 13352,2236 13326,2243 13299,2243 13272,2243 13247,2236 13225,2220 13202,2205 13184,2184 13171,2158 13158,2131 13152,2103 13152,2072 13152,2042 13158,2014 13171,1988 13185,1962 13203,1941 13225,1925 13249,1910 13274,1902 13301,1902 13326,1902 13350,1909 13372,1923 13394,1937 13412,1956 13426,1980 13439,2003 13447,2029 13450,2058 L 13450,2072 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 13534,1907 L 13565,1907 C 13569,1921 13571,1936 13571,1951 L 13571,1992 C 13576,1975 13587,1958 13605,1940 13623,1922 13641,1909 13659,1902 L 13691,1925 C 13672,1925 13653,1932 13635,1945 13616,1959 13601,1977 13589,1999 13577,2021 13571,2044 13571,2068 L 13571,2239 13542,2239 13542,1951 C 13542,1932 13539,1917 13534,1907 L 13534,1907 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 13965,1915 C 13985,1924 14003,1936 14018,1951 14033,1967 14045,1985 14054,2006 14062,2027 14067,2049 14067,2072 14067,2096 14062,2118 14054,2139 14045,2160 14033,2178 14018,2194 14003,2209 13985,2221 13965,2230 13945,2239 13923,2243 13901,2243 13855,2243 13816,2227 13783,2193 13751,2160 13735,2120 13735,2072 13735,2042 13742,2013 13757,1987 13772,1960 13792,1940 13817,1925 13843,1909 13871,1902 13901,1902 13923,1902 13945,1906 13965,1915 Z M 13763,2072 C 13763,2111 13777,2145 13804,2173 13831,2201 13863,2214 13901,2214 13940,2214 13972,2201 13999,2173 14026,2145 14039,2111 14039,2072 14039,2034 14026,2000 13999,1973 13972,1945 13940,1931 13901,1931 13863,1931 13831,1945 13804,1973 13777,2000 13763,2034 13763,2072 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 14188,2209 L 14327,2209 C 14362,2209 14392,2198 14416,2176 14440,2153 14452,2127 14452,2095 14452,2064 14440,2037 14416,2015 14392,1993 14362,1982 14327,1982 L 14188,1982 14188,2209 Z M 14415,1867 C 14415,1843 14406,1823 14388,1806 14370,1788 14347,1780 14321,1780 L 14188,1780 14188,1952 14321,1952 C 14348,1952 14370,1944 14388,1928 14406,1911 14415,1891 14415,1867 L 14415,1867 Z M 14159,1750 L 14323,1750 C 14356,1750 14385,1762 14409,1785 14433,1808 14445,1835 14445,1867 14445,1888 14440,1906 14430,1923 14419,1940 14406,1954 14388,1964 14416,1975 14438,1992 14455,2016 14472,2039 14480,2066 14480,2095 14480,2121 14474,2145 14460,2167 14446,2189 14427,2207 14403,2220 14380,2232 14354,2239 14327,2239 L 14159,2239 14159,1750 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 14572,1907 L 14601,1907 14601,2112 C 14601,2141 14609,2165 14626,2185 14643,2204 14664,2214 14688,2214 14712,2214 14733,2204 14751,2185 14769,2165 14778,2140 14778,2112 L 14778,1907 14807,1907 14807,2112 C 14807,2148 14795,2179 14773,2205 14750,2231 14722,2243 14689,2243 14657,2243 14629,2231 14606,2205 14583,2179 14572,2148 14572,2112 L 14572,1907 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 14942,2239 L 14914,2239 14914,1750 14942,1750 14942,2239 Z"/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 15078,2239 L 15049,2239 15049,1750 15078,1750 15078,2040 15221,1907 15264,1907 15128,2034 15299,2239 15262,2239 15107,2053 15078,2080 15078,2239 Z"/>
       </g>
      </g>
      <g class="com.sun.star.drawing.TextShape">
       <g id="id7">
        <rect class="BoundingBox" stroke="none" fill="none" x="20258" y="14764" width="8129" height="731"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="353px" font-weight="400"><tspan class="TextPosition" x="20508" y="15266"><tspan id="id22" fill="rgb(128,128,128)" stroke="none" class="UrlField" xlink:href="https://github.com/brodeau/aerobulk"><a xlink:href="https://github.com/brodeau/aerobulk">https://github.com/brodeau/aerobulk</a></tspan></tspan></tspan></text>
        <desc class="HyperlinkIdList">id22</desc>
       </g>
      </g>
      <g class="Group">
       <g class="com.sun.star.drawing.TextShape">
        <g id="id8">
         <rect class="BoundingBox" stroke="none" fill="none" x="19242" y="1816" width="6667" height="2844"/>
         <text class="TextShape"><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="2234"><tspan id="id23.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="2280"><tspan fill="rgb(170,0,0)" stroke="none">SST</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="2666"><tspan id="id24.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="2712"><tspan fill="rgb(170,0,0)" stroke="none">Wind vector at h=</tspan><tspan font-style="italic" fill="rgb(170,0,0)" stroke="none">zu</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="3098"><tspan id="id25.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="3144"><tspan fill="rgb(170,0,0)" stroke="none">Temperature </tspan><tspan fill="rgb(170,0,0)" stroke="none">of air (</tspan><tspan font-style="italic" fill="rgb(170,0,0)" stroke="none">T</tspan><tspan fill="rgb(170,0,0)" stroke="none">) at h=</tspan><tspan font-style="italic" fill="rgb(170,0,0)" stroke="none">zt</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="3530"><tspan id="id26.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="3576"><tspan fill="rgb(170,0,0)" stroke="none">Specific humidity of air (</tspan><tspan font-style="italic" fill="rgb(170,0,0)" stroke="none">q</tspan><tspan fill="rgb(170,0,0)" stroke="none">) at h=</tspan><tspan font-style="italic" fill="rgb(170,0,0)" stroke="none">zt</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="3962"><tspan id="id27.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="4008"><tspan fill="rgb(170,0,0)" stroke="none">Atmospheric pressure</tspan></tspan></tspan></text>
         <g class="BulletChars">
          <g id="bullet-char-id27.bp" class="BulletChar">
           <g transform="translate(19492,3962)" fill="rgb(170,0,0)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id26.bp" class="BulletChar">
           <g transform="translate(19492,3530)" fill="rgb(170,0,0)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id25.bp" class="BulletChar">
           <g transform="translate(19492,3098)" fill="rgb(170,0,0)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id24.bp" class="BulletChar">
           <g transform="translate(19492,2666)" fill="rgb(170,0,0)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id23.bp" class="BulletChar">
           <g transform="translate(19492,2234)" fill="rgb(170,0,0)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
         </g>
        </g>
       </g>
      </g>
      <g class="Group">
       <g class="com.sun.star.drawing.TextShape">
        <g id="id9">
         <rect class="BoundingBox" stroke="none" fill="none" x="19204" y="11530" width="6351" height="1404"/>
         <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="388px" font-weight="400"><tspan class="TextPosition" x="19454" y="12070"><tspan fill="rgb(0,0,0)" stroke="none">Bulk Formulae applied at h=</tspan><tspan font-style="italic" fill="rgb(0,0,0)" stroke="none">zu</tspan><tspan fill="rgb(0,0,0)" stroke="none"> :</tspan></tspan></tspan></text>
        </g>
       </g>
       <g class="com.sun.star.drawing.TextShape">
        <g id="id10">
         <rect class="BoundingBox" stroke="none" fill="none" x="20728" y="11562" width="6351" height="2509"/>
         <text class="TextShape"><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="20978" y="12513"><tspan id="id28.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="21578" y="12555"><tspan fill="rgb(0,0,0)" stroke="none">Wind stress vector</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="20978" y="12945"><tspan id="id29.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="21578" y="12987"><tspan fill="rgb(0,0,0)" stroke="none">Latent heat flux</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="20978" y="13377"><tspan id="id30.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="21578" y="13419"><tspan fill="rgb(0,0,0)" stroke="none">Sensible heat flux</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="20978" y="13809"><tspan id="id31.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="21578" y="13851"><tspan fill="rgb(0,0,0)" stroke="none">Evaporation</tspan></tspan></tspan></text>
         <g class="BulletChars">
          <g id="bullet-char-id31.bp" class="BulletChar">
           <g transform="translate(20978,13809)" fill="rgb(0,0,0)" stroke="none">
            <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id30.bp" class="BulletChar">
           <g transform="translate(20978,13377)" fill="rgb(0,0,0)" stroke="none">
            <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id29.bp" class="BulletChar">
           <g transform="translate(20978,12945)" fill="rgb(0,0,0)" stroke="none">
            <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id28.bp" class="BulletChar">
           <g transform="translate(20978,12513)" fill="rgb(0,0,0)" stroke="none">
            <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
         </g>
        </g>
       </g>
      </g>
      <g class="com.sun.star.drawing.TextShape">
       <g id="id11">
        <rect class="BoundingBox" stroke="none" fill="none" x="1700" y="4650" width="4813" height="1598"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="5304"><tspan font-weight="700" fill="rgb(136,0,170)" stroke="none">2/</tspan><tspan fill="rgb(136,0,170)" stroke="none"> AeroBulk</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="5977"><tspan fill="rgb(136,0,170)" stroke="none">      “</tspan><tspan fill="rgb(136,0,170)" stroke="none">early”</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.TextShape">
       <g id="id12">
        <rect class="BoundingBox" stroke="none" fill="none" x="1700" y="2850" width="2747" height="1598"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="700"><tspan class="TextPosition" x="1950" y="3504"><tspan fill="rgb(170,0,0)" stroke="none">1/ Input</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.TextShape">
       <g id="id13">
        <rect class="BoundingBox" stroke="none" fill="none" x="1700" y="6800" width="6121" height="1598"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="7454"><tspan font-weight="700" fill="rgb(56,138,186)" stroke="none">3/</tspan><tspan fill="rgb(56,138,186)" stroke="none"> AeroBulk</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="8127"><tspan fill="rgb(56,138,186)" stroke="none">   “</tspan><tspan fill="rgb(56,138,186)" stroke="none">iterative core”</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.TextShape">
       <g id="id14">
        <rect class="BoundingBox" stroke="none" fill="none" x="1700" y="8951" width="4813" height="1598"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="9605"><tspan font-weight="700" fill="rgb(68,120,33)" stroke="none">4/</tspan><tspan fill="rgb(68,120,33)" stroke="none"> AeroBulk</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="10278"><tspan fill="rgb(68,120,33)" stroke="none">      “</tspan><tspan fill="rgb(68,120,33)" stroke="none">late”</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="com.sun.star.drawing.TextShape">
       <g id="id15">
        <rect class="BoundingBox" stroke="none" fill="none" x="1700" y="11152" width="4813" height="3617"/>
        <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="700"><tspan class="TextPosition" x="1950" y="11806"><tspan fill="rgb(0,0,0)" stroke="none">5/ Output</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="12479"><tspan fill="rgb(0,0,0)" stroke="none">    “</tspan><tspan fill="rgb(0,0,0)" stroke="none">turbulent</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="13152"><tspan fill="rgb(0,0,0)" stroke="none">          </tspan><tspan fill="rgb(0,0,0)" stroke="none">sea</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="13825"><tspan fill="rgb(0,0,0)" stroke="none">       </tspan><tspan fill="rgb(0,0,0)" stroke="none">surface</tspan></tspan></tspan><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="494px" font-weight="400"><tspan class="TextPosition" x="1950" y="14498"><tspan fill="rgb(0,0,0)" stroke="none">        </tspan><tspan fill="rgb(0,0,0)" stroke="none">fluxes”</tspan></tspan></tspan></text>
       </g>
      </g>
      <g class="Graphic">
       <g id="id16">
        <rect class="BoundingBox" stroke="none" fill="none" x="6894" y="2751" width="11501" height="12071"/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 7507,3247 L 7527,3153 7514,3153 7514,3153 C 7507,3164 7505,3166 7493,3166 L 7493,3166 C 7488,3166 7484,3164 7471,3159 L 7471,3159 C 7462,3157 7445,3155 7431,3155 L 7431,3155 C 7381,3155 7347,3185 7347,3234 L 7347,3234 C 7347,3260 7355,3271 7383,3303 L 7383,3303 C 7386,3307 7392,3315 7400,3324 L 7400,3324 C 7409,3331 7417,3339 7419,3343 L 7419,3343 C 7441,3367 7448,3379 7448,3399 L 7448,3399 C 7448,3434 7422,3463 7386,3463 L 7386,3463 C 7347,3463 7317,3429 7317,3384 L 7317,3384 C 7317,3379 7319,3377 7319,3371 L 7309,3371 7292,3476 7302,3476 7302,3476 C 7304,3467 7309,3463 7319,3463 L 7319,3463 C 7324,3463 7330,3463 7345,3467 L 7345,3467 C 7366,3476 7379,3480 7392,3480 L 7392,3480 C 7448,3480 7490,3439 7490,3384 L 7490,3384 C 7490,3352 7479,3333 7435,3290 L 7435,3290 C 7392,3247 7388,3241 7388,3219 L 7388,3219 C 7388,3188 7409,3168 7441,3168 L 7441,3168 C 7460,3168 7474,3176 7484,3188 L 7484,3188 C 7493,3200 7498,3215 7498,3247 L 7507,3247 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 7749,3247 L 7768,3153 7755,3153 7755,3153 C 7751,3164 7746,3166 7736,3166 L 7736,3166 C 7730,3166 7725,3164 7713,3159 L 7713,3159 C 7704,3157 7689,3155 7672,3155 L 7672,3155 C 7625,3155 7589,3185 7589,3234 L 7589,3234 C 7589,3260 7595,3271 7625,3303 L 7625,3303 C 7629,3307 7634,3315 7644,3324 L 7644,3324 C 7651,3331 7657,3339 7660,3343 L 7660,3343 C 7684,3367 7689,3379 7689,3399 L 7689,3399 C 7689,3434 7663,3463 7629,3463 L 7629,3463 C 7589,3463 7560,3429 7560,3384 L 7560,3384 C 7560,3379 7560,3377 7560,3371 L 7550,3371 7533,3476 7543,3476 7543,3476 C 7546,3467 7552,3463 7560,3463 L 7560,3463 C 7565,3463 7574,3463 7586,3467 L 7586,3467 C 7608,3476 7619,3480 7634,3480 L 7634,3480 C 7689,3480 7732,3439 7732,3384 L 7732,3384 C 7732,3352 7719,3333 7677,3290 L 7677,3290 C 7634,3247 7631,3241 7631,3219 L 7631,3219 C 7631,3188 7651,3168 7681,3168 L 7681,3168 C 7700,3168 7715,3176 7725,3188 L 7725,3188 C 7736,3200 7739,3215 7739,3247 L 7749,3247 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 8068,3159 L 7815,3159 7796,3234 7803,3236 7803,3236 C 7830,3183 7843,3176 7918,3176 L 7849,3427 7849,3427 C 7841,3453 7830,3461 7798,3463 L 7798,3470 7937,3470 7937,3463 7937,3463 C 7930,3463 7920,3461 7918,3461 L 7918,3461 C 7899,3461 7894,3455 7894,3441 L 7894,3441 C 7894,3434 7894,3429 7899,3412 L 7965,3176 7992,3176 7992,3176 C 8025,3176 8042,3188 8042,3215 L 8042,3215 C 8042,3221 8040,3228 8040,3236 L 8049,3238 8068,3159 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 8155,3470 L 8155,3470 C 8155,3439 8142,3420 8123,3420 L 8123,3420 C 8106,3420 8099,3431 8099,3446 L 8099,3446 C 8099,3458 8106,3470 8123,3470 L 8123,3470 C 8130,3470 8135,3470 8140,3465 L 8140,3465 C 8142,3463 8142,3463 8142,3463 L 8142,3463 C 8142,3463 8142,3463 8142,3470 L 8142,3470 C 8142,3506 8128,3534 8111,3549 L 8111,3549 C 8106,3553 8106,3555 8106,3558 L 8106,3558 C 8106,3561 8108,3563 8111,3563 L 8111,3563 C 8116,3563 8155,3525 8155,3470 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 8658,3202 L 8658,3202 C 8658,3174 8662,3166 8694,3162 L 8694,3149 8589,3149 8589,3162 8589,3162 C 8627,3164 8636,3174 8636,3207 L 8636,3352 8636,3352 C 8636,3425 8610,3455 8553,3455 L 8553,3455 C 8505,3455 8484,3429 8484,3365 L 8484,3205 8484,3205 C 8484,3185 8486,3176 8493,3168 L 8493,3168 C 8497,3164 8505,3162 8529,3162 L 8529,3149 8369,3149 8369,3162 8369,3162 C 8403,3164 8407,3172 8407,3205 L 8407,3365 8407,3365 C 8407,3410 8416,3434 8446,3455 L 8446,3455 C 8469,3472 8500,3480 8533,3480 L 8533,3480 C 8570,3480 8602,3470 8621,3450 L 8621,3450 C 8646,3434 8658,3399 8658,3352 L 8658,3202 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 8732,3431 L 8732,3431 C 8741,3414 8745,3410 8762,3410 L 8813,3410 8703,3544 8706,3546 8706,3546 C 8713,3542 8717,3540 8722,3540 L 8722,3540 C 8732,3540 8743,3544 8760,3555 L 8760,3555 C 8777,3566 8789,3570 8801,3570 L 8801,3570 C 8818,3570 8835,3558 8835,3544 L 8835,3544 C 8835,3536 8827,3529 8820,3529 L 8820,3529 C 8813,3529 8809,3536 8809,3542 L 8809,3542 C 8809,3544 8811,3549 8813,3553 L 8813,3553 C 8813,3555 8813,3555 8813,3558 L 8813,3558 C 8813,3561 8811,3563 8803,3563 L 8803,3563 C 8796,3563 8792,3561 8779,3546 L 8779,3546 C 8762,3525 8758,3520 8736,3515 L 8839,3393 8839,3388 8739,3388 8727,3429 8732,3431 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 9008,3501 L 9008,3501 C 8989,3523 8982,3527 8978,3527 L 8978,3527 C 8975,3527 8973,3527 8973,3523 L 8973,3523 C 8973,3520 8973,3520 8980,3493 L 9008,3388 8982,3388 8982,3388 C 8963,3444 8959,3448 8942,3474 L 8942,3474 C 8922,3508 8903,3527 8892,3527 L 8892,3527 C 8889,3527 8884,3523 8884,3517 L 8884,3517 8884,3515 8918,3386 8918,3384 8918,3384 C 8897,3388 8884,3391 8863,3393 L 8863,3399 8863,3399 C 8877,3399 8877,3401 8880,3401 L 8880,3401 C 8882,3403 8884,3405 8884,3408 L 8884,3408 C 8884,3410 8882,3420 8880,3431 L 8865,3482 8865,3482 C 8860,3508 8858,3520 8858,3527 L 8858,3527 C 8858,3540 8863,3546 8877,3546 L 8877,3546 C 8901,3546 8920,3527 8963,3458 L 8963,3458 C 8952,3496 8946,3520 8946,3527 L 8946,3527 C 8946,3540 8952,3544 8963,3544 L 8963,3544 C 8980,3544 8987,3540 9014,3503 L 9008,3501 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 9138,3470 L 9138,3470 C 9138,3439 9125,3420 9106,3420 L 9106,3420 C 9092,3420 9083,3431 9083,3446 L 9083,3446 C 9083,3458 9092,3470 9106,3470 L 9106,3470 C 9113,3470 9119,3470 9123,3465 L 9123,3465 C 9125,3463 9125,3463 9125,3463 L 9125,3463 C 9125,3463 9125,3463 9125,3470 L 9125,3470 C 9125,3506 9111,3534 9095,3549 L 9095,3549 C 9089,3553 9089,3555 9089,3558 L 9089,3558 C 9089,3561 9092,3563 9095,3563 L 9095,3563 C 9100,3563 9138,3525 9138,3470 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 9645,3159 L 9393,3159 9371,3234 9381,3236 9381,3236 C 9405,3183 9421,3176 9493,3176 L 9427,3427 9427,3427 C 9419,3453 9407,3461 9376,3463 L 9376,3470 9514,3470 9514,3463 9514,3463 C 9505,3463 9498,3461 9495,3461 L 9495,3461 C 9476,3461 9472,3455 9472,3441 L 9472,3441 C 9472,3434 9472,3429 9476,3412 L 9540,3176 9567,3176 9567,3176 C 9602,3176 9617,3188 9617,3215 L 9617,3215 C 9617,3221 9617,3228 9617,3236 L 9624,3238 9645,3159 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 9602,3431 L 9602,3431 C 9610,3414 9615,3410 9632,3410 L 9684,3410 9572,3544 9576,3546 9576,3546 C 9581,3542 9587,3540 9591,3540 L 9591,3540 C 9600,3540 9613,3544 9629,3555 L 9629,3555 C 9649,3566 9658,3570 9670,3570 L 9670,3570 C 9686,3570 9703,3558 9703,3544 L 9703,3544 C 9703,3536 9698,3529 9689,3529 L 9689,3529 C 9684,3529 9679,3536 9679,3542 L 9679,3542 C 9679,3544 9679,3549 9681,3553 L 9681,3553 C 9681,3555 9684,3555 9684,3558 L 9684,3558 C 9684,3561 9679,3563 9672,3563 L 9672,3563 C 9664,3563 9660,3561 9649,3546 L 9649,3546 C 9634,3525 9627,3520 9605,3515 L 9707,3393 9707,3388 9608,3388 9596,3429 9602,3431 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 9808,3388 L 9779,3388 9788,3352 9788,3352 C 9792,3350 9792,3350 9792,3350 L 9792,3350 C 9792,3348 9788,3348 9786,3348 L 9786,3348 C 9786,3348 9784,3348 9782,3350 L 9782,3350 C 9767,3369 9746,3386 9734,3388 L 9734,3388 C 9726,3391 9724,3393 9724,3399 L 9724,3401 9751,3401 9724,3499 9724,3499 C 9724,3503 9724,3503 9722,3506 L 9722,3506 C 9720,3517 9715,3529 9715,3532 L 9715,3532 C 9715,3540 9724,3546 9734,3546 L 9734,3546 C 9748,3546 9760,3536 9784,3503 L 9779,3501 9779,3501 C 9763,3523 9756,3527 9751,3527 L 9751,3527 C 9746,3527 9746,3525 9746,3523 L 9746,3520 9777,3401 9805,3401 9808,3388 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 9942,3470 L 9942,3470 C 9942,3439 9929,3420 9914,3420 L 9914,3420 C 9897,3420 9887,3431 9887,3446 L 9887,3446 C 9887,3458 9897,3470 9914,3470 L 9914,3470 C 9918,3470 9923,3470 9929,3465 L 9929,3465 C 9929,3463 9929,3463 9932,3463 L 9932,3463 C 9932,3463 9932,3463 9932,3470 L 9932,3470 C 9932,3506 9916,3534 9899,3549 L 9899,3549 C 9894,3553 9894,3555 9894,3558 L 9894,3558 C 9894,3561 9897,3563 9899,3563 L 9899,3563 C 9903,3563 9942,3525 9942,3470 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 10335,3561 L 10329,3561 10329,3561 C 10309,3561 10299,3555 10299,3549 L 10299,3549 C 10299,3546 10299,3544 10303,3544 L 10378,3267 10345,3267 10338,3290 10338,3290 C 10331,3269 10321,3262 10299,3262 L 10299,3262 C 10237,3262 10162,3348 10162,3420 L 10162,3420 C 10162,3455 10181,3474 10209,3474 L 10209,3474 C 10243,3474 10267,3458 10307,3399 L 10267,3536 10267,3536 C 10259,3555 10252,3561 10221,3563 L 10221,3570 10335,3570 10335,3561 Z M 10303,3271 L 10303,3271 C 10318,3271 10331,3283 10331,3300 L 10331,3300 C 10331,3341 10297,3408 10267,3434 L 10267,3434 C 10254,3446 10239,3450 10228,3450 L 10228,3450 C 10214,3450 10202,3436 10202,3414 L 10202,3414 C 10202,3379 10228,3326 10256,3296 L 10256,3296 C 10273,3279 10288,3271 10303,3271 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 10417,3431 L 10417,3431 C 10423,3414 10429,3410 10446,3410 L 10498,3410 10386,3544 10391,3546 10391,3546 C 10395,3542 10400,3540 10407,3540 L 10407,3540 C 10414,3540 10427,3544 10442,3555 L 10442,3555 C 10462,3566 10474,3570 10483,3570 L 10483,3570 C 10500,3570 10517,3558 10517,3544 L 10517,3544 C 10517,3536 10512,3529 10504,3529 L 10504,3529 C 10498,3529 10493,3536 10493,3542 L 10493,3542 C 10493,3544 10493,3549 10495,3553 L 10495,3553 C 10498,3555 10498,3555 10498,3558 L 10498,3558 C 10498,3561 10493,3563 10489,3563 L 10489,3563 C 10479,3563 10474,3561 10462,3546 L 10462,3546 C 10448,3525 10440,3520 10419,3515 L 10521,3393 10521,3388 10421,3388 10410,3429 10417,3431 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 10622,3388 L 10594,3388 10605,3352 10605,3352 C 10605,3350 10605,3350 10605,3350 L 10605,3350 C 10605,3348 10603,3348 10603,3348 L 10603,3348 C 10600,3348 10598,3348 10596,3350 L 10596,3350 C 10581,3369 10560,3386 10548,3388 L 10548,3388 C 10541,3391 10538,3393 10538,3399 L 10538,3401 10564,3401 10538,3499 10538,3499 C 10538,3503 10538,3503 10536,3506 L 10536,3506 C 10534,3517 10532,3529 10532,3532 L 10532,3532 C 10532,3540 10538,3546 10548,3546 L 10548,3546 C 10564,3546 10577,3536 10598,3503 L 10594,3501 10594,3501 C 10577,3523 10570,3527 10564,3527 L 10564,3527 C 10562,3527 10560,3525 10560,3523 L 10560,3520 10591,3401 10622,3401 10622,3388 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 10756,3470 L 10756,3470 C 10756,3439 10746,3420 10727,3420 L 10727,3420 C 10710,3420 10701,3431 10701,3446 L 10701,3446 C 10701,3458 10710,3470 10727,3470 L 10727,3470 C 10732,3470 10739,3470 10743,3465 L 10743,3465 C 10743,3463 10746,3463 10746,3463 L 10746,3463 C 10746,3463 10746,3463 10746,3470 L 10746,3470 C 10746,3506 10729,3534 10713,3549 L 10713,3549 C 10707,3553 10707,3555 10707,3558 L 10707,3558 C 10707,3561 10710,3563 10713,3563 L 10713,3563 C 10720,3563 10756,3525 10756,3470 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 11032,3166 L 11032,3166 C 11061,3172 11066,3176 11066,3188 L 11066,3188 C 11066,3195 11066,3205 11058,3226 L 11004,3427 11004,3427 C 10994,3455 10992,3461 10963,3463 L 10963,3470 11081,3470 11081,3463 11081,3463 C 11049,3458 11047,3458 11047,3441 L 11047,3441 C 11047,3434 11049,3431 11054,3412 L 11077,3322 11077,3322 C 11090,3324 11104,3326 11123,3326 L 11123,3326 C 11161,3326 11192,3317 11214,3303 L 11214,3303 C 11237,3286 11252,3260 11252,3230 L 11252,3230 C 11252,3185 11216,3159 11152,3159 L 11032,3159 11032,3166 Z M 11116,3188 L 11116,3188 C 11121,3179 11126,3174 11139,3174 L 11139,3174 C 11156,3174 11175,3179 11185,3185 L 11185,3185 C 11197,3195 11201,3207 11201,3230 L 11201,3230 C 11201,3262 11192,3283 11171,3296 L 11171,3296 C 11156,3305 11137,3307 11109,3307 L 11109,3307 C 11099,3307 11096,3307 11083,3305 L 11116,3188 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 11286,3305 L 11286,3305 C 11267,3305 11252,3309 11237,3324 L 11237,3324 C 11216,3343 11205,3384 11205,3425 L 11205,3425 C 11205,3465 11216,3506 11233,3527 L 11233,3527 C 11245,3542 11264,3551 11286,3551 L 11286,3551 C 11302,3551 11316,3544 11331,3532 L 11331,3532 C 11350,3512 11364,3470 11364,3429 L 11364,3429 C 11364,3356 11333,3305 11286,3305 Z M 11286,3315 L 11286,3315 C 11314,3315 11331,3356 11331,3429 L 11331,3429 C 11331,3503 11314,3542 11286,3542 L 11286,3542 C 11254,3542 11237,3503 11237,3429 L 11237,3429 C 11237,3352 11254,3315 11286,3315 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 7465,5230 L 7465,5230 C 7445,5230 7426,5236 7405,5251 L 7405,5251 C 7369,5277 7343,5330 7330,5396 L 7330,5396 C 7321,5459 7328,5507 7352,5535 L 7352,5535 C 7369,5552 7388,5561 7409,5561 L 7409,5561 C 7428,5561 7448,5554 7467,5540 L 7467,5540 C 7505,5514 7531,5461 7541,5399 L 7541,5399 C 7552,5332 7546,5285 7522,5255 L 7522,5255 C 7505,5240 7486,5230 7465,5230 Z M 7490,5407 L 7490,5407 C 7481,5461 7469,5492 7452,5518 L 7452,5518 C 7441,5533 7424,5542 7412,5542 L 7412,5542 C 7400,5542 7386,5533 7381,5518 L 7381,5518 C 7371,5492 7371,5461 7379,5407 L 7490,5407 Z M 7383,5380 L 7383,5380 C 7392,5328 7405,5296 7422,5272 L 7422,5272 C 7431,5259 7450,5246 7462,5246 L 7462,5246 C 7474,5246 7488,5259 7493,5272 L 7493,5272 C 7503,5296 7503,5328 7495,5380 L 7383,5380 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 7560,5516 L 7560,5516 C 7569,5499 7574,5495 7591,5495 L 7644,5495 7531,5629 7533,5631 7533,5631 C 7541,5626 7546,5626 7550,5626 L 7550,5626 C 7560,5626 7572,5631 7589,5640 L 7589,5640 C 7605,5650 7617,5655 7629,5655 L 7629,5655 C 7646,5655 7663,5642 7663,5629 L 7663,5629 C 7663,5621 7655,5616 7648,5616 L 7648,5616 C 7644,5616 7636,5621 7636,5626 L 7636,5626 C 7636,5631 7638,5633 7640,5638 L 7640,5638 C 7640,5640 7644,5642 7644,5642 L 7644,5642 C 7644,5645 7638,5648 7631,5648 L 7631,5648 C 7625,5648 7619,5645 7608,5631 L 7608,5631 C 7591,5610 7586,5604 7565,5600 L 7668,5478 7668,5473 7567,5473 7555,5514 7560,5516 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 7768,5473 L 7739,5473 7749,5437 7749,5437 C 7751,5437 7751,5435 7751,5435 L 7751,5435 C 7751,5433 7749,5433 7746,5433 L 7746,5433 C 7744,5433 7744,5433 7741,5435 L 7741,5435 C 7727,5454 7706,5471 7693,5475 L 7693,5475 C 7684,5478 7681,5480 7681,5482 L 7681,5486 7710,5486 7684,5583 7684,5583 C 7681,5588 7681,5588 7681,5591 L 7681,5591 C 7679,5602 7674,5614 7674,5616 L 7674,5616 C 7674,5626 7681,5631 7693,5631 L 7693,5631 C 7708,5631 7719,5621 7744,5588 L 7739,5586 7739,5586 C 7722,5607 7715,5614 7710,5614 L 7710,5614 C 7706,5614 7706,5612 7706,5607 L 7706,5604 7736,5486 7766,5486 7768,5473 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 8254,5349 L 8254,5349 C 8254,5339 8252,5334 8247,5334 L 8247,5334 C 8245,5334 8243,5337 8240,5347 L 8240,5347 C 8240,5387 8206,5409 8176,5409 L 8176,5409 C 8147,5409 8123,5392 8099,5375 L 8099,5375 C 8073,5354 8049,5334 8016,5334 L 8016,5334 C 7971,5334 7937,5375 7937,5420 L 7937,5420 C 7937,5435 7944,5435 7944,5435 L 7944,5435 C 7949,5435 7952,5428 7952,5426 L 7952,5426 C 7954,5377 7992,5362 8016,5362 L 8016,5362 C 8044,5362 8068,5377 8093,5396 L 8093,5396 C 8119,5416 8142,5437 8176,5437 L 8176,5437 C 8221,5437 8254,5394 8254,5349 Z M 7954,5518 L 7954,5518 C 7946,5518 7937,5518 7937,5528 L 7937,5528 C 7937,5538 7946,5538 7954,5538 L 8238,5538 8238,5538 C 8245,5538 8254,5538 8254,5528 L 8254,5528 C 8254,5518 8245,5518 8238,5518 L 7954,5518 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 8687,5244 L 8433,5244 8414,5318 8424,5321 8424,5321 C 8448,5268 8462,5261 8536,5261 L 8467,5512 8467,5512 C 8459,5538 8448,5545 8416,5548 L 8416,5554 8555,5554 8555,5548 8555,5548 C 8548,5548 8540,5548 8536,5548 L 8536,5548 C 8517,5545 8512,5540 8512,5526 L 8512,5526 C 8512,5521 8514,5514 8517,5497 L 8584,5261 8610,5261 8610,5261 C 8643,5261 8660,5272 8660,5299 L 8660,5299 C 8660,5306 8660,5313 8658,5323 L 8668,5323 8687,5244 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 8643,5516 L 8643,5516 C 8651,5499 8655,5495 8672,5495 L 8724,5495 8615,5629 8617,5631 8617,5631 C 8621,5626 8627,5626 8634,5626 L 8634,5626 C 8641,5626 8653,5631 8670,5640 L 8670,5640 C 8689,5650 8700,5655 8711,5655 L 8711,5655 C 8730,5655 8743,5642 8743,5629 L 8743,5629 C 8743,5621 8739,5616 8732,5616 L 8732,5616 C 8724,5616 8720,5621 8720,5626 L 8720,5626 C 8720,5631 8720,5633 8722,5638 L 8722,5638 C 8724,5640 8724,5642 8724,5642 L 8724,5642 C 8724,5645 8720,5648 8715,5648 L 8715,5648 C 8706,5648 8700,5645 8691,5631 L 8691,5631 C 8674,5610 8668,5604 8648,5600 L 8751,5478 8751,5473 8648,5473 8638,5514 8643,5516 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 8851,5473 L 8822,5473 8832,5437 8832,5437 8832,5435 8832,5435 C 8832,5433 8832,5433 8830,5433 L 8830,5433 C 8827,5433 8827,5433 8822,5435 L 8822,5435 C 8811,5454 8786,5471 8777,5475 L 8777,5475 C 8768,5478 8765,5480 8765,5482 L 8765,5486 8792,5486 8765,5583 8765,5583 C 8765,5588 8765,5588 8762,5591 L 8762,5591 C 8760,5602 8758,5614 8758,5616 L 8758,5616 C 8758,5626 8765,5631 8775,5631 L 8775,5631 C 8792,5631 8803,5621 8824,5588 L 8820,5586 8820,5586 C 8803,5607 8798,5614 8792,5614 L 8792,5614 C 8789,5614 8786,5612 8786,5607 L 8786,5604 8818,5486 8849,5486 8851,5473 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 9149,5447 L 9281,5447 9281,5447 C 9288,5447 9297,5447 9297,5437 L 9297,5437 C 9297,5428 9288,5428 9281,5428 L 9149,5428 9149,5294 9149,5294 C 9149,5287 9149,5277 9140,5277 L 9140,5277 C 9130,5277 9130,5287 9130,5294 L 9130,5428 8997,5428 8997,5428 C 8989,5428 8980,5428 8980,5437 L 8980,5437 C 8980,5447 8989,5447 8997,5447 L 9130,5447 9130,5578 9130,5578 C 9130,5586 9130,5595 9140,5595 L 9140,5595 C 9149,5595 9149,5586 9149,5578 L 9149,5447 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 9610,5318 L 9529,5480 9527,5409 9527,5409 C 9525,5334 9512,5311 9481,5311 L 9481,5311 C 9467,5311 9452,5318 9443,5330 L 9443,5330 C 9431,5345 9427,5356 9419,5396 L 9416,5402 9429,5402 9429,5402 C 9431,5390 9433,5383 9436,5375 L 9436,5375 C 9446,5362 9457,5349 9472,5349 L 9472,5349 C 9484,5349 9491,5358 9498,5377 L 9498,5377 C 9505,5402 9510,5447 9508,5480 L 9508,5521 9508,5521 C 9505,5526 9498,5540 9484,5567 L 9484,5567 C 9469,5593 9465,5607 9461,5623 L 9461,5623 C 9459,5645 9467,5659 9481,5659 L 9481,5659 C 9500,5659 9519,5636 9525,5597 L 9525,5597 C 9527,5583 9529,5559 9529,5523 L 9660,5318 9610,5318 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 9662,5409 L 9662,5409 C 9672,5385 9679,5380 9701,5380 L 9770,5380 9624,5557 9627,5561 9627,5561 C 9636,5554 9641,5552 9651,5552 L 9651,5552 C 9660,5552 9677,5559 9698,5574 L 9698,5574 C 9722,5588 9739,5595 9753,5595 L 9753,5595 C 9777,5595 9796,5576 9796,5557 L 9796,5557 C 9796,5548 9792,5540 9779,5540 L 9779,5540 C 9770,5540 9765,5548 9765,5554 L 9765,5554 C 9765,5559 9765,5563 9767,5569 L 9767,5569 C 9770,5574 9770,5576 9770,5576 L 9770,5576 C 9770,5580 9765,5583 9758,5583 L 9758,5583 C 9746,5583 9741,5580 9724,5561 L 9724,5561 C 9703,5533 9694,5526 9668,5521 L 9805,5356 9805,5351 9670,5351 9655,5407 9662,5409 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 9906,5554 L 9906,5554 C 9906,5523 9894,5505 9875,5505 L 9875,5505 C 9861,5505 9850,5516 9850,5531 L 9850,5531 C 9850,5542 9861,5554 9875,5554 L 9875,5554 C 9882,5554 9887,5554 9891,5550 L 9891,5550 C 9894,5550 9894,5548 9894,5548 L 9894,5548 C 9894,5548 9894,5550 9894,5554 L 9894,5554 C 9894,5591 9880,5619 9863,5636 L 9863,5636 C 9858,5640 9858,5640 9858,5642 L 9858,5642 C 9858,5645 9861,5648 9863,5648 L 9863,5648 C 9867,5648 9906,5612 9906,5554 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 10414,5244 L 10162,5244 10140,5318 10149,5321 10149,5321 C 10173,5268 10190,5261 10262,5261 L 10194,5512 10194,5512 C 10188,5538 10175,5545 10145,5548 L 10145,5554 10283,5554 10283,5548 10283,5548 C 10273,5548 10267,5548 10264,5548 L 10264,5548 C 10245,5545 10239,5540 10239,5526 L 10239,5526 C 10239,5521 10239,5514 10245,5497 L 10309,5261 10335,5261 10335,5261 C 10371,5261 10386,5272 10386,5299 L 10386,5299 C 10386,5306 10386,5313 10386,5323 L 10393,5323 10414,5244 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 10510,5464 L 10524,5394 10515,5394 10515,5394 C 10510,5402 10508,5402 10498,5402 L 10498,5402 C 10495,5402 10491,5402 10481,5399 L 10481,5399 C 10474,5396 10462,5394 10453,5394 L 10453,5394 C 10414,5394 10388,5418 10388,5454 L 10388,5454 C 10388,5473 10393,5482 10414,5507 L 10414,5507 C 10419,5509 10423,5514 10429,5521 L 10429,5521 C 10436,5528 10440,5533 10442,5535 L 10442,5535 C 10459,5554 10464,5561 10464,5578 L 10464,5578 C 10464,5604 10442,5626 10419,5626 L 10419,5626 C 10388,5626 10367,5600 10367,5567 L 10367,5567 C 10367,5563 10367,5561 10367,5559 L 10359,5557 10348,5638 10354,5638 10354,5638 C 10357,5629 10359,5626 10367,5626 L 10367,5626 C 10371,5626 10376,5626 10386,5631 L 10386,5631 C 10402,5636 10412,5638 10423,5638 L 10423,5638 C 10464,5638 10495,5607 10495,5567 L 10495,5567 C 10495,5542 10485,5531 10455,5497 L 10455,5497 C 10423,5464 10419,5459 10419,5443 L 10419,5443 C 10419,5420 10436,5407 10459,5407 L 10459,5407 C 10472,5407 10483,5411 10491,5418 L 10491,5418 C 10498,5428 10500,5439 10502,5464 L 10510,5464 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 10975,5399 L 10975,5399 C 10983,5399 10992,5399 10992,5390 L 10992,5390 C 10992,5380 10983,5380 10975,5380 L 10692,5380 10692,5380 C 10684,5380 10675,5380 10675,5390 L 10675,5390 C 10675,5399 10684,5399 10692,5399 L 10975,5399 Z M 10975,5492 L 10975,5492 C 10983,5492 10992,5492 10992,5482 L 10992,5482 C 10992,5473 10983,5473 10975,5473 L 10692,5473 10692,5473 C 10684,5473 10675,5473 10675,5482 L 10675,5482 C 10675,5492 10684,5492 10692,5492 L 10975,5492 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 11344,5332 L 11364,5240 11355,5240 11355,5240 C 11348,5249 11342,5251 11333,5251 L 11333,5251 C 11326,5251 11321,5249 11310,5244 L 11310,5244 C 11299,5242 11286,5240 11271,5240 L 11271,5240 C 11220,5240 11185,5270 11185,5318 L 11185,5318 C 11185,5345 11192,5358 11220,5387 L 11220,5387 C 11226,5392 11231,5399 11240,5409 L 11240,5409 C 11248,5416 11254,5424 11259,5428 L 11259,5428 C 11280,5452 11288,5464 11288,5482 L 11288,5482 C 11288,5521 11259,5548 11226,5548 L 11226,5548 C 11185,5548 11156,5514 11156,5469 L 11156,5469 C 11156,5464 11156,5461 11156,5456 L 11147,5456 11130,5561 11139,5561 11139,5561 C 11143,5552 11149,5548 11158,5548 L 11158,5548 C 11164,5548 11171,5550 11183,5552 L 11183,5552 C 11205,5561 11216,5563 11233,5563 L 11233,5563 C 11288,5563 11329,5523 11329,5469 L 11329,5469 C 11329,5437 11316,5418 11273,5375 L 11273,5375 C 11231,5332 11228,5325 11228,5304 L 11228,5304 C 11228,5272 11248,5253 11280,5253 L 11280,5253 C 11297,5253 11312,5261 11321,5272 L 11321,5272 C 11333,5285 11335,5299 11338,5332 L 11344,5332 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 11588,5332 L 11607,5240 11596,5240 11596,5240 C 11588,5249 11584,5251 11575,5251 L 11575,5251 C 11567,5251 11562,5249 11553,5244 L 11553,5244 C 11543,5242 11526,5240 11512,5240 L 11512,5240 C 11462,5240 11426,5270 11426,5318 L 11426,5318 C 11426,5345 11434,5358 11462,5387 L 11462,5387 C 11466,5392 11474,5399 11481,5409 L 11481,5409 C 11491,5416 11498,5424 11500,5428 L 11500,5428 C 11522,5452 11528,5464 11528,5482 L 11528,5482 C 11528,5521 11502,5548 11466,5548 L 11466,5548 C 11429,5548 11397,5514 11397,5469 L 11397,5469 C 11397,5464 11397,5461 11397,5456 L 11388,5456 11374,5561 11381,5561 11381,5561 C 11385,5552 11391,5548 11400,5548 L 11400,5548 C 11404,5548 11412,5550 11423,5552 L 11423,5552 C 11445,5561 11459,5563 11474,5563 L 11474,5563 C 11528,5563 11569,5523 11569,5469 L 11569,5469 C 11569,5437 11560,5418 11517,5375 L 11517,5375 C 11474,5332 11470,5325 11470,5304 L 11470,5304 C 11470,5272 11488,5253 11522,5253 L 11522,5253 C 11538,5253 11553,5261 11564,5272 L 11564,5272 C 11575,5285 11579,5299 11579,5332 L 11588,5332 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 11908,5244 L 11656,5244 11634,5318 11643,5321 11643,5321 C 11667,5268 11684,5261 11756,5261 L 11688,5512 11688,5512 C 11682,5538 11669,5545 11639,5548 L 11639,5554 11774,5554 11774,5548 11774,5548 C 11767,5548 11761,5548 11758,5548 L 11758,5548 C 11739,5545 11731,5540 11731,5526 L 11731,5526 C 11731,5521 11733,5514 11739,5497 L 11803,5261 11829,5261 11829,5261 C 11865,5261 11880,5272 11880,5299 L 11880,5299 C 11880,5306 11880,5313 11880,5323 L 11887,5323 11908,5244 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 11992,5554 L 11992,5554 C 11992,5523 11979,5505 11961,5505 L 11961,5505 C 11947,5505 11936,5516 11936,5531 L 11936,5531 C 11936,5542 11947,5554 11961,5554 L 11961,5554 C 11968,5554 11973,5554 11979,5550 L 11979,5550 C 11979,5550 11979,5548 11983,5548 L 11983,5548 C 11983,5548 11983,5550 11983,5554 L 11983,5554 C 11983,5591 11966,5619 11949,5636 L 11949,5636 C 11944,5640 11944,5640 11944,5642 L 11944,5642 C 11944,5645 11947,5648 11949,5648 L 11949,5648 C 11953,5648 11992,5612 11992,5554 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 12385,5645 L 12378,5645 12378,5645 C 12359,5645 12350,5640 12350,5633 L 12350,5633 C 12350,5631 12350,5629 12353,5629 L 12428,5354 12395,5354 12387,5375 12387,5375 C 12381,5354 12372,5347 12350,5347 L 12350,5347 C 12288,5347 12212,5433 12212,5507 L 12212,5507 C 12212,5540 12231,5561 12259,5561 L 12259,5561 C 12293,5561 12316,5542 12357,5482 L 12316,5621 12316,5621 C 12310,5640 12302,5645 12271,5648 L 12271,5655 12385,5655 12385,5645 Z M 12353,5356 L 12353,5356 C 12369,5356 12381,5368 12381,5385 L 12381,5385 C 12381,5426 12347,5492 12316,5518 L 12316,5518 C 12304,5531 12291,5535 12278,5535 L 12278,5535 C 12263,5535 12252,5521 12252,5499 L 12252,5499 C 12252,5464 12278,5411 12306,5380 L 12306,5380 C 12323,5364 12338,5356 12353,5356 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 12605,5464 L 12620,5394 12610,5394 12610,5394 C 12605,5402 12603,5402 12596,5402 L 12596,5402 C 12590,5402 12586,5402 12579,5399 L 12579,5399 C 12569,5396 12558,5394 12548,5394 L 12548,5394 C 12509,5394 12483,5418 12483,5454 L 12483,5454 C 12483,5473 12490,5482 12509,5507 L 12509,5507 C 12515,5509 12519,5514 12524,5521 L 12524,5521 C 12531,5528 12536,5533 12539,5535 L 12539,5535 C 12555,5554 12560,5561 12560,5578 L 12560,5578 C 12560,5604 12541,5626 12515,5626 L 12515,5626 C 12483,5626 12462,5600 12462,5567 L 12462,5567 C 12462,5563 12462,5561 12462,5559 L 12455,5557 12443,5638 12449,5638 12449,5638 C 12453,5629 12455,5626 12464,5626 L 12464,5626 C 12466,5626 12472,5626 12481,5631 L 12481,5631 C 12498,5636 12507,5638 12519,5638 L 12519,5638 C 12560,5638 12590,5607 12590,5567 L 12590,5567 C 12590,5542 12584,5531 12550,5497 L 12550,5497 C 12519,5464 12515,5459 12515,5443 L 12515,5443 C 12515,5420 12531,5407 12555,5407 L 12555,5407 C 12567,5407 12579,5411 12586,5418 L 12586,5418 C 12596,5428 12598,5439 12598,5464 L 12605,5464 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 13071,5399 L 13071,5399 C 13078,5399 13088,5399 13088,5390 L 13088,5390 C 13088,5380 13078,5380 13071,5380 L 12787,5380 12787,5380 C 12780,5380 12770,5380 12770,5390 L 12770,5390 C 12770,5399 12780,5399 12787,5399 L 13071,5399 Z M 13071,5492 L 13071,5492 C 13078,5492 13088,5492 13088,5482 L 13088,5482 C 13088,5473 13078,5473 13071,5473 L 12787,5473 12787,5473 C 12780,5473 12770,5473 12770,5482 L 12770,5482 C 12770,5492 12780,5492 12787,5492 L 13071,5492 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 13340,5234 L 13340,5234 C 13314,5234 13293,5242 13276,5259 L 13276,5259 C 13247,5285 13231,5339 13231,5396 L 13231,5396 C 13231,5447 13247,5505 13268,5531 L 13268,5531 C 13285,5550 13312,5561 13338,5561 L 13338,5561 C 13362,5561 13383,5554 13400,5538 L 13400,5538 C 13426,5512 13445,5456 13445,5399 L 13445,5399 C 13445,5302 13402,5234 13340,5234 Z M 13338,5246 L 13338,5246 C 13379,5246 13400,5299 13400,5399 L 13400,5399 C 13400,5499 13379,5550 13338,5550 L 13338,5550 C 13297,5550 13276,5499 13276,5399 L 13276,5399 C 13276,5299 13297,5246 13338,5246 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 13548,5531 L 13548,5531 C 13548,5516 13536,5505 13522,5505 L 13522,5505 C 13509,5505 13498,5516 13498,5531 L 13498,5531 C 13498,5545 13509,5554 13522,5554 L 13522,5554 C 13536,5554 13548,5545 13548,5531 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 13617,5567 L 13617,5567 C 13670,5559 13695,5550 13729,5528 L 13729,5528 C 13777,5492 13806,5433 13806,5368 L 13806,5368 C 13806,5289 13763,5234 13701,5234 L 13701,5234 C 13646,5234 13603,5283 13603,5347 L 13603,5347 C 13603,5404 13636,5443 13689,5443 L 13689,5443 C 13715,5443 13734,5435 13760,5416 L 13760,5416 C 13742,5492 13686,5545 13614,5557 L 13617,5567 Z M 13760,5387 L 13760,5387 C 13760,5396 13757,5402 13753,5404 L 13753,5404 C 13742,5416 13723,5424 13706,5424 L 13706,5424 C 13670,5424 13646,5387 13646,5330 L 13646,5330 C 13646,5304 13655,5275 13665,5263 L 13665,5263 C 13672,5253 13684,5246 13698,5246 L 13698,5246 C 13738,5246 13760,5287 13760,5368 L 13760,5387 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 13966,5377 L 13966,5377 C 14011,5354 14028,5334 14028,5302 L 14028,5302 C 14028,5263 13994,5234 13947,5234 L 13947,5234 C 13894,5234 13856,5266 13856,5308 L 13856,5308 C 13856,5339 13866,5354 13915,5396 L 13915,5396 C 13862,5437 13853,5452 13853,5482 L 13853,5482 C 13853,5531 13892,5561 13944,5561 L 13944,5561 C 14001,5561 14037,5531 14037,5480 L 14037,5480 C 14037,5445 14020,5420 13966,5377 Z M 13956,5428 L 13956,5428 C 13990,5452 14001,5469 14001,5497 L 14001,5497 C 14001,5528 13980,5550 13949,5550 L 13949,5550 C 13913,5550 13889,5521 13889,5480 L 13889,5480 C 13889,5450 13898,5430 13928,5407 L 13956,5428 Z M 13951,5371 L 13951,5371 C 13909,5342 13892,5321 13892,5294 L 13892,5294 C 13892,5268 13913,5246 13941,5246 L 13941,5246 C 13975,5246 13997,5268 13997,5302 L 13997,5302 C 13997,5328 13982,5349 13956,5368 L 13956,5368 C 13954,5368 13954,5368 13951,5371 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 14302,5645 L 14295,5645 14295,5645 C 14278,5645 14266,5640 14268,5633 L 14268,5633 C 14268,5631 14268,5629 14268,5629 L 14347,5354 14311,5354 14304,5375 14304,5375 C 14298,5354 14287,5347 14268,5347 L 14268,5347 C 14204,5347 14127,5433 14127,5507 L 14127,5507 C 14127,5540 14146,5561 14178,5561 L 14178,5561 C 14212,5561 14233,5542 14276,5482 L 14233,5621 14233,5621 C 14228,5640 14219,5645 14187,5648 L 14187,5655 14302,5655 14302,5645 Z M 14271,5356 L 14271,5356 C 14285,5356 14298,5368 14298,5385 L 14298,5385 C 14298,5426 14266,5492 14233,5518 L 14233,5518 C 14221,5531 14206,5535 14197,5535 L 14197,5535 C 14180,5535 14171,5521 14171,5499 L 14171,5499 C 14171,5464 14195,5411 14225,5380 L 14225,5380 C 14240,5364 14257,5356 14271,5356 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 14369,5574 L 14360,5631 14366,5631 14366,5631 C 14369,5626 14371,5623 14373,5623 L 14373,5623 C 14379,5623 14386,5626 14392,5629 L 14392,5629 C 14400,5631 14407,5631 14411,5631 L 14411,5631 C 14443,5631 14462,5612 14462,5586 L 14462,5586 C 14462,5571 14454,5554 14439,5535 L 14439,5535 C 14426,5516 14419,5507 14419,5497 L 14419,5497 C 14419,5486 14428,5478 14441,5478 L 14441,5478 C 14458,5478 14469,5490 14471,5518 L 14479,5518 14486,5469 14481,5469 14481,5469 C 14476,5473 14473,5475 14469,5475 L 14469,5475 C 14467,5475 14464,5475 14458,5473 L 14458,5473 C 14448,5471 14443,5469 14435,5469 L 14435,5469 C 14411,5469 14392,5486 14392,5509 L 14392,5509 C 14392,5521 14402,5535 14417,5554 L 14417,5554 C 14431,5574 14435,5586 14435,5595 L 14435,5595 C 14435,5612 14426,5623 14409,5623 L 14409,5623 C 14390,5623 14379,5610 14373,5574 L 14369,5574 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 14657,5588 L 14657,5588 C 14653,5593 14650,5595 14648,5597 L 14648,5597 C 14638,5610 14634,5612 14631,5612 L 14631,5612 C 14627,5612 14625,5610 14625,5607 L 14625,5607 C 14625,5600 14641,5540 14657,5478 L 14657,5478 C 14657,5475 14657,5473 14660,5471 L 14657,5469 14636,5471 14634,5473 14631,5490 14631,5490 C 14627,5478 14617,5469 14603,5469 L 14603,5469 C 14555,5469 14501,5535 14501,5591 L 14501,5591 C 14501,5616 14514,5631 14535,5631 L 14535,5631 C 14560,5631 14576,5619 14608,5574 L 14608,5574 C 14601,5602 14598,5607 14598,5616 L 14598,5616 C 14598,5626 14603,5631 14612,5631 L 14612,5631 C 14627,5631 14636,5623 14663,5591 L 14657,5588 Z M 14603,5478 L 14603,5478 C 14617,5478 14625,5486 14625,5499 L 14625,5499 C 14625,5528 14605,5571 14582,5597 L 14582,5597 C 14572,5607 14560,5614 14550,5614 L 14550,5614 C 14539,5614 14529,5602 14529,5586 L 14529,5586 C 14529,5567 14543,5531 14557,5509 L 14557,5509 C 14572,5488 14588,5475 14603,5478 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 14768,5473 L 14738,5473 14751,5437 14751,5437 14751,5435 14751,5435 C 14751,5433 14749,5433 14749,5433 L 14749,5433 C 14746,5433 14744,5433 14741,5435 L 14741,5435 C 14729,5454 14706,5471 14693,5475 L 14693,5475 C 14687,5478 14684,5480 14684,5482 L 14684,5486 14710,5486 14684,5583 14684,5583 C 14684,5588 14684,5588 14681,5591 L 14681,5591 C 14679,5602 14676,5614 14676,5616 L 14676,5616 C 14676,5626 14684,5631 14693,5631 L 14693,5631 C 14710,5631 14722,5621 14744,5588 L 14738,5586 14738,5586 C 14722,5607 14717,5614 14710,5614 L 14710,5614 C 14708,5614 14706,5612 14706,5607 L 14706,5604 14736,5486 14768,5486 14768,5473 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 14963,5670 L 14963,5670 C 14963,5670 14963,5666 14956,5659 L 14956,5659 C 14896,5600 14879,5509 14879,5437 L 14879,5437 C 14879,5354 14899,5270 14956,5210 L 14956,5210 C 14963,5206 14963,5206 14963,5204 L 14963,5204 C 14963,5201 14961,5199 14958,5199 L 14958,5199 C 14954,5199 14911,5230 14882,5292 L 14882,5292 C 14858,5345 14853,5396 14853,5437 L 14853,5437 C 14853,5473 14858,5531 14884,5586 L 14884,5586 C 14913,5642 14954,5674 14958,5674 L 14958,5674 C 14961,5674 14963,5674 14963,5670 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 15214,5332 L 15232,5240 15221,5240 15221,5240 C 15214,5249 15209,5251 15200,5251 L 15200,5251 C 15195,5251 15189,5249 15178,5244 L 15178,5244 C 15168,5242 15151,5240 15138,5240 L 15138,5240 C 15087,5240 15054,5270 15054,5318 L 15054,5318 C 15054,5345 15061,5358 15089,5387 L 15089,5387 C 15092,5392 15099,5399 15106,5409 L 15106,5409 C 15116,5416 15123,5424 15125,5428 L 15125,5428 C 15147,5452 15155,5464 15155,5482 L 15155,5482 C 15155,5521 15127,5548 15092,5548 L 15092,5548 C 15054,5548 15023,5514 15023,5469 L 15023,5469 C 15023,5464 15025,5461 15025,5456 L 15016,5456 14999,5561 15008,5561 15008,5561 C 15011,5552 15016,5548 15025,5548 L 15025,5548 C 15030,5548 15037,5550 15052,5552 L 15052,5552 C 15073,5561 15085,5563 15099,5563 L 15099,5563 C 15155,5563 15195,5523 15195,5469 L 15195,5469 C 15195,5437 15185,5418 15142,5375 L 15142,5375 C 15099,5332 15095,5325 15095,5304 L 15095,5304 C 15095,5272 15116,5253 15147,5253 L 15147,5253 C 15164,5253 15180,5261 15189,5272 L 15189,5272 C 15200,5285 15204,5299 15204,5332 L 15214,5332 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 15454,5332 L 15474,5240 15462,5240 15462,5240 C 15454,5249 15452,5251 15441,5251 L 15441,5251 C 15435,5251 15431,5249 15419,5244 L 15419,5244 C 15409,5242 15392,5240 15379,5240 L 15379,5240 C 15330,5240 15294,5270 15294,5318 L 15294,5318 C 15294,5345 15302,5358 15330,5387 L 15330,5387 C 15333,5392 15341,5399 15347,5409 L 15347,5409 C 15356,5416 15364,5424 15366,5428 L 15366,5428 C 15390,5452 15395,5464 15395,5482 L 15395,5482 C 15395,5521 15369,5548 15333,5548 L 15333,5548 C 15294,5548 15266,5514 15266,5469 L 15266,5469 C 15266,5464 15266,5461 15266,5456 L 15257,5456 15240,5561 15249,5561 15249,5561 C 15251,5552 15257,5548 15266,5548 L 15266,5548 C 15271,5548 15281,5550 15292,5552 L 15292,5552 C 15314,5561 15326,5563 15341,5563 L 15341,5563 C 15395,5563 15438,5523 15438,5469 L 15438,5469 C 15438,5437 15426,5418 15383,5375 L 15383,5375 C 15341,5332 15335,5325 15335,5304 L 15335,5304 C 15335,5272 15356,5253 15388,5253 L 15388,5253 C 15407,5253 15422,5261 15431,5272 L 15431,5272 C 15441,5285 15445,5299 15445,5332 L 15454,5332 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 15775,5244 L 15522,5244 15503,5318 15510,5321 15510,5321 C 15536,5268 15550,5261 15625,5261 L 15555,5512 15555,5512 C 15548,5538 15536,5545 15505,5548 L 15505,5554 15643,5554 15643,5548 15643,5548 C 15634,5548 15627,5548 15625,5548 L 15625,5548 C 15606,5545 15600,5540 15600,5526 L 15600,5526 C 15600,5521 15600,5514 15606,5497 L 15672,5261 15698,5261 15698,5261 C 15732,5261 15749,5272 15749,5299 L 15749,5299 C 15749,5306 15746,5313 15746,5323 L 15753,5323 15775,5244 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 15860,5554 L 15860,5554 C 15860,5523 15849,5505 15830,5505 L 15830,5505 C 15813,5505 15803,5516 15803,5531 L 15803,5531 C 15803,5542 15813,5554 15830,5554 L 15830,5554 C 15834,5554 15841,5554 15846,5550 L 15846,5550 15849,5548 15849,5548 C 15849,5548 15849,5550 15849,5554 L 15849,5554 C 15849,5591 15832,5619 15818,5636 L 15818,5636 C 15813,5640 15813,5640 15813,5642 L 15813,5642 C 15813,5645 15815,5648 15818,5648 L 15818,5648 C 15822,5648 15860,5612 15860,5554 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 16018,5253 L 16018,5253 C 16044,5255 16051,5261 16051,5272 L 16051,5272 C 16051,5280 16049,5289 16042,5311 L 15987,5512 15987,5512 C 15978,5540 15975,5545 15948,5548 L 15948,5554 16063,5554 16063,5548 16063,5548 C 16035,5542 16032,5542 16032,5526 L 16032,5526 C 16032,5521 16032,5516 16037,5497 L 16063,5407 16063,5407 C 16076,5409 16087,5411 16106,5411 L 16106,5411 C 16145,5411 16178,5402 16198,5387 L 16198,5387 C 16221,5371 16235,5345 16235,5315 L 16235,5315 C 16235,5270 16200,5244 16135,5244 L 16018,5244 16018,5253 Z M 16102,5272 L 16102,5272 C 16104,5263 16108,5259 16123,5259 L 16123,5259 C 16142,5259 16159,5263 16168,5270 L 16168,5270 C 16183,5280 16187,5294 16187,5315 L 16187,5315 C 16187,5347 16175,5368 16154,5380 L 16154,5380 C 16140,5390 16121,5392 16092,5392 L 16092,5392 C 16085,5392 16080,5392 16068,5390 L 16102,5272 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 16269,5390 L 16269,5390 C 16249,5390 16235,5394 16221,5409 L 16221,5409 C 16202,5428 16187,5469 16187,5512 L 16187,5512 C 16187,5550 16200,5591 16216,5612 L 16216,5612 C 16230,5626 16247,5636 16269,5636 L 16269,5636 C 16285,5636 16302,5629 16314,5616 L 16314,5616 C 16335,5597 16350,5557 16350,5514 L 16350,5514 C 16350,5439 16316,5390 16269,5390 Z M 16269,5399 L 16269,5399 C 16297,5399 16314,5439 16314,5514 L 16314,5514 C 16314,5588 16300,5626 16269,5626 L 16269,5626 C 16238,5626 16221,5588 16221,5514 L 16221,5514 C 16221,5437 16238,5399 16269,5399 Z "/>
        <path fill="rgb(136,0,170)" stroke="none" d="M 16514,5437 L 16514,5437 C 16514,5399 16510,5342 16484,5287 L 16484,5287 C 16455,5230 16414,5199 16409,5199 L 16409,5199 C 16407,5199 16405,5201 16405,5204 L 16405,5204 C 16405,5206 16405,5206 16414,5213 L 16414,5213 C 16459,5261 16488,5337 16488,5437 L 16488,5437 C 16488,5518 16469,5602 16412,5662 L 16412,5662 C 16405,5666 16405,5670 16405,5670 L 16405,5670 C 16405,5672 16407,5674 16409,5674 L 16409,5674 C 16414,5674 16457,5642 16486,5580 L 16486,5580 C 16510,5528 16514,5475 16514,5437 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 7572,7419 L 7589,7323 7578,7323 7578,7323 C 7574,7331 7569,7336 7560,7336 L 7560,7336 C 7557,7336 7550,7334 7541,7331 L 7541,7331 C 7520,7327 7501,7323 7486,7323 L 7486,7323 C 7383,7323 7292,7419 7292,7524 L 7292,7524 C 7292,7599 7343,7648 7417,7648 L 7417,7648 C 7465,7648 7503,7627 7546,7579 L 7538,7573 7538,7573 C 7495,7613 7467,7627 7428,7627 L 7428,7627 C 7377,7627 7345,7592 7345,7529 L 7345,7529 C 7345,7475 7369,7417 7405,7376 L 7405,7376 C 7428,7355 7458,7340 7488,7340 L 7488,7340 C 7533,7340 7557,7367 7563,7417 L 7572,7419 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 7612,7484 L 7612,7484 C 7634,7486 7640,7488 7640,7498 L 7640,7498 C 7640,7505 7638,7513 7636,7522 L 7593,7680 7593,7680 C 7586,7701 7584,7704 7563,7706 L 7563,7710 7653,7710 7653,7710 C 7696,7710 7734,7701 7760,7680 L 7760,7680 C 7796,7656 7815,7616 7815,7575 L 7815,7575 C 7815,7515 7775,7479 7713,7479 L 7612,7479 7612,7484 Z M 7677,7500 L 7677,7500 C 7679,7491 7687,7488 7700,7488 L 7700,7488 C 7719,7488 7736,7494 7749,7503 L 7749,7503 C 7768,7515 7777,7539 7777,7567 L 7777,7567 C 7777,7605 7760,7644 7736,7667 L 7736,7667 C 7715,7691 7687,7701 7651,7701 L 7651,7701 C 7634,7701 7627,7697 7627,7689 L 7627,7689 C 7627,7682 7629,7675 7634,7654 L 7677,7500 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 7939,7639 L 7939,7639 C 7939,7608 7927,7588 7909,7588 L 7909,7588 C 7894,7588 7884,7601 7884,7616 L 7884,7616 C 7884,7627 7894,7641 7909,7641 L 7909,7641 C 7916,7641 7920,7639 7925,7635 L 7925,7635 C 7927,7635 7927,7632 7927,7632 L 7927,7632 C 7930,7632 7930,7635 7930,7639 L 7930,7639 C 7930,7675 7913,7704 7896,7720 L 7896,7720 C 7892,7725 7892,7725 7892,7727 L 7892,7727 C 7892,7729 7894,7732 7896,7732 L 7896,7732 C 7901,7732 7939,7697 7939,7639 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 8433,7419 L 8450,7323 8441,7323 8441,7323 C 8435,7331 8431,7336 8422,7336 L 8422,7336 C 8420,7336 8414,7334 8403,7331 L 8403,7331 C 8381,7327 8362,7323 8347,7323 L 8347,7323 C 8247,7323 8155,7419 8155,7524 L 8155,7524 C 8155,7599 8206,7648 8279,7648 L 8279,7648 C 8328,7648 8367,7627 8407,7579 L 8400,7573 8400,7573 C 8356,7613 8331,7627 8290,7627 L 8290,7627 C 8238,7627 8206,7592 8206,7529 L 8206,7529 C 8206,7475 8230,7417 8268,7376 L 8268,7376 C 8290,7355 8319,7340 8352,7340 L 8352,7340 C 8395,7340 8420,7367 8424,7417 L 8433,7419 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 8700,7479 L 8612,7479 8612,7484 8612,7484 C 8634,7486 8638,7488 8638,7500 L 8638,7500 C 8638,7505 8636,7513 8634,7522 L 8619,7582 8517,7582 8536,7511 8536,7511 C 8540,7494 8550,7486 8572,7484 L 8572,7479 8474,7479 8474,7484 8474,7484 C 8497,7486 8503,7488 8503,7500 L 8503,7500 C 8503,7505 8500,7513 8497,7522 L 8455,7680 8455,7680 C 8448,7701 8446,7704 8426,7706 L 8426,7710 8514,7710 8514,7706 8514,7706 C 8491,7704 8488,7701 8488,7691 L 8488,7691 C 8488,7689 8488,7684 8488,7682 L 8512,7596 8615,7596 8591,7680 8591,7680 C 8586,7699 8579,7704 8555,7706 L 8555,7710 8653,7710 8653,7706 8653,7706 C 8629,7704 8625,7701 8625,7691 L 8625,7691 C 8625,7687 8625,7687 8625,7682 L 8672,7511 8672,7511 C 8679,7491 8681,7488 8700,7484 L 8700,7479 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 8827,7639 L 8827,7639 C 8827,7608 8815,7588 8796,7588 L 8796,7588 C 8782,7588 8773,7601 8773,7616 L 8773,7616 C 8773,7627 8782,7641 8796,7641 L 8796,7641 C 8803,7641 8809,7639 8813,7635 L 8813,7635 C 8815,7635 8815,7632 8815,7632 L 8815,7632 C 8815,7632 8815,7635 8815,7639 L 8815,7639 C 8815,7675 8801,7704 8784,7720 L 8784,7720 C 8779,7725 8779,7725 8779,7727 L 8779,7727 C 8779,7729 8782,7732 8784,7732 L 8784,7732 C 8789,7732 8827,7697 8827,7639 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 9322,7419 L 9337,7323 9328,7323 9328,7323 C 9324,7331 9318,7336 9309,7336 L 9309,7336 C 9307,7336 9300,7334 9290,7331 L 9290,7331 C 9269,7327 9249,7323 9235,7323 L 9235,7323 C 9132,7323 9042,7419 9042,7524 L 9042,7524 C 9042,7599 9092,7648 9166,7648 L 9166,7648 C 9213,7648 9252,7627 9295,7579 L 9288,7573 9288,7573 C 9245,7613 9216,7627 9178,7627 L 9178,7627 C 9125,7627 9095,7592 9095,7529 L 9095,7529 C 9095,7475 9119,7417 9154,7376 L 9154,7376 C 9178,7355 9207,7340 9240,7340 L 9240,7340 C 9283,7340 9307,7367 9311,7417 L 9322,7419 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 9540,7479 L 9364,7479 9364,7484 9364,7484 C 9386,7486 9393,7488 9393,7498 L 9393,7498 C 9393,7503 9390,7515 9388,7522 L 9345,7680 9345,7680 C 9337,7701 9335,7704 9314,7706 L 9314,7710 9495,7710 9519,7654 9512,7651 9512,7651 C 9495,7675 9486,7682 9472,7691 L 9472,7691 C 9457,7697 9433,7701 9407,7701 L 9407,7701 C 9388,7701 9378,7697 9378,7689 L 9378,7689 C 9378,7684 9381,7667 9390,7637 L 9390,7637 C 9395,7620 9399,7608 9403,7594 L 9403,7594 C 9414,7596 9427,7596 9431,7596 L 9431,7596 C 9446,7596 9455,7599 9459,7601 L 9459,7601 C 9459,7603 9461,7605 9461,7613 L 9461,7613 C 9461,7618 9459,7622 9459,7632 L 9465,7632 9491,7548 9484,7548 9484,7548 C 9469,7579 9467,7582 9433,7582 L 9433,7582 C 9431,7582 9419,7582 9405,7584 L 9429,7500 9429,7500 C 9431,7491 9436,7491 9455,7491 L 9455,7491 C 9512,7491 9525,7496 9525,7517 L 9525,7517 C 9525,7522 9525,7526 9525,7532 L 9531,7534 9540,7479 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 9675,7639 L 9675,7639 C 9675,7608 9664,7588 9645,7588 L 9645,7588 C 9629,7588 9619,7601 9619,7616 L 9619,7616 C 9619,7627 9629,7641 9645,7641 L 9645,7641 C 9651,7641 9658,7639 9662,7635 L 9662,7635 9664,7632 9664,7632 C 9664,7632 9664,7635 9664,7639 L 9664,7639 C 9664,7675 9649,7704 9634,7720 L 9634,7720 C 9627,7725 9627,7725 9627,7727 L 9627,7727 C 9627,7729 9629,7732 9634,7732 L 9634,7732 C 9638,7732 9675,7697 9675,7639 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10224,7329 L 10128,7329 10128,7338 10128,7338 C 10143,7338 10147,7340 10154,7343 L 10154,7343 C 10159,7345 10162,7353 10162,7359 L 10162,7359 C 10162,7367 10149,7415 10128,7496 L 10128,7496 C 10126,7500 10123,7511 10121,7520 L 10121,7520 C 10111,7551 10104,7569 10094,7584 L 10094,7584 C 10075,7616 10051,7629 10016,7629 L 10016,7629 C 9978,7629 9951,7608 9951,7573 L 9951,7573 C 9951,7558 9965,7500 9997,7391 L 9997,7391 C 9997,7385 9999,7383 9999,7381 L 9999,7381 C 10008,7348 10016,7340 10049,7338 L 10049,7329 9920,7329 9920,7338 9920,7338 C 9951,7340 9956,7343 9956,7357 L 9956,7357 C 9956,7362 9956,7370 9953,7379 L 9927,7470 9927,7470 C 9914,7522 9908,7551 9908,7569 L 9908,7569 C 9908,7616 9951,7648 10011,7648 L 10011,7648 C 10073,7648 10113,7616 10132,7543 L 10173,7408 10173,7408 C 10192,7345 10192,7343 10224,7338 L 10224,7329 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10188,7710 L 10288,7710 10288,7710 C 10345,7710 10383,7682 10383,7641 L 10383,7641 C 10383,7627 10378,7616 10371,7605 L 10371,7605 C 10365,7599 10357,7594 10338,7586 L 10338,7586 C 10365,7582 10374,7577 10386,7567 L 10386,7567 C 10395,7558 10400,7546 10400,7532 L 10400,7532 C 10400,7498 10376,7479 10329,7479 L 10237,7479 10237,7484 10237,7484 C 10259,7486 10264,7488 10264,7498 L 10264,7498 C 10264,7505 10264,7513 10262,7522 L 10216,7680 10216,7680 C 10211,7701 10207,7704 10188,7706 L 10188,7710 Z M 10276,7594 L 10276,7594 C 10299,7594 10314,7594 10321,7599 L 10321,7599 C 10335,7603 10345,7620 10345,7639 L 10345,7639 C 10345,7678 10318,7701 10273,7701 L 10273,7701 C 10259,7701 10252,7697 10252,7687 L 10252,7687 C 10252,7682 10256,7665 10264,7637 L 10264,7637 C 10269,7620 10271,7613 10276,7594 Z M 10303,7498 L 10303,7498 C 10305,7491 10309,7488 10321,7488 L 10321,7488 C 10350,7488 10365,7500 10365,7526 L 10365,7526 C 10365,7548 10354,7563 10340,7573 L 10340,7573 C 10329,7579 10312,7582 10278,7582 L 10303,7498 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10524,7639 L 10524,7639 C 10524,7608 10512,7588 10493,7588 L 10493,7588 C 10479,7588 10469,7601 10469,7616 L 10469,7616 C 10469,7627 10479,7641 10493,7641 L 10493,7641 C 10500,7641 10504,7639 10510,7635 L 10510,7635 C 10512,7635 10512,7632 10512,7632 L 10512,7632 C 10515,7632 10515,7635 10515,7639 L 10515,7639 C 10515,7675 10498,7704 10481,7720 L 10481,7720 C 10476,7725 10476,7725 10476,7727 L 10476,7727 C 10476,7729 10479,7732 10481,7732 L 10481,7732 C 10485,7732 10524,7697 10524,7639 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10910,7314 L 10910,7314 C 10893,7314 10872,7321 10853,7336 L 10853,7336 C 10816,7362 10789,7415 10780,7481 L 10780,7481 C 10767,7543 10775,7592 10799,7620 L 10799,7620 C 10816,7637 10837,7646 10856,7646 L 10856,7646 C 10875,7646 10893,7639 10915,7625 L 10915,7625 C 10951,7599 10978,7548 10987,7484 L 10987,7484 C 10999,7417 10992,7370 10968,7343 L 10968,7343 C 10953,7323 10932,7314 10910,7314 Z M 10937,7491 L 10937,7491 C 10927,7546 10918,7577 10899,7603 L 10899,7603 C 10889,7618 10870,7627 10859,7627 L 10859,7627 C 10846,7627 10835,7618 10827,7603 L 10827,7603 C 10818,7577 10818,7546 10825,7491 L 10937,7491 Z M 10829,7464 L 10829,7464 C 10839,7415 10851,7381 10868,7357 L 10868,7357 C 10880,7343 10897,7331 10908,7331 L 10908,7331 C 10921,7331 10934,7343 10940,7357 L 10940,7357 C 10949,7381 10951,7415 10942,7464 L 10829,7464 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11008,7601 L 11008,7601 C 11015,7584 11021,7582 11037,7582 L 11090,7582 10978,7713 10983,7716 10983,7716 C 10987,7710 10992,7710 10999,7710 L 10999,7710 C 11006,7710 11019,7716 11034,7725 L 11034,7725 C 11054,7737 11066,7740 11075,7740 L 11075,7740 C 11092,7740 11109,7727 11109,7713 L 11109,7713 C 11109,7706 11104,7701 11096,7701 L 11096,7701 C 11090,7701 11085,7706 11085,7710 L 11085,7710 C 11085,7716 11085,7718 11087,7723 L 11087,7723 C 11090,7725 11090,7727 11090,7727 L 11090,7727 C 11090,7732 11085,7732 11081,7732 L 11081,7732 C 11070,7732 11066,7729 11054,7716 L 11054,7716 C 11040,7695 11032,7691 11011,7687 L 11116,7563 11116,7558 11013,7558 11002,7601 11008,7601 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11282,7670 L 11282,7670 C 11264,7695 11259,7699 11252,7699 L 11252,7699 C 11250,7699 11250,7697 11250,7691 L 11250,7691 C 11250,7689 11250,7689 11257,7665 L 11282,7558 11257,7558 11257,7558 C 11237,7613 11235,7618 11218,7644 L 11218,7644 C 11197,7680 11180,7697 11169,7697 L 11169,7697 C 11164,7697 11161,7695 11161,7689 L 11161,7689 C 11161,7687 11161,7687 11161,7684 L 11192,7556 11192,7556 11192,7556 C 11173,7558 11158,7560 11137,7563 L 11137,7569 11137,7569 C 11152,7569 11152,7569 11156,7573 L 11156,7573 C 11158,7573 11161,7575 11161,7577 L 11161,7577 C 11161,7582 11158,7588 11156,7601 L 11143,7651 11143,7651 C 11135,7678 11133,7689 11133,7697 L 11133,7697 C 11133,7708 11139,7716 11152,7716 L 11152,7716 C 11178,7716 11197,7697 11237,7627 L 11237,7627 C 11226,7665 11220,7691 11220,7699 L 11220,7699 C 11220,7708 11228,7716 11237,7716 L 11237,7716 C 11254,7716 11264,7708 11288,7672 L 11282,7670 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11412,7639 L 11412,7639 C 11412,7608 11400,7588 11383,7588 L 11383,7588 C 11367,7588 11357,7601 11357,7616 L 11357,7616 C 11357,7627 11367,7641 11383,7641 L 11383,7641 C 11388,7641 11393,7639 11400,7635 L 11400,7635 C 11400,7635 11400,7632 11402,7632 L 11402,7632 C 11402,7632 11402,7635 11402,7639 L 11402,7639 C 11402,7675 11385,7704 11369,7720 L 11369,7720 C 11364,7725 11364,7725 11364,7727 L 11364,7727 C 11364,7729 11367,7732 11369,7732 L 11369,7732 C 11374,7732 11412,7697 11412,7639 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11806,7732 L 11799,7732 11799,7732 C 11780,7732 11770,7727 11770,7718 L 11770,7718 C 11770,7716 11770,7716 11772,7713 L 11849,7438 11815,7438 11808,7460 11808,7460 C 11801,7438 11791,7432 11770,7432 L 11770,7432 C 11708,7432 11631,7517 11631,7592 L 11631,7592 C 11631,7625 11650,7646 11679,7646 L 11679,7646 C 11712,7646 11737,7627 11777,7567 L 11737,7706 11737,7706 C 11729,7727 11722,7729 11691,7732 L 11691,7740 11806,7740 11806,7732 Z M 11772,7441 L 11772,7441 C 11789,7441 11801,7453 11801,7470 L 11801,7470 C 11801,7511 11767,7577 11737,7603 L 11737,7603 C 11724,7616 11710,7620 11699,7620 L 11699,7620 C 11684,7620 11671,7605 11671,7584 L 11671,7584 C 11671,7548 11699,7496 11727,7464 L 11727,7464 C 11744,7451 11758,7441 11772,7441 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11887,7601 L 11887,7601 C 11894,7584 11899,7582 11915,7582 L 11968,7582 11855,7713 11861,7716 11861,7716 C 11865,7710 11870,7710 11874,7710 L 11874,7710 C 11885,7710 11896,7716 11913,7725 L 11913,7725 C 11932,7737 11944,7740 11953,7740 L 11953,7740 C 11970,7740 11987,7727 11987,7713 L 11987,7713 C 11987,7706 11983,7701 11975,7701 L 11975,7701 C 11968,7701 11964,7706 11964,7710 L 11964,7710 C 11964,7716 11964,7718 11966,7723 L 11966,7723 C 11968,7725 11968,7727 11968,7727 L 11968,7727 C 11968,7732 11964,7732 11958,7732 L 11958,7732 C 11949,7732 11944,7729 11932,7716 L 11932,7716 C 11917,7695 11911,7691 11889,7687 L 11992,7563 11992,7558 11891,7558 11880,7601 11887,7601 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12161,7670 L 12161,7670 C 12142,7695 12137,7699 12130,7699 L 12130,7699 C 12128,7699 12128,7697 12128,7691 L 12128,7691 C 12128,7689 12128,7689 12135,7665 L 12161,7558 12135,7558 12135,7558 C 12116,7613 12113,7618 12097,7644 L 12097,7644 C 12075,7680 12058,7697 12047,7697 L 12047,7697 C 12042,7697 12039,7695 12039,7689 L 12039,7689 C 12039,7687 12039,7687 12039,7684 L 12071,7556 12071,7556 12071,7556 C 12049,7558 12037,7560 12015,7563 L 12015,7569 12015,7569 C 12030,7569 12030,7569 12035,7573 L 12035,7573 C 12037,7573 12039,7575 12039,7577 L 12039,7577 C 12039,7582 12037,7588 12032,7601 L 12020,7651 12020,7651 C 12013,7678 12011,7689 12011,7697 L 12011,7697 C 12011,7708 12018,7716 12030,7716 L 12030,7716 C 12056,7716 12075,7697 12116,7627 L 12116,7627 C 12104,7665 12099,7691 12099,7699 L 12099,7699 C 12099,7708 12107,7716 12116,7716 L 12116,7716 C 12133,7716 12142,7708 12166,7672 L 12161,7670 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12291,7639 L 12291,7639 C 12291,7608 12278,7588 12259,7588 L 12259,7588 C 12244,7588 12235,7601 12235,7616 L 12235,7616 C 12235,7627 12244,7641 12259,7641 L 12259,7641 C 12266,7641 12271,7639 12276,7635 L 12276,7635 C 12278,7635 12278,7632 12280,7632 L 12280,7632 C 12280,7632 12280,7635 12280,7639 L 12280,7639 C 12280,7675 12263,7704 12248,7720 L 12248,7720 C 12242,7725 12242,7725 12242,7727 L 12242,7727 C 12242,7729 12244,7732 12248,7732 L 12248,7732 C 12252,7732 12291,7697 12291,7639 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12836,7329 L 12744,7329 12744,7338 12744,7338 C 12758,7338 12763,7340 12767,7343 L 12767,7343 C 12774,7345 12776,7353 12776,7359 L 12776,7359 C 12776,7367 12765,7415 12742,7496 L 12742,7496 C 12739,7500 12739,7511 12736,7520 L 12736,7520 C 12727,7551 12720,7569 12710,7584 L 12710,7584 C 12691,7616 12665,7629 12631,7629 L 12631,7629 C 12590,7629 12565,7608 12565,7573 L 12565,7573 C 12565,7558 12581,7500 12612,7391 L 12612,7391 C 12612,7385 12615,7383 12615,7381 L 12615,7381 C 12624,7348 12631,7340 12665,7338 L 12665,7329 12534,7329 12534,7338 12534,7338 C 12567,7340 12571,7343 12571,7357 L 12571,7357 C 12571,7362 12569,7370 12567,7379 L 12543,7470 12543,7470 C 12528,7522 12522,7551 12522,7569 L 12522,7569 C 12522,7616 12567,7648 12627,7648 L 12627,7648 C 12689,7648 12729,7616 12748,7543 L 12789,7408 12789,7408 C 12806,7345 12808,7343 12836,7338 L 12836,7329 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12804,7710 L 12904,7710 12904,7710 C 12958,7710 12996,7682 12996,7641 L 12996,7641 C 12996,7627 12994,7616 12985,7605 L 12985,7605 C 12977,7599 12970,7594 12954,7586 L 12954,7586 C 12977,7582 12987,7577 12999,7567 L 12999,7567 C 13011,7558 13016,7546 13016,7532 L 13016,7532 C 13016,7498 12990,7479 12944,7479 L 12851,7479 12851,7484 12851,7484 C 12875,7486 12879,7488 12879,7498 L 12879,7498 C 12879,7505 12877,7513 12875,7522 L 12832,7680 12832,7680 C 12825,7701 12823,7704 12804,7706 L 12804,7710 Z M 12891,7594 L 12891,7594 C 12913,7594 12928,7594 12937,7599 L 12937,7599 C 12951,7603 12958,7620 12958,7639 L 12958,7639 C 12958,7678 12932,7701 12889,7701 L 12889,7701 C 12875,7701 12866,7697 12866,7687 L 12866,7687 C 12866,7682 12870,7665 12879,7637 L 12879,7637 C 12885,7620 12885,7613 12891,7594 Z M 12917,7498 L 12917,7498 C 12920,7491 12923,7488 12937,7488 L 12937,7488 C 12966,7488 12979,7500 12979,7526 L 12979,7526 C 12979,7548 12970,7563 12956,7573 L 12956,7573 C 12944,7579 12925,7582 12894,7582 L 12917,7498 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 13140,7639 L 13140,7639 C 13140,7608 13128,7588 13109,7588 L 13109,7588 C 13094,7588 13084,7601 13084,7616 L 13084,7616 C 13084,7627 13094,7641 13109,7641 L 13109,7641 C 13116,7641 13120,7639 13125,7635 L 13125,7635 C 13128,7635 13128,7632 13128,7632 L 13128,7632 C 13128,7632 13128,7635 13128,7639 L 13128,7639 C 13128,7675 13114,7704 13097,7720 L 13097,7720 C 13092,7725 13092,7725 13092,7727 L 13092,7727 C 13092,7729 13094,7732 13097,7732 L 13097,7732 C 13101,7732 13140,7697 13140,7639 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 13648,7329 L 13396,7329 13374,7402 13383,7405 13383,7405 C 13407,7355 13424,7345 13496,7345 L 13428,7599 13428,7599 C 13421,7622 13409,7629 13379,7632 L 13379,7641 13514,7641 13514,7632 13514,7632 C 13507,7632 13500,7632 13498,7632 L 13498,7632 C 13479,7629 13473,7625 13473,7610 L 13473,7610 C 13473,7605 13473,7599 13479,7584 L 13543,7345 13569,7345 13569,7345 C 13605,7345 13620,7357 13620,7385 L 13620,7385 C 13620,7391 13620,7398 13620,7408 L 13627,7408 13648,7329 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 13744,7548 L 13757,7479 13748,7479 13748,7479 C 13744,7486 13738,7488 13732,7488 L 13732,7488 C 13729,7488 13725,7486 13715,7484 L 13715,7484 C 13708,7481 13695,7479 13686,7479 L 13686,7479 C 13648,7479 13622,7503 13622,7539 L 13622,7539 C 13622,7558 13627,7567 13648,7592 L 13648,7592 C 13653,7594 13657,7599 13663,7605 L 13663,7605 C 13670,7613 13674,7618 13676,7620 L 13676,7620 C 13693,7639 13698,7648 13698,7663 L 13698,7663 C 13698,7689 13676,7710 13653,7710 L 13653,7710 C 13622,7710 13601,7684 13601,7651 L 13601,7651 C 13601,7648 13601,7646 13601,7644 L 13593,7641 13582,7723 13588,7723 13588,7723 C 13591,7713 13593,7710 13601,7710 L 13601,7710 C 13605,7710 13610,7710 13620,7716 L 13620,7716 C 13636,7720 13646,7723 13657,7723 L 13657,7723 C 13698,7723 13729,7691 13729,7651 L 13729,7651 C 13729,7627 13720,7616 13689,7582 L 13689,7582 C 13657,7548 13653,7543 13653,7526 L 13653,7526 C 13653,7505 13670,7491 13693,7491 L 13693,7491 C 13706,7491 13717,7496 13725,7503 L 13725,7503 C 13732,7513 13734,7524 13736,7548 L 13744,7548 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 7469,9817 L 7462,9817 7462,9817 C 7445,9817 7435,9812 7435,9803 L 7435,9803 C 7435,9800 7435,9800 7435,9797 L 7514,9523 7479,9523 7471,9545 7471,9545 C 7465,9523 7454,9516 7435,9516 L 7435,9516 C 7373,9516 7298,9602 7298,9676 L 7298,9676 C 7298,9709 7315,9731 7345,9731 L 7345,9731 C 7379,9731 7400,9712 7443,9652 L 7400,9793 7400,9793 C 7395,9812 7386,9814 7357,9817 L 7357,9824 7469,9824 7469,9817 Z M 7439,9525 L 7439,9525 C 7452,9525 7465,9540 7465,9554 L 7465,9554 C 7465,9594 7433,9662 7400,9690 L 7400,9690 C 7388,9700 7377,9705 7364,9705 L 7364,9705 C 7347,9705 7338,9690 7338,9669 L 7338,9669 C 7338,9633 7362,9581 7392,9549 L 7392,9549 C 7407,9535 7424,9525 7439,9525 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 7689,9635 L 7704,9564 7696,9564 7696,9564 C 7691,9571 7687,9573 7679,9573 L 7679,9573 C 7674,9573 7670,9571 7663,9568 L 7663,9568 C 7655,9566 7644,9564 7631,9564 L 7631,9564 C 7595,9564 7569,9588 7569,9624 L 7569,9624 C 7569,9643 7574,9652 7595,9676 L 7595,9676 C 7598,9678 7603,9683 7610,9690 L 7610,9690 C 7617,9697 7622,9703 7625,9705 L 7625,9705 C 7640,9724 7646,9733 7646,9748 L 7646,9748 C 7646,9774 7625,9795 7598,9795 L 7598,9795 C 7569,9795 7548,9769 7548,9735 L 7548,9735 C 7548,9733 7548,9731 7548,9729 L 7541,9729 7529,9808 7533,9808 7533,9808 C 7536,9797 7541,9795 7548,9795 L 7548,9795 C 7552,9795 7557,9797 7567,9800 L 7567,9800 C 7584,9805 7593,9808 7603,9808 L 7603,9808 C 7646,9808 7677,9776 7677,9738 L 7677,9738 C 7677,9714 7668,9700 7636,9667 L 7636,9667 C 7603,9635 7601,9628 7601,9611 L 7601,9611 C 7601,9590 7615,9575 7638,9575 L 7638,9575 C 7653,9575 7665,9581 7672,9590 L 7672,9590 C 7679,9598 7681,9609 7681,9633 L 7689,9635 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 8157,9571 L 8157,9571 C 8164,9571 8170,9571 8170,9562 L 8170,9562 C 8170,9551 8164,9551 8157,9551 L 7870,9551 7870,9551 C 7865,9551 7856,9551 7856,9562 L 7856,9562 C 7856,9571 7865,9571 7873,9571 L 8157,9571 Z M 8157,9662 L 8157,9662 C 8164,9662 8170,9662 8170,9652 L 8170,9652 C 8170,9643 8164,9643 8157,9643 L 7873,9643 7873,9643 C 7865,9643 7856,9643 7856,9652 L 7856,9652 C 7856,9662 7865,9662 7870,9662 L 8157,9662 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 8424,9404 L 8424,9404 C 8397,9404 8379,9410 8362,9427 L 8362,9427 C 8333,9454 8316,9509 8316,9566 L 8316,9566 C 8316,9616 8331,9673 8354,9700 L 8354,9700 C 8371,9722 8395,9733 8424,9733 L 8424,9733 C 8448,9733 8467,9724 8486,9707 L 8486,9707 C 8512,9681 8531,9626 8531,9568 L 8531,9568 C 8531,9470 8488,9404 8424,9404 Z M 8424,9416 L 8424,9416 C 8462,9416 8486,9470 8486,9568 L 8486,9568 C 8486,9669 8465,9718 8424,9718 L 8424,9718 C 8381,9718 8362,9669 8362,9571 L 8362,9571 C 8362,9468 8384,9416 8424,9416 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 8634,9700 L 8634,9700 C 8634,9686 8621,9676 8608,9676 L 8608,9676 C 8593,9676 8584,9686 8584,9700 L 8584,9700 C 8584,9714 8593,9726 8608,9726 L 8608,9726 C 8621,9726 8634,9714 8634,9700 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 8700,9735 L 8700,9735 C 8756,9731 8782,9722 8813,9697 L 8813,9697 C 8863,9662 8892,9602 8892,9538 L 8892,9538 C 8892,9459 8849,9404 8786,9404 L 8786,9404 C 8730,9404 8689,9451 8689,9516 L 8689,9516 C 8689,9573 8722,9613 8775,9613 L 8775,9613 C 8801,9613 8820,9604 8844,9585 L 8844,9585 C 8824,9664 8773,9714 8700,9726 L 8700,9735 Z M 8846,9557 L 8846,9557 C 8846,9566 8844,9571 8839,9573 L 8839,9573 C 8824,9585 8809,9592 8792,9592 L 8792,9592 C 8756,9592 8732,9557 8732,9500 L 8732,9500 C 8732,9472 8739,9444 8749,9432 L 8749,9432 C 8758,9423 8770,9418 8782,9418 L 8782,9418 C 8824,9418 8846,9459 8846,9538 L 8846,9557 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9049,9549 L 9049,9549 C 9097,9523 9113,9504 9113,9470 L 9113,9470 C 9113,9432 9078,9404 9032,9404 L 9032,9404 C 8980,9404 8942,9435 8942,9480 L 8942,9480 C 8942,9509 8948,9523 8999,9568 L 8999,9568 C 8948,9607 8937,9621 8937,9652 L 8937,9652 C 8937,9700 8975,9733 9030,9733 L 9030,9733 C 9087,9733 9123,9700 9123,9652 L 9123,9652 C 9123,9616 9106,9592 9049,9549 Z M 9040,9598 L 9040,9598 C 9076,9624 9087,9641 9087,9667 L 9087,9667 C 9087,9697 9066,9718 9035,9718 L 9035,9718 C 8999,9718 8975,9690 8975,9650 L 8975,9650 C 8975,9619 8984,9600 9010,9575 L 9040,9598 Z M 9035,9540 L 9035,9540 C 8995,9513 8975,9492 8975,9463 L 8975,9463 C 8975,9438 8997,9418 9027,9418 L 9027,9418 C 9061,9418 9080,9438 9080,9470 L 9080,9470 C 9080,9497 9066,9521 9040,9538 L 9040,9538 C 9037,9540 9037,9540 9035,9540 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9388,9817 L 9381,9817 9381,9817 C 9362,9817 9352,9812 9352,9803 L 9352,9803 C 9352,9800 9352,9800 9354,9797 L 9431,9523 9397,9523 9390,9545 9390,9545 C 9384,9523 9374,9516 9352,9516 L 9352,9516 C 9290,9516 9213,9602 9213,9676 L 9213,9676 C 9213,9709 9233,9731 9262,9731 L 9262,9731 C 9295,9731 9318,9712 9359,9652 L 9318,9793 9318,9793 C 9311,9812 9305,9814 9273,9817 L 9273,9824 9388,9824 9388,9817 Z M 9354,9525 L 9354,9525 C 9371,9525 9384,9540 9384,9554 L 9384,9554 C 9384,9594 9350,9662 9318,9690 L 9318,9690 C 9307,9700 9292,9705 9281,9705 L 9281,9705 C 9266,9705 9254,9690 9254,9669 L 9254,9669 C 9254,9633 9281,9581 9309,9549 L 9309,9549 C 9326,9535 9341,9525 9354,9525 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9452,9745 L 9446,9800 9450,9800 9450,9800 C 9455,9795 9455,9793 9459,9793 L 9459,9793 C 9465,9793 9469,9795 9476,9797 L 9476,9797 C 9486,9800 9491,9800 9498,9800 L 9498,9800 C 9527,9800 9548,9782 9548,9755 L 9548,9755 C 9548,9741 9540,9726 9525,9705 L 9525,9705 C 9510,9688 9505,9676 9505,9667 L 9505,9667 C 9505,9654 9512,9647 9525,9647 L 9525,9647 C 9543,9647 9555,9662 9557,9688 L 9562,9688 9570,9638 9564,9638 9564,9638 C 9562,9645 9560,9645 9555,9645 L 9555,9645 C 9553,9645 9548,9645 9540,9643 L 9540,9643 C 9534,9641 9527,9641 9521,9641 L 9521,9641 C 9495,9641 9478,9654 9478,9678 L 9478,9678 C 9478,9690 9486,9705 9500,9724 L 9500,9724 C 9514,9743 9521,9755 9521,9767 L 9521,9767 C 9521,9782 9510,9793 9495,9793 L 9495,9793 C 9476,9793 9465,9778 9457,9745 L 9452,9745 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9743,9757 L 9743,9757 C 9739,9762 9737,9765 9734,9767 L 9734,9767 C 9722,9778 9720,9782 9715,9782 L 9715,9782 C 9713,9782 9711,9782 9711,9778 L 9711,9778 C 9711,9771 9724,9709 9741,9647 L 9741,9647 C 9743,9645 9743,9645 9743,9641 L 9741,9641 9720,9643 9720,9643 9715,9660 9715,9660 C 9713,9647 9703,9641 9686,9641 L 9686,9641 C 9638,9641 9583,9705 9583,9762 L 9583,9762 C 9583,9786 9598,9800 9622,9800 L 9622,9800 C 9645,9800 9660,9788 9694,9745 L 9694,9745 C 9686,9771 9684,9776 9684,9786 L 9684,9786 C 9684,9795 9689,9800 9698,9800 L 9698,9800 C 9713,9800 9722,9793 9748,9762 L 9743,9757 Z M 9689,9647 L 9689,9647 C 9701,9647 9707,9656 9707,9669 L 9707,9669 C 9707,9700 9691,9741 9668,9767 L 9668,9767 C 9658,9776 9645,9784 9634,9784 L 9634,9784 C 9622,9784 9615,9774 9615,9757 L 9615,9757 C 9615,9738 9629,9700 9643,9678 L 9643,9678 C 9658,9656 9675,9647 9689,9647 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9854,9645 L 9825,9645 9835,9607 9835,9607 C 9835,9607 9835,9607 9835,9604 L 9835,9604 C 9835,9602 9835,9602 9832,9602 L 9832,9602 C 9829,9602 9829,9602 9827,9604 L 9827,9604 C 9813,9624 9792,9641 9779,9645 L 9779,9645 C 9770,9647 9767,9650 9767,9652 L 9767,9654 9796,9654 9770,9755 9770,9755 C 9767,9757 9767,9757 9767,9762 L 9767,9762 C 9765,9771 9760,9784 9760,9788 L 9760,9788 C 9760,9795 9767,9800 9779,9800 L 9779,9800 C 9794,9800 9805,9791 9829,9757 L 9825,9755 9825,9755 C 9808,9778 9801,9784 9796,9784 L 9796,9784 C 9792,9784 9788,9782 9788,9776 L 9788,9774 9822,9654 9850,9654 9854,9645 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 10049,9840 L 10049,9840 C 10049,9838 10049,9838 10040,9829 L 10040,9829 C 9982,9769 9965,9678 9965,9607 L 9965,9607 C 9965,9523 9985,9442 10042,9382 L 10042,9382 C 10049,9375 10049,9375 10049,9373 L 10049,9373 C 10049,9370 10047,9368 10044,9368 L 10044,9368 C 10040,9368 9997,9401 9968,9461 L 9968,9461 C 9944,9513 9940,9566 9940,9607 L 9940,9607 C 9940,9643 9944,9703 9970,9755 L 9970,9755 C 9999,9814 10040,9844 10044,9844 L 10044,9844 C 10047,9844 10049,9844 10049,9840 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 10376,9414 L 10123,9414 10104,9487 10111,9489 10111,9489 C 10137,9440 10152,9430 10226,9432 L 10156,9683 10156,9683 C 10149,9707 10137,9716 10106,9718 L 10106,9726 10245,9726 10245,9718 10245,9718 C 10237,9716 10228,9716 10226,9716 L 10226,9716 C 10207,9714 10202,9709 10202,9695 L 10202,9695 C 10202,9690 10202,9686 10207,9669 L 10273,9432 10299,9432 10299,9432 C 10333,9432 10350,9442 10350,9470 L 10350,9470 C 10350,9476 10348,9483 10348,9492 L 10357,9492 10376,9414 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 10472,9635 L 10485,9564 10476,9564 10476,9564 C 10472,9571 10469,9573 10462,9573 L 10462,9573 C 10457,9573 10453,9571 10446,9568 L 10446,9568 C 10438,9566 10427,9564 10414,9564 L 10414,9564 C 10378,9564 10350,9588 10350,9624 L 10350,9624 C 10350,9643 10357,9652 10378,9676 L 10378,9676 C 10380,9678 10386,9683 10393,9690 L 10393,9690 C 10397,9697 10402,9703 10405,9705 L 10405,9705 C 10421,9724 10427,9733 10427,9748 L 10427,9748 C 10427,9774 10407,9795 10380,9795 L 10380,9795 C 10352,9795 10329,9769 10329,9735 L 10329,9735 C 10329,9733 10329,9731 10331,9729 L 10321,9729 10312,9808 10316,9808 10316,9808 C 10318,9797 10324,9795 10331,9795 L 10331,9795 C 10333,9795 10340,9797 10350,9800 L 10350,9800 C 10365,9805 10376,9808 10386,9808 L 10386,9808 C 10427,9808 10457,9776 10457,9738 L 10457,9738 C 10457,9714 10450,9700 10419,9667 L 10419,9667 C 10386,9635 10383,9628 10383,9611 L 10383,9611 C 10383,9590 10397,9575 10421,9575 L 10421,9575 C 10436,9575 10446,9581 10453,9590 L 10453,9590 C 10462,9598 10464,9609 10464,9633 L 10472,9635 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 10603,9724 L 10603,9724 C 10603,9692 10591,9676 10572,9676 L 10572,9676 C 10555,9676 10545,9688 10545,9700 L 10545,9700 C 10545,9712 10555,9726 10572,9726 L 10572,9726 C 10577,9726 10583,9724 10589,9718 L 10589,9718 10591,9718 10591,9718 C 10591,9718 10591,9718 10591,9724 L 10591,9724 C 10591,9759 10574,9788 10560,9805 L 10560,9805 C 10553,9810 10553,9810 10553,9812 L 10553,9812 C 10553,9814 10555,9817 10560,9817 L 10560,9817 C 10564,9817 10603,9782 10603,9724 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 10760,9423 L 10760,9423 C 10786,9425 10794,9430 10794,9442 L 10794,9442 C 10794,9449 10791,9459 10784,9480 L 10729,9683 10729,9683 C 10720,9712 10718,9714 10688,9718 L 10688,9726 10806,9726 10806,9718 10806,9718 C 10777,9714 10775,9712 10775,9695 L 10775,9695 C 10775,9690 10775,9686 10780,9669 L 10806,9575 10806,9575 C 10818,9581 10829,9581 10848,9581 L 10848,9581 C 10887,9581 10921,9573 10940,9557 L 10940,9557 C 10963,9540 10978,9513 10978,9485 L 10978,9485 C 10978,9440 10942,9414 10878,9414 L 10760,9414 10760,9423 Z M 10844,9442 L 10844,9442 C 10846,9432 10851,9427 10865,9427 L 10865,9427 C 10882,9427 10901,9435 10910,9440 L 10910,9440 C 10923,9449 10927,9463 10927,9485 L 10927,9485 C 10927,9516 10918,9538 10897,9551 L 10897,9551 C 10882,9559 10863,9562 10835,9562 L 10835,9562 C 10827,9562 10822,9562 10808,9562 L 10844,9442 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 11011,9559 L 11011,9559 C 10992,9559 10978,9566 10963,9579 L 10963,9579 C 10944,9598 10930,9638 10930,9681 L 10930,9681 C 10930,9718 10942,9762 10959,9782 L 10959,9782 C 10970,9797 10989,9805 11011,9805 L 11011,9805 C 11028,9805 11045,9800 11056,9786 L 11056,9786 C 11077,9767 11090,9726 11090,9683 L 11090,9683 C 11090,9609 11058,9559 11011,9559 Z M 11011,9568 L 11011,9568 C 11040,9568 11056,9609 11056,9683 L 11056,9683 C 11056,9757 11042,9795 11011,9795 L 11011,9795 C 10980,9795 10963,9757 10963,9683 L 10963,9683 C 10963,9609 10980,9568 11011,9568 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 11257,9607 L 11257,9607 C 11257,9568 11252,9511 11226,9459 L 11226,9459 C 11197,9399 11156,9368 11152,9368 L 11152,9368 C 11149,9368 11147,9370 11147,9373 L 11147,9373 C 11147,9375 11147,9375 11154,9384 L 11154,9384 C 11201,9432 11228,9506 11228,9607 L 11228,9607 C 11228,9688 11211,9771 11152,9831 L 11152,9831 C 11147,9838 11147,9838 11147,9840 L 11147,9840 C 11147,9844 11149,9844 11152,9844 L 11152,9844 C 11156,9844 11199,9812 11226,9752 L 11226,9752 C 11252,9700 11257,9647 11257,9607 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 11400,9724 L 11400,9724 C 11400,9692 11388,9676 11369,9676 L 11369,9676 C 11355,9676 11344,9688 11344,9700 L 11344,9700 C 11344,9712 11355,9726 11369,9726 L 11369,9726 C 11376,9726 11381,9724 11385,9718 L 11385,9718 C 11388,9718 11388,9718 11388,9718 L 11388,9718 C 11391,9718 11391,9718 11391,9724 L 11391,9724 C 11391,9759 11374,9788 11357,9805 L 11357,9805 C 11352,9810 11352,9810 11352,9812 L 11352,9812 C 11352,9814 11355,9817 11357,9817 L 11357,9817 C 11361,9817 11400,9782 11400,9724 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 11682,9705 L 11682,9705 C 11691,9722 11708,9731 11733,9731 L 11733,9731 C 11789,9731 11849,9669 11861,9600 L 11861,9600 C 11872,9530 11836,9483 11777,9483 L 11777,9483 C 11763,9483 11750,9483 11739,9489 L 11739,9489 C 11720,9500 11701,9513 11686,9530 L 11686,9530 C 11669,9547 11662,9562 11658,9598 L 11626,9784 11626,9784 C 11622,9800 11620,9812 11613,9829 L 11658,9829 11658,9829 C 11662,9814 11662,9812 11669,9776 L 11682,9705 Z M 11701,9573 L 11703,9566 11703,9566 C 11705,9547 11710,9538 11720,9525 L 11720,9525 C 11729,9516 11739,9509 11748,9509 L 11748,9509 C 11793,9509 11823,9562 11812,9621 L 11812,9621 C 11806,9673 11772,9707 11733,9707 L 11733,9707 C 11715,9707 11696,9695 11691,9676 L 11691,9676 C 11688,9669 11688,9667 11691,9652 L 11701,9573 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 12032,9757 L 12032,9757 C 12028,9762 12026,9765 12023,9767 L 12023,9767 C 12013,9778 12009,9782 12004,9782 L 12004,9782 C 12002,9782 11998,9782 11998,9778 L 11998,9778 C 11998,9771 12015,9709 12032,9647 L 12032,9647 C 12032,9645 12032,9645 12035,9641 L 12032,9641 12011,9643 12009,9643 12004,9660 12004,9660 C 12002,9647 11992,9641 11975,9641 L 11975,9641 C 11930,9641 11874,9705 11874,9762 L 11874,9762 C 11874,9786 11889,9800 11911,9800 L 11911,9800 C 11934,9800 11951,9788 11983,9745 L 11983,9745 C 11975,9771 11973,9776 11973,9786 L 11973,9786 C 11973,9795 11977,9800 11987,9800 L 11987,9800 C 12002,9800 12011,9793 12037,9762 L 12032,9757 Z M 11977,9647 L 11977,9647 C 11989,9647 11998,9656 11998,9669 L 11998,9669 C 11998,9700 11979,9741 11956,9767 L 11956,9767 C 11947,9776 11934,9784 11925,9784 L 11925,9784 C 11913,9784 11904,9774 11904,9757 L 11904,9757 C 11904,9738 11917,9700 11932,9678 L 11932,9678 C 11947,9656 11964,9647 11977,9647 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 12126,9757 L 12126,9757 C 12118,9767 12116,9771 12111,9774 L 12111,9774 C 12104,9782 12099,9784 12097,9784 L 12097,9784 C 12094,9784 12090,9782 12090,9778 L 12090,9778 C 12090,9774 12092,9769 12094,9762 L 12094,9762 C 12094,9762 12094,9759 12097,9757 L 12097,9755 12128,9641 12126,9641 12126,9641 C 12090,9647 12085,9647 12071,9647 L 12071,9654 12071,9654 C 12090,9654 12092,9654 12092,9662 L 12092,9662 C 12092,9667 12092,9671 12090,9678 L 12073,9741 12073,9741 C 12066,9762 12064,9774 12064,9782 L 12064,9782 C 12064,9793 12071,9800 12080,9800 L 12080,9800 C 12097,9800 12109,9791 12130,9759 L 12126,9757 Z M 12123,9564 L 12123,9564 C 12113,9564 12107,9571 12107,9583 L 12107,9583 C 12107,9592 12113,9602 12123,9602 L 12123,9602 C 12133,9602 12139,9592 12139,9583 L 12139,9583 C 12139,9573 12133,9564 12123,9564 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 12188,9797 L 12188,9797 C 12207,9735 12214,9722 12231,9692 L 12231,9692 C 12242,9673 12252,9662 12257,9662 L 12257,9662 C 12259,9662 12261,9664 12263,9667 L 12263,9667 C 12266,9673 12269,9676 12276,9676 L 12276,9676 C 12288,9676 12293,9669 12293,9660 L 12293,9660 C 12293,9647 12285,9641 12276,9641 L 12276,9641 C 12266,9641 12259,9645 12250,9654 L 12250,9654 C 12233,9669 12218,9690 12214,9705 L 12209,9718 12228,9641 12228,9641 12228,9641 C 12201,9645 12197,9645 12171,9650 L 12171,9654 12171,9654 C 12180,9652 12180,9652 12182,9652 L 12182,9652 C 12192,9652 12197,9656 12197,9664 L 12197,9664 C 12197,9669 12197,9669 12190,9692 L 12161,9797 12188,9797 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 12469,9840 L 12469,9840 C 12469,9838 12469,9838 12462,9829 L 12462,9829 C 12402,9769 12387,9678 12387,9607 L 12387,9607 C 12387,9523 12404,9442 12464,9382 L 12464,9382 C 12469,9375 12469,9375 12469,9373 L 12469,9373 C 12469,9370 12466,9368 12464,9368 L 12464,9368 C 12460,9368 12417,9401 12391,9461 L 12391,9461 C 12364,9513 12359,9566 12359,9607 L 12359,9607 C 12359,9643 12364,9703 12391,9755 L 12391,9755 C 12419,9814 12460,9844 12464,9844 L 12464,9844 C 12466,9844 12469,9844 12469,9840 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 12677,9399 L 12677,9399 C 12658,9399 12639,9406 12618,9421 L 12618,9421 C 12581,9447 12555,9500 12543,9566 L 12543,9566 C 12534,9628 12541,9676 12565,9705 L 12565,9705 C 12581,9722 12601,9731 12622,9731 L 12622,9731 C 12641,9731 12660,9724 12680,9709 L 12680,9709 C 12718,9683 12744,9633 12753,9568 L 12753,9568 C 12765,9502 12758,9454 12734,9427 L 12734,9427 C 12718,9408 12699,9399 12677,9399 Z M 12703,9575 L 12703,9575 C 12693,9630 12682,9662 12665,9688 L 12665,9688 C 12652,9703 12637,9712 12624,9712 L 12624,9712 C 12612,9712 12598,9703 12593,9688 L 12593,9688 C 12584,9662 12584,9630 12590,9575 L 12703,9575 Z M 12596,9549 L 12596,9549 C 12605,9500 12618,9468 12633,9442 L 12633,9442 C 12643,9427 12663,9418 12674,9418 L 12674,9418 C 12686,9418 12701,9427 12705,9442 L 12705,9442 C 12714,9468 12714,9500 12708,9549 L 12596,9549 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 12772,9686 L 12772,9686 C 12782,9669 12787,9667 12804,9667 L 12855,9667 12744,9797 12746,9800 12746,9800 C 12753,9797 12758,9795 12763,9795 L 12763,9795 C 12772,9795 12784,9800 12801,9810 L 12801,9810 C 12817,9821 12829,9827 12842,9827 L 12842,9827 C 12858,9827 12875,9812 12875,9797 L 12875,9797 C 12875,9791 12868,9786 12861,9786 L 12861,9786 C 12855,9786 12849,9791 12849,9797 L 12849,9797 C 12849,9800 12851,9803 12853,9808 L 12853,9808 C 12853,9810 12855,9812 12855,9812 L 12855,9812 C 12855,9817 12851,9817 12844,9817 L 12844,9817 C 12836,9817 12832,9814 12820,9800 L 12820,9800 C 12804,9782 12798,9776 12776,9771 L 12879,9647 12879,9645 12780,9645 12767,9686 12772,9686 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 13049,9755 L 13049,9755 C 13030,9778 13022,9784 13018,9784 L 13018,9784 C 13016,9784 13013,9782 13013,9776 L 13013,9776 C 13013,9774 13013,9774 13020,9750 L 13049,9643 13022,9643 13022,9643 C 13004,9697 13001,9705 12982,9729 L 12982,9729 C 12964,9765 12944,9782 12932,9782 L 12932,9782 C 12930,9782 12925,9778 12925,9774 L 12925,9774 C 12925,9771 12925,9771 12928,9769 L 12958,9641 12958,9641 12958,9641 C 12937,9645 12925,9647 12904,9650 L 12904,9654 12904,9654 C 12917,9654 12917,9654 12920,9656 L 12920,9656 C 12923,9656 12925,9660 12925,9662 L 12925,9662 C 12925,9667 12923,9673 12920,9686 L 12906,9738 12906,9738 C 12902,9762 12898,9774 12898,9782 L 12898,9782 C 12898,9793 12904,9800 12917,9800 L 12917,9800 C 12941,9800 12960,9782 13004,9712 L 13004,9712 C 12992,9750 12987,9776 12987,9784 L 12987,9784 C 12987,9793 12992,9800 13004,9800 L 13004,9800 C 13020,9800 13028,9793 13054,9757 L 13049,9755 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 13178,9724 L 13178,9724 C 13178,9692 13165,9676 13147,9676 L 13147,9676 C 13133,9676 13123,9688 13123,9700 L 13123,9700 C 13123,9712 13133,9726 13147,9726 L 13147,9726 C 13154,9726 13159,9724 13163,9718 L 13163,9718 C 13165,9718 13165,9718 13165,9718 L 13165,9718 C 13169,9718 13169,9718 13169,9724 L 13169,9724 C 13169,9759 13152,9788 13135,9805 L 13135,9805 C 13131,9810 13131,9810 13131,9812 L 13131,9812 C 13131,9814 13133,9817 13135,9817 L 13135,9817 C 13140,9817 13178,9782 13178,9724 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 13452,9817 L 13443,9817 13443,9817 C 13426,9817 13417,9812 13417,9803 L 13417,9803 C 13417,9800 13417,9800 13417,9797 L 13496,9523 13462,9523 13455,9545 13455,9545 C 13445,9523 13438,9516 13417,9516 L 13417,9516 C 13355,9516 13278,9602 13278,9676 L 13278,9676 C 13278,9709 13297,9731 13326,9731 L 13326,9731 C 13359,9731 13383,9712 13424,9652 L 13383,9793 13383,9793 C 13376,9812 13368,9814 13338,9817 L 13338,9824 13452,9824 13452,9817 Z M 13419,9525 L 13419,9525 C 13434,9525 13447,9540 13447,9554 L 13447,9554 C 13447,9594 13415,9662 13383,9690 L 13383,9690 C 13368,9700 13357,9705 13345,9705 L 13345,9705 C 13328,9705 13319,9690 13319,9669 L 13319,9669 C 13319,9633 13343,9581 13374,9549 L 13374,9549 C 13388,9535 13405,9525 13419,9525 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 13533,9686 L 13533,9686 C 13541,9669 13545,9667 13562,9667 L 13614,9667 13503,9797 13507,9800 13507,9800 C 13512,9797 13517,9795 13522,9795 L 13522,9795 C 13531,9795 13543,9800 13560,9810 L 13560,9810 C 13579,9821 13588,9827 13601,9827 L 13601,9827 C 13617,9827 13633,9812 13633,9797 L 13633,9797 C 13633,9791 13629,9786 13620,9786 L 13620,9786 C 13614,9786 13610,9791 13610,9797 L 13610,9797 C 13610,9800 13610,9803 13612,9808 L 13612,9808 C 13612,9810 13614,9812 13614,9812 L 13614,9812 C 13614,9817 13610,9817 13603,9817 L 13603,9817 C 13595,9817 13591,9814 13579,9800 L 13579,9800 C 13565,9782 13558,9776 13536,9771 L 13639,9647 13639,9645 13539,9645 13526,9686 13533,9686 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 13808,9755 L 13808,9755 C 13789,9778 13785,9784 13777,9784 L 13777,9784 C 13774,9784 13774,9782 13774,9776 L 13774,9776 C 13774,9774 13774,9774 13779,9750 L 13808,9643 13782,9643 13782,9643 C 13763,9697 13760,9705 13744,9729 L 13744,9729 C 13723,9765 13703,9782 13691,9782 L 13691,9782 C 13689,9782 13684,9778 13684,9774 L 13684,9774 C 13684,9771 13684,9771 13686,9769 L 13717,9641 13717,9641 13717,9641 C 13695,9645 13684,9647 13663,9650 L 13663,9654 13663,9654 C 13676,9654 13676,9654 13682,9656 L 13682,9656 C 13684,9656 13684,9660 13684,9662 L 13684,9662 C 13684,9667 13684,9673 13680,9686 L 13667,9738 13667,9738 C 13660,9762 13657,9774 13657,9782 L 13657,9782 C 13657,9793 13665,9800 13676,9800 L 13676,9800 C 13701,9800 13720,9782 13763,9712 L 13763,9712 C 13751,9750 13746,9776 13746,9784 L 13746,9784 C 13746,9793 13751,9800 13763,9800 L 13763,9800 C 13779,9800 13789,9793 13813,9757 L 13808,9755 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 13937,9724 L 13937,9724 C 13937,9692 13925,9676 13906,9676 L 13906,9676 C 13892,9676 13881,9688 13881,9700 L 13881,9700 C 13881,9712 13892,9726 13906,9726 L 13906,9726 C 13913,9726 13918,9724 13922,9718 L 13922,9718 C 13925,9718 13925,9718 13925,9718 L 13925,9718 C 13928,9718 13928,9718 13928,9724 L 13928,9724 C 13928,9759 13911,9788 13894,9805 L 13894,9805 C 13889,9810 13889,9810 13889,9812 L 13889,9812 C 13889,9814 13892,9817 13894,9817 L 13894,9817 C 13898,9817 13937,9782 13937,9724 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 14095,9423 L 14095,9423 C 14121,9425 14127,9430 14127,9442 L 14127,9442 C 14127,9449 14125,9459 14121,9480 L 14063,9683 14063,9683 C 14056,9712 14052,9714 14025,9718 L 14025,9726 14142,9726 14142,9718 14142,9718 C 14112,9714 14109,9712 14109,9695 L 14109,9695 C 14109,9690 14112,9686 14116,9669 L 14140,9575 14140,9575 C 14152,9581 14163,9581 14185,9581 L 14185,9581 C 14223,9581 14255,9573 14276,9557 L 14276,9557 C 14300,9540 14314,9513 14314,9485 L 14314,9485 C 14314,9440 14276,9414 14212,9414 L 14095,9414 14095,9423 Z M 14178,9442 L 14178,9442 C 14180,9432 14187,9427 14199,9427 L 14199,9427 C 14219,9427 14238,9435 14247,9440 L 14247,9440 C 14259,9449 14264,9463 14264,9485 L 14264,9485 C 14264,9516 14252,9538 14233,9551 L 14233,9551 C 14216,9559 14199,9562 14168,9562 L 14168,9562 C 14161,9562 14157,9562 14144,9562 L 14178,9442 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 14347,9559 L 14347,9559 C 14328,9559 14311,9566 14300,9579 L 14300,9579 C 14278,9598 14264,9638 14264,9681 L 14264,9681 C 14264,9718 14276,9762 14292,9782 L 14292,9782 C 14307,9797 14324,9805 14345,9805 L 14345,9805 C 14364,9805 14379,9800 14392,9786 L 14392,9786 C 14411,9767 14426,9726 14426,9683 L 14426,9683 C 14426,9609 14392,9559 14347,9559 Z M 14345,9568 L 14345,9568 C 14376,9568 14392,9609 14392,9683 L 14392,9683 C 14392,9757 14376,9795 14345,9795 L 14345,9795 C 14314,9795 14300,9757 14300,9683 L 14300,9683 C 14300,9609 14317,9568 14345,9568 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 14591,9607 L 14591,9607 C 14591,9568 14586,9511 14560,9459 L 14560,9459 C 14531,9399 14490,9368 14486,9368 L 14486,9368 C 14484,9368 14481,9370 14481,9373 L 14481,9373 C 14481,9375 14481,9375 14490,9384 L 14490,9384 C 14535,9432 14565,9506 14565,9607 L 14565,9607 C 14565,9688 14546,9771 14488,9831 L 14488,9831 C 14481,9838 14481,9838 14481,9840 L 14481,9840 C 14481,9844 14484,9844 14486,9844 L 14486,9844 C 14490,9844 14533,9812 14563,9752 L 14563,9752 C 14586,9700 14591,9647 14591,9607 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 14736,9724 L 14736,9724 C 14736,9692 14725,9676 14706,9676 L 14706,9676 C 14689,9676 14679,9688 14679,9700 L 14679,9700 C 14679,9712 14689,9726 14706,9726 L 14706,9726 C 14710,9726 14717,9724 14722,9718 L 14722,9718 14725,9718 14725,9718 C 14725,9718 14725,9718 14725,9724 L 14725,9724 C 14725,9759 14708,9788 14693,9805 L 14693,9805 C 14687,9810 14687,9810 14687,9812 L 14687,9812 C 14687,9814 14691,9817 14693,9817 L 14693,9817 C 14698,9817 14736,9782 14736,9724 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 15228,9504 L 15247,9408 15236,9408 15236,9408 C 15232,9418 15228,9421 15219,9421 L 15219,9421 C 15214,9421 15209,9418 15200,9418 L 15200,9418 C 15178,9410 15159,9408 15142,9408 L 15142,9408 C 15042,9408 14949,9504 14949,9609 L 14949,9609 C 14949,9683 15001,9733 15073,9733 L 15073,9733 C 15123,9733 15161,9712 15204,9664 L 15197,9656 15197,9656 C 15155,9697 15125,9712 15087,9712 L 15087,9712 C 15035,9712 15003,9676 15003,9616 L 15003,9616 C 15003,9559 15025,9502 15063,9463 L 15063,9463 C 15085,9440 15116,9425 15147,9425 L 15147,9425 C 15189,9425 15217,9451 15221,9502 L 15228,9504 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 15276,9568 L 15276,9568 C 15298,9571 15302,9575 15302,9585 L 15302,9585 C 15302,9590 15300,9598 15294,9613 L 15254,9765 15254,9765 C 15247,9786 15245,9788 15223,9791 L 15223,9797 15311,9797 15311,9791 15311,9791 C 15288,9788 15288,9786 15288,9774 L 15288,9774 C 15288,9771 15288,9767 15290,9755 L 15309,9686 15309,9686 C 15319,9688 15328,9688 15343,9688 L 15343,9688 C 15373,9688 15395,9681 15412,9671 L 15412,9671 C 15429,9656 15441,9638 15441,9616 L 15441,9616 C 15441,9583 15412,9564 15364,9564 L 15276,9564 15276,9568 Z M 15338,9585 L 15338,9585 C 15341,9575 15345,9573 15354,9573 L 15354,9573 C 15369,9573 15383,9579 15390,9583 L 15390,9583 C 15400,9590 15403,9600 15403,9616 L 15403,9616 C 15403,9641 15395,9656 15379,9667 L 15379,9667 C 15369,9671 15354,9676 15333,9676 L 15333,9676 C 15326,9676 15324,9673 15314,9673 L 15338,9585 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 15619,9840 L 15619,9840 C 15619,9838 15619,9838 15610,9829 L 15610,9829 C 15553,9769 15536,9678 15536,9607 L 15536,9607 C 15536,9523 15555,9442 15612,9382 L 15612,9382 C 15619,9375 15619,9375 15619,9373 L 15619,9373 C 15619,9370 15617,9368 15615,9368 L 15615,9368 C 15610,9368 15567,9401 15538,9461 L 15538,9461 C 15514,9513 15510,9566 15510,9607 L 15510,9607 C 15510,9643 15514,9703 15540,9755 L 15540,9755 C 15569,9814 15610,9844 15615,9844 L 15615,9844 C 15617,9844 15619,9844 15619,9840 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 15832,9817 L 15824,9817 15824,9817 C 15805,9817 15796,9812 15796,9803 L 15796,9803 C 15796,9800 15796,9800 15798,9797 L 15875,9523 15841,9523 15834,9545 15834,9545 C 15827,9523 15818,9516 15796,9516 L 15796,9516 C 15734,9516 15657,9602 15657,9676 L 15657,9676 C 15657,9709 15677,9731 15706,9731 L 15706,9731 C 15741,9731 15762,9712 15805,9652 L 15762,9793 15762,9793 C 15756,9812 15749,9814 15717,9817 L 15717,9824 15832,9824 15832,9817 Z M 15798,9525 L 15798,9525 C 15815,9525 15827,9540 15827,9554 L 15827,9554 C 15827,9594 15794,9662 15762,9690 L 15762,9690 C 15751,9700 15736,9705 15727,9705 L 15727,9705 C 15710,9705 15698,9690 15698,9669 L 15698,9669 C 15698,9633 15724,9581 15756,9549 L 15756,9549 C 15770,9535 15784,9525 15798,9525 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 15913,9686 L 15913,9686 C 15920,9669 15925,9667 15942,9667 L 15995,9667 15884,9797 15886,9800 15886,9800 C 15892,9797 15896,9795 15903,9795 L 15903,9795 C 15911,9795 15922,9800 15939,9810 L 15939,9810 C 15958,9821 15970,9827 15980,9827 L 15980,9827 C 15997,9827 16014,9812 16014,9797 L 16014,9797 C 16014,9791 16008,9786 16001,9786 L 16001,9786 C 15995,9786 15989,9791 15989,9797 L 15989,9797 C 15989,9800 15989,9803 15992,9808 L 15992,9808 C 15995,9810 15995,9812 15995,9812 L 15995,9812 C 15995,9817 15989,9817 15984,9817 L 15984,9817 C 15975,9817 15970,9814 15958,9800 L 15958,9800 C 15944,9782 15937,9776 15916,9771 L 16020,9647 16020,9645 15918,9645 15905,9686 15913,9686 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 16187,9755 L 16187,9755 C 16168,9778 16164,9784 16157,9784 L 16157,9784 C 16154,9784 16154,9782 16154,9776 L 16154,9776 C 16154,9774 16154,9774 16161,9750 L 16187,9643 16161,9643 16161,9643 C 16142,9697 16140,9705 16123,9729 L 16123,9729 C 16102,9765 16085,9782 16072,9782 L 16072,9782 C 16068,9782 16066,9778 16066,9774 L 16066,9774 C 16066,9771 16066,9771 16066,9769 L 16097,9641 16097,9641 16097,9641 C 16078,9645 16063,9647 16044,9650 L 16044,9654 16044,9654 C 16057,9654 16059,9654 16061,9656 L 16061,9656 C 16063,9656 16066,9660 16066,9662 L 16066,9662 C 16066,9667 16063,9673 16061,9686 L 16046,9738 16046,9738 C 16040,9762 16037,9774 16037,9782 L 16037,9782 C 16037,9793 16044,9800 16057,9800 L 16057,9800 C 16082,9800 16102,9782 16142,9712 L 16142,9712 C 16132,9750 16125,9776 16125,9784 L 16125,9784 C 16125,9793 16132,9800 16142,9800 L 16142,9800 C 16159,9800 16168,9793 16192,9757 L 16187,9755 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 16359,9607 L 16359,9607 C 16359,9568 16352,9511 16328,9459 L 16328,9459 C 16300,9399 16256,9368 16252,9368 L 16252,9368 C 16249,9368 16247,9370 16247,9373 L 16247,9373 C 16247,9375 16247,9375 16256,9384 L 16256,9384 C 16305,9432 16331,9506 16331,9607 L 16331,9607 C 16331,9688 16314,9771 16254,9831 L 16254,9831 C 16247,9838 16247,9838 16247,9840 L 16247,9840 C 16247,9844 16249,9844 16252,9844 L 16252,9844 C 16256,9844 16300,9812 16328,9752 L 16328,9752 C 16352,9700 16359,9647 16359,9607 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 16502,9724 L 16502,9724 C 16502,9692 16491,9676 16472,9676 L 16472,9676 C 16455,9676 16446,9688 16446,9700 L 16446,9700 C 16446,9712 16455,9726 16472,9726 L 16472,9726 C 16476,9726 16484,9724 16488,9718 L 16488,9718 16491,9718 16491,9718 C 16491,9718 16491,9718 16491,9724 L 16491,9724 C 16491,9759 16474,9788 16459,9805 L 16459,9805 C 16455,9810 16455,9810 16455,9812 L 16455,9812 C 16455,9814 16457,9817 16459,9817 L 16459,9817 C 16465,9817 16502,9782 16502,9724 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 16901,9414 L 16770,9414 16770,9423 16770,9423 C 16801,9425 16808,9427 16808,9442 L 16808,9442 C 16808,9449 16805,9461 16801,9472 L 16743,9683 16743,9683 C 16734,9709 16732,9712 16705,9718 L 16705,9726 16946,9726 16976,9641 16965,9638 16965,9638 C 16948,9671 16935,9688 16916,9697 L 16916,9697 C 16899,9705 16880,9707 16837,9707 L 16837,9707 C 16801,9707 16788,9705 16788,9692 L 16788,9692 C 16788,9688 16792,9678 16794,9669 L 16854,9457 16854,9457 C 16861,9432 16873,9425 16901,9423 L 16901,9414 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 16980,9652 L 16980,9652 C 16985,9652 16987,9652 16991,9652 L 16991,9652 C 17006,9652 17008,9660 17013,9692 L 17013,9692 C 17018,9716 17023,9769 17023,9791 L 17023,9791 C 17023,9800 17023,9803 17025,9803 L 17025,9803 C 17034,9803 17068,9765 17104,9714 L 17104,9714 C 17115,9697 17125,9673 17125,9662 L 17125,9662 C 17125,9650 17115,9641 17104,9641 L 17104,9641 C 17097,9641 17092,9645 17092,9652 L 17092,9652 C 17092,9656 17094,9662 17102,9667 L 17102,9667 C 17104,9671 17106,9673 17106,9678 L 17106,9678 C 17106,9695 17083,9733 17059,9759 L 17047,9771 17047,9771 C 17044,9722 17042,9703 17038,9676 L 17038,9676 C 17030,9641 17030,9641 17027,9641 L 17027,9641 C 17025,9641 17023,9641 17021,9641 L 17021,9641 C 17013,9643 16994,9647 16980,9647 L 16980,9652 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 17309,9840 L 17309,9840 C 17309,9838 17309,9838 17299,9829 L 17299,9829 C 17243,9769 17226,9678 17226,9607 L 17226,9607 C 17226,9523 17245,9442 17303,9382 L 17303,9382 C 17309,9375 17309,9375 17309,9373 L 17309,9373 C 17309,9370 17307,9368 17305,9368 L 17305,9368 C 17299,9368 17256,9401 17228,9461 L 17228,9461 C 17204,9513 17200,9566 17200,9607 L 17200,9607 C 17200,9643 17204,9703 17230,9755 L 17230,9755 C 17259,9814 17299,9844 17305,9844 L 17305,9844 C 17307,9844 17309,9844 17309,9840 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 17636,9414 L 17383,9414 17365,9487 17374,9489 17374,9489 C 17397,9440 17412,9430 17486,9432 L 17416,9683 17416,9683 C 17410,9707 17397,9716 17367,9718 L 17367,9726 17504,9726 17504,9718 17504,9718 C 17498,9716 17489,9716 17486,9716 L 17486,9716 C 17467,9714 17462,9709 17462,9695 L 17462,9695 C 17462,9690 17464,9686 17467,9669 L 17534,9432 17560,9432 17560,9432 C 17593,9432 17610,9442 17610,9470 L 17610,9470 C 17610,9476 17607,9483 17607,9492 L 17617,9492 17636,9414 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 17732,9635 L 17746,9564 17737,9564 17737,9564 C 17732,9571 17729,9573 17722,9573 L 17722,9573 C 17717,9573 17713,9571 17705,9568 L 17705,9568 C 17698,9566 17686,9564 17675,9564 L 17675,9564 C 17639,9564 17613,9588 17613,9624 L 17613,9624 C 17613,9643 17617,9652 17639,9676 L 17639,9676 C 17641,9678 17645,9683 17653,9690 L 17653,9690 C 17658,9697 17662,9703 17664,9705 L 17664,9705 C 17681,9724 17686,9733 17686,9748 L 17686,9748 C 17686,9774 17667,9795 17641,9795 L 17641,9795 C 17613,9795 17589,9769 17589,9735 L 17589,9735 C 17589,9733 17589,9731 17591,9729 L 17583,9729 17572,9808 17577,9808 17577,9808 C 17579,9797 17583,9795 17591,9795 L 17591,9795 C 17596,9795 17600,9797 17610,9800 L 17610,9800 C 17626,9805 17636,9808 17645,9808 L 17645,9808 C 17686,9808 17717,9776 17717,9738 L 17717,9738 C 17717,9714 17710,9700 17679,9667 L 17679,9667 C 17645,9635 17643,9628 17643,9611 L 17643,9611 C 17643,9590 17658,9575 17681,9575 L 17681,9575 C 17696,9575 17705,9581 17715,9590 L 17715,9590 C 17722,9598 17724,9609 17724,9633 L 17732,9635 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 17904,9607 L 17904,9607 C 17904,9568 17899,9511 17872,9459 L 17872,9459 C 17844,9399 17803,9368 17799,9368 L 17799,9368 C 17794,9368 17794,9370 17794,9373 L 17794,9373 C 17794,9375 17794,9375 17801,9384 L 17801,9384 C 17848,9432 17875,9506 17875,9607 L 17875,9607 C 17875,9688 17858,9771 17799,9831 L 17799,9831 C 17794,9838 17794,9838 17794,9840 L 17794,9840 C 17794,9844 17794,9844 17799,9844 L 17799,9844 C 17803,9844 17846,9812 17872,9752 L 17872,9752 C 17897,9700 17904,9647 17904,9607 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 7755,11672 L 7755,11672 C 7766,11658 7772,11646 7781,11636 L 7781,11636 C 7789,11629 7796,11627 7808,11627 L 7843,11627 7843,11627 C 7828,11679 7817,11715 7813,11743 L 7813,11743 C 7806,11794 7817,11825 7847,11825 L 7847,11825 C 7865,11825 7887,11811 7899,11792 L 7899,11792 C 7905,11777 7911,11765 7916,11743 L 7903,11743 7903,11743 C 7894,11771 7887,11780 7873,11780 L 7873,11780 C 7851,11780 7837,11760 7841,11734 L 7841,11734 C 7843,11724 7847,11711 7851,11694 L 7851,11694 C 7851,11689 7856,11675 7860,11660 L 7860,11660 C 7863,11641 7865,11639 7868,11627 L 7946,11627 7954,11581 7847,11581 7847,11581 C 7820,11581 7806,11587 7787,11604 L 7787,11604 C 7770,11619 7758,11639 7744,11672 L 7755,11672 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 8687,11662 L 8687,11662 C 8694,11662 8703,11662 8703,11655 L 8703,11655 C 8703,11644 8694,11644 8687,11644 L 8403,11644 8403,11644 C 8395,11644 8386,11644 8386,11655 L 8386,11655 C 8386,11662 8395,11662 8403,11662 L 8687,11662 Z M 8687,11756 L 8687,11756 C 8694,11756 8703,11756 8703,11747 L 8703,11747 C 8703,11737 8694,11737 8687,11737 L 8403,11737 8403,11737 C 8395,11737 8386,11737 8386,11747 L 8386,11747 C 8386,11756 8395,11756 8403,11756 L 8687,11756 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9200,11796 L 9200,11796 C 9209,11816 9228,11825 9252,11825 L 9252,11825 C 9307,11825 9367,11763 9378,11692 L 9378,11692 C 9390,11625 9354,11574 9295,11574 L 9295,11574 C 9281,11574 9271,11576 9256,11584 L 9256,11584 C 9238,11593 9219,11608 9204,11625 L 9204,11625 C 9187,11641 9181,11655 9175,11689 L 9145,11878 9145,11878 C 9140,11895 9138,11906 9130,11923 L 9175,11923 9175,11923 C 9181,11908 9181,11906 9187,11868 L 9200,11796 Z M 9219,11666 L 9221,11658 9221,11658 C 9224,11641 9228,11629 9238,11619 L 9238,11619 C 9247,11610 9256,11604 9266,11604 L 9266,11604 C 9311,11604 9341,11655 9331,11715 L 9331,11715 C 9324,11768 9290,11801 9252,11801 L 9252,11801 C 9233,11801 9213,11790 9209,11771 L 9209,11771 C 9207,11763 9207,11760 9209,11747 L 9219,11666 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9551,11852 L 9551,11852 C 9546,11856 9543,11858 9540,11861 L 9540,11861 C 9531,11873 9527,11875 9525,11875 L 9525,11875 C 9519,11875 9517,11873 9517,11871 L 9517,11871 C 9517,11865 9534,11803 9551,11741 L 9551,11741 C 9551,11739 9551,11737 9553,11734 L 9551,11734 9529,11737 9527,11737 9525,11754 9525,11754 C 9519,11741 9510,11734 9495,11734 L 9495,11734 C 9448,11734 9393,11799 9393,11856 L 9393,11856 C 9393,11880 9407,11895 9429,11895 L 9429,11895 C 9452,11895 9469,11882 9500,11839 L 9500,11839 C 9493,11865 9491,11871 9491,11880 L 9491,11880 C 9491,11890 9495,11895 9505,11895 L 9505,11895 C 9519,11895 9529,11887 9555,11856 L 9551,11852 Z M 9495,11741 L 9495,11741 C 9510,11741 9517,11751 9517,11763 L 9517,11763 C 9517,11794 9498,11835 9474,11861 L 9474,11861 C 9465,11871 9452,11878 9443,11878 L 9443,11878 C 9431,11878 9421,11868 9421,11852 L 9421,11852 C 9421,11830 9436,11794 9450,11773 L 9450,11773 C 9465,11751 9481,11739 9495,11741 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9643,11852 L 9643,11852 C 9636,11861 9634,11865 9629,11868 L 9629,11868 C 9622,11875 9617,11878 9615,11878 L 9615,11878 C 9613,11878 9608,11875 9608,11873 L 9608,11873 C 9608,11868 9610,11863 9613,11856 L 9613,11856 C 9613,11856 9615,11854 9615,11852 L 9615,11849 9645,11734 9645,11734 9645,11734 C 9608,11739 9602,11741 9589,11741 L 9589,11749 9589,11749 C 9608,11749 9610,11749 9610,11756 L 9610,11756 C 9610,11760 9610,11765 9608,11773 L 9591,11835 9591,11835 C 9583,11856 9581,11868 9581,11875 L 9581,11875 C 9581,11887 9589,11895 9598,11895 L 9598,11895 C 9615,11895 9629,11884 9649,11854 L 9643,11852 Z M 9641,11658 L 9641,11658 C 9632,11658 9624,11666 9624,11677 L 9624,11677 C 9624,11687 9632,11694 9641,11694 L 9641,11694 C 9651,11694 9660,11687 9660,11677 L 9660,11677 C 9660,11668 9651,11658 9641,11658 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9705,11890 L 9705,11890 C 9724,11830 9732,11816 9748,11787 L 9748,11787 C 9760,11768 9770,11756 9775,11756 L 9775,11756 C 9777,11756 9779,11758 9782,11760 L 9782,11760 C 9784,11768 9786,11771 9794,11771 L 9794,11771 C 9805,11771 9810,11763 9810,11751 L 9810,11751 C 9810,11741 9803,11734 9794,11734 L 9794,11734 C 9786,11734 9777,11739 9767,11749 L 9767,11749 C 9751,11763 9737,11784 9732,11799 L 9726,11811 9746,11734 9746,11734 9746,11734 C 9720,11737 9715,11739 9689,11741 L 9689,11749 9689,11749 C 9698,11747 9698,11747 9701,11747 L 9701,11747 C 9711,11747 9715,11751 9715,11756 L 9715,11756 C 9715,11763 9715,11763 9707,11787 L 9679,11890 9705,11890 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10235,11598 L 10252,11503 10243,11503 10243,11503 C 10239,11510 10235,11514 10226,11514 L 10226,11514 C 10221,11514 10216,11512 10207,11510 L 10207,11510 C 10185,11505 10166,11503 10149,11503 L 10149,11503 C 10049,11503 9956,11598 9956,11703 L 9956,11703 C 9956,11777 10008,11828 10080,11828 L 10080,11828 C 10130,11828 10168,11805 10211,11758 L 10202,11751 10202,11751 C 10159,11792 10132,11805 10094,11805 L 10094,11805 C 10040,11805 10011,11771 10011,11708 L 10011,11708 C 10011,11651 10032,11596 10070,11555 L 10070,11555 C 10092,11531 10123,11519 10154,11519 L 10154,11519 C 10197,11519 10221,11546 10228,11596 L 10235,11598 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10278,11662 L 10278,11662 C 10299,11666 10305,11668 10305,11677 L 10305,11677 C 10305,11685 10305,11692 10303,11701 L 10256,11858 10256,11858 C 10250,11880 10247,11882 10228,11884 L 10228,11890 10318,11890 10318,11890 C 10359,11890 10397,11880 10427,11858 L 10427,11858 C 10459,11835 10481,11794 10481,11754 L 10481,11754 C 10481,11694 10440,11658 10376,11658 L 10278,11658 10278,11662 Z M 10343,11679 L 10343,11679 C 10345,11670 10350,11668 10365,11668 L 10365,11668 C 10383,11668 10402,11672 10414,11681 L 10414,11681 C 10431,11694 10440,11717 10440,11747 L 10440,11747 C 10440,11784 10427,11822 10402,11846 L 10402,11846 C 10380,11871 10352,11880 10314,11880 L 10314,11880 C 10297,11880 10292,11875 10292,11868 L 10292,11868 C 10292,11861 10292,11854 10299,11833 L 10343,11679 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 10923,11551 L 10923,11551 C 10923,11522 10930,11514 10961,11510 L 10961,11497 10856,11497 10856,11510 10856,11510 C 10893,11512 10904,11522 10904,11557 L 10904,11701 10904,11701 C 10904,11773 10875,11805 10820,11805 L 10820,11805 C 10769,11805 10748,11777 10748,11713 L 10748,11553 10748,11553 C 10748,11534 10750,11525 10760,11517 L 10760,11517 C 10765,11512 10772,11510 10796,11510 L 10796,11497 10634,11497 10634,11510 10634,11510 C 10667,11512 10675,11519 10675,11553 L 10675,11713 10675,11713 C 10675,11758 10684,11782 10713,11803 L 10713,11803 C 10734,11820 10765,11828 10801,11828 L 10801,11828 C 10837,11828 10868,11818 10889,11799 L 10889,11799 C 10910,11782 10923,11747 10923,11701 L 10923,11551 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 10999,11780 L 10999,11780 C 11006,11763 11011,11760 11028,11760 L 11081,11760 10970,11892 10972,11895 10972,11895 C 10978,11890 10983,11890 10989,11890 L 10989,11890 C 10996,11890 11008,11895 11025,11904 L 11025,11904 C 11045,11916 11056,11918 11066,11918 L 11066,11918 C 11085,11918 11099,11906 11099,11892 L 11099,11892 C 11099,11884 11094,11880 11087,11880 L 11087,11880 C 11081,11880 11075,11884 11075,11890 L 11075,11890 C 11075,11895 11075,11897 11077,11901 L 11077,11901 C 11081,11904 11081,11906 11081,11906 L 11081,11906 C 11081,11912 11075,11912 11070,11912 L 11070,11912 C 11061,11912 11056,11908 11047,11895 L 11047,11895 C 11030,11873 11023,11871 11004,11865 L 11107,11741 11107,11737 11004,11737 10994,11780 10999,11780 Z "/>
        <path fill="rgb(170,0,0)" stroke="none" d="M 11273,11849 L 11273,11849 C 11254,11873 11250,11878 11245,11878 L 11245,11878 C 11242,11878 11240,11875 11240,11871 L 11240,11871 C 11240,11868 11240,11868 11248,11844 L 11276,11737 11248,11737 11248,11737 C 11228,11792 11226,11796 11209,11822 L 11209,11822 C 11188,11858 11171,11875 11158,11875 L 11158,11875 C 11154,11875 11152,11873 11152,11868 L 11152,11868 C 11152,11865 11152,11865 11152,11863 L 11185,11734 11183,11734 11183,11734 C 11164,11737 11149,11739 11130,11741 L 11130,11749 11130,11749 C 11143,11749 11145,11749 11147,11751 L 11147,11751 C 11149,11751 11152,11754 11152,11756 L 11152,11756 C 11152,11760 11149,11768 11147,11780 L 11133,11830 11133,11830 C 11126,11856 11123,11868 11123,11875 L 11123,11875 C 11123,11887 11130,11895 11143,11895 L 11143,11895 C 11169,11895 11188,11875 11228,11805 L 11228,11805 C 11218,11844 11211,11871 11211,11878 L 11211,11878 C 11211,11887 11218,11895 11228,11895 L 11228,11895 C 11245,11895 11254,11887 11278,11852 L 11273,11849 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11765,11508 L 11671,11508 11671,11517 11671,11517 C 11686,11517 11691,11519 11696,11522 L 11696,11522 C 11703,11525 11705,11531 11705,11538 L 11705,11538 C 11705,11546 11694,11593 11669,11675 L 11669,11675 C 11667,11679 11667,11689 11665,11698 L 11665,11698 C 11656,11730 11648,11749 11639,11763 L 11639,11763 C 11620,11794 11594,11809 11560,11809 L 11560,11809 C 11519,11809 11493,11784 11493,11751 L 11493,11751 C 11493,11737 11510,11679 11541,11570 L 11541,11570 C 11541,11565 11543,11563 11543,11560 L 11543,11560 C 11553,11527 11560,11519 11594,11517 L 11594,11508 11462,11508 11462,11517 11462,11517 C 11496,11519 11500,11522 11500,11536 L 11500,11536 C 11500,11541 11498,11548 11496,11557 L 11472,11649 11472,11649 C 11457,11701 11450,11730 11450,11749 L 11450,11749 C 11450,11794 11496,11828 11555,11828 L 11555,11828 C 11617,11828 11658,11794 11677,11722 L 11718,11587 11718,11587 C 11733,11525 11737,11522 11765,11517 L 11765,11508 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11731,11890 L 11832,11890 11832,11890 C 11887,11890 11925,11861 11925,11820 L 11925,11820 C 11925,11805 11923,11794 11913,11784 L 11913,11784 C 11906,11777 11899,11773 11882,11765 L 11882,11765 C 11906,11760 11915,11756 11927,11747 L 11927,11747 C 11940,11737 11944,11724 11944,11711 L 11944,11711 C 11944,11677 11917,11658 11872,11658 L 11780,11658 11780,11662 11780,11662 C 11803,11666 11808,11668 11808,11677 L 11808,11677 C 11808,11685 11806,11692 11803,11701 L 11761,11858 11761,11858 C 11753,11880 11750,11882 11731,11884 L 11731,11890 Z M 11820,11773 L 11820,11773 C 11842,11773 11855,11773 11865,11777 L 11865,11777 C 11880,11782 11887,11799 11887,11818 L 11887,11818 C 11887,11856 11861,11880 11818,11880 L 11818,11880 C 11803,11880 11793,11875 11793,11865 L 11793,11865 C 11793,11861 11799,11844 11808,11816 L 11808,11816 C 11812,11799 11812,11792 11820,11773 Z M 11846,11677 L 11846,11677 C 11849,11670 11851,11668 11865,11668 L 11865,11668 C 11894,11668 11908,11679 11908,11706 L 11908,11706 C 11908,11728 11899,11741 11885,11751 L 11885,11751 C 11872,11758 11853,11760 11823,11760 L 11846,11677 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 7450,12658 L 7450,12658 C 7486,12656 7505,12652 7531,12637 L 7531,12637 C 7601,12596 7651,12520 7651,12444 L 7651,12444 C 7651,12379 7603,12333 7541,12333 L 7541,12333 C 7503,12333 7460,12353 7422,12389 L 7422,12389 C 7373,12432 7345,12489 7345,12547 L 7345,12547 C 7345,12585 7360,12618 7386,12637 L 7386,12637 C 7398,12647 7409,12652 7431,12656 L 7431,12656 C 7386,12694 7381,12697 7345,12723 L 7350,12731 7350,12731 C 7369,12720 7386,12716 7405,12716 L 7405,12716 C 7414,12716 7428,12718 7450,12725 L 7450,12725 C 7479,12733 7505,12737 7522,12737 L 7522,12737 C 7548,12737 7582,12725 7605,12706 L 7605,12706 C 7617,12697 7622,12692 7634,12673 L 7629,12669 7629,12669 C 7601,12697 7582,12706 7548,12706 L 7548,12706 C 7536,12706 7524,12703 7488,12694 L 7488,12694 C 7465,12690 7441,12684 7439,12684 L 7439,12684 7435,12684 7424,12684 7450,12658 Z M 7538,12350 L 7538,12350 C 7576,12350 7601,12376 7601,12423 L 7601,12423 C 7601,12472 7576,12541 7548,12587 L 7548,12587 C 7522,12622 7490,12641 7458,12641 L 7458,12641 C 7419,12641 7395,12613 7395,12562 L 7395,12562 C 7395,12517 7419,12449 7448,12406 L 7448,12406 C 7474,12367 7505,12350 7538,12350 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 7935,12489 L 7847,12489 7847,12494 7847,12494 C 7868,12496 7873,12500 7873,12511 L 7873,12511 C 7873,12515 7870,12522 7868,12532 L 7851,12592 7749,12592 7768,12520 7768,12520 C 7775,12504 7784,12496 7803,12494 L 7803,12489 7708,12489 7708,12494 7708,12494 C 7730,12496 7734,12498 7734,12511 L 7734,12511 C 7734,12515 7734,12522 7732,12532 L 7687,12690 7687,12690 C 7681,12711 7679,12714 7657,12716 L 7657,12723 7746,12723 7746,12716 7746,12716 C 7725,12714 7719,12711 7719,12701 L 7719,12701 C 7719,12699 7719,12694 7722,12692 L 7744,12606 7847,12606 7824,12690 7824,12690 C 7817,12709 7811,12714 7787,12716 L 7787,12723 7884,12723 7884,12716 7884,12716 C 7863,12714 7858,12711 7858,12701 L 7858,12701 C 7858,12697 7858,12697 7858,12692 L 7905,12520 7905,12520 C 7911,12500 7916,12498 7935,12494 L 7935,12489 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 8687,12496 L 8687,12496 C 8694,12496 8703,12496 8703,12487 L 8703,12487 C 8703,12477 8694,12477 8687,12477 L 8403,12477 8403,12477 C 8395,12477 8386,12477 8386,12487 L 8386,12487 C 8386,12496 8395,12496 8403,12496 L 8687,12496 Z M 8687,12587 L 8687,12587 C 8694,12587 8703,12587 8703,12577 L 8703,12577 C 8703,12568 8694,12568 8687,12568 L 8403,12568 8403,12568 C 8395,12568 8386,12568 8386,12577 L 8386,12577 C 8386,12587 8395,12587 8403,12587 L 8687,12587 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9200,12630 L 9200,12630 C 9209,12647 9228,12656 9252,12656 L 9252,12656 C 9307,12656 9367,12594 9378,12525 L 9378,12525 C 9390,12455 9354,12408 9295,12408 L 9295,12408 C 9281,12408 9271,12408 9256,12415 L 9256,12415 C 9238,12425 9219,12438 9204,12455 L 9204,12455 C 9187,12472 9181,12487 9175,12522 L 9145,12709 9145,12709 C 9140,12725 9138,12737 9130,12754 L 9175,12754 9175,12754 C 9181,12740 9181,12737 9187,12701 L 9200,12630 Z M 9219,12498 L 9221,12489 9221,12489 C 9224,12472 9228,12463 9238,12451 L 9238,12451 C 9247,12442 9256,12434 9266,12434 L 9266,12434 C 9311,12434 9341,12487 9331,12547 L 9331,12547 C 9324,12599 9290,12632 9252,12632 L 9252,12632 C 9233,12632 9213,12620 9209,12601 L 9209,12601 C 9207,12594 9207,12592 9209,12577 L 9219,12498 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9551,12682 L 9551,12682 C 9546,12688 9543,12690 9540,12692 L 9540,12692 C 9531,12703 9527,12706 9525,12706 L 9525,12706 C 9519,12706 9517,12706 9517,12701 L 9517,12701 C 9517,12697 9534,12635 9551,12573 L 9551,12573 C 9551,12570 9551,12570 9553,12566 L 9551,12566 9529,12568 9527,12568 9525,12585 9525,12585 C 9519,12573 9510,12566 9495,12566 L 9495,12566 C 9448,12566 9393,12630 9393,12688 L 9393,12688 C 9393,12711 9407,12725 9429,12725 L 9429,12725 C 9452,12725 9469,12714 9500,12671 L 9500,12671 C 9493,12697 9491,12701 9491,12711 L 9491,12711 C 9491,12720 9495,12725 9505,12725 L 9505,12725 C 9519,12725 9529,12718 9555,12688 L 9551,12682 Z M 9495,12573 L 9495,12573 C 9510,12573 9517,12582 9517,12594 L 9517,12594 C 9517,12625 9498,12665 9474,12692 L 9474,12692 C 9465,12701 9452,12709 9443,12709 L 9443,12709 C 9431,12709 9421,12699 9421,12682 L 9421,12682 C 9421,12663 9436,12625 9450,12603 L 9450,12603 C 9465,12582 9481,12573 9495,12573 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9643,12682 L 9643,12682 C 9636,12692 9634,12697 9629,12699 L 9629,12699 C 9622,12706 9617,12709 9615,12709 L 9615,12709 C 9613,12709 9608,12706 9608,12703 L 9608,12703 C 9608,12699 9610,12694 9613,12688 L 9613,12688 C 9613,12688 9615,12684 9615,12682 L 9615,12680 9645,12566 9645,12566 9645,12566 C 9608,12573 9602,12573 9589,12573 L 9589,12579 9589,12579 C 9608,12579 9610,12579 9610,12587 L 9610,12587 C 9610,12592 9610,12596 9608,12603 L 9591,12665 9591,12665 C 9583,12688 9581,12699 9581,12706 L 9581,12706 C 9581,12718 9589,12725 9598,12725 L 9598,12725 C 9615,12725 9629,12716 9649,12684 L 9643,12682 Z M 9641,12489 L 9641,12489 C 9632,12489 9624,12496 9624,12508 L 9624,12508 C 9624,12517 9632,12527 9641,12527 L 9641,12527 C 9651,12527 9660,12517 9660,12508 L 9660,12508 C 9660,12498 9651,12489 9641,12489 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9705,12723 L 9705,12723 C 9724,12661 9732,12647 9748,12618 L 9748,12618 C 9760,12599 9770,12587 9775,12587 L 9775,12587 C 9777,12587 9779,12590 9782,12592 L 9782,12592 C 9784,12599 9786,12601 9794,12601 L 9794,12601 C 9805,12601 9810,12594 9810,12582 L 9810,12582 C 9810,12573 9803,12566 9794,12566 L 9794,12566 C 9786,12566 9777,12570 9767,12579 L 9767,12579 C 9751,12594 9737,12615 9732,12630 L 9726,12641 9746,12566 9746,12566 9746,12566 C 9720,12570 9715,12570 9689,12575 L 9689,12579 9689,12579 C 9698,12577 9698,12577 9701,12577 L 9701,12577 C 9711,12577 9715,12582 9715,12590 L 9715,12590 C 9715,12594 9715,12594 9707,12618 L 9679,12723 9705,12723 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10235,12429 L 10252,12333 10243,12333 10243,12333 C 10239,12344 10235,12346 10226,12346 L 10226,12346 C 10221,12346 10216,12344 10207,12344 L 10207,12344 C 10185,12336 10166,12333 10149,12333 L 10149,12333 C 10049,12333 9956,12429 9956,12534 L 9956,12534 C 9956,12609 10008,12658 10080,12658 L 10080,12658 C 10130,12658 10168,12637 10211,12590 L 10202,12582 10202,12582 C 10159,12622 10132,12637 10094,12637 L 10094,12637 C 10040,12637 10011,12601 10011,12541 L 10011,12541 C 10011,12485 10032,12427 10070,12389 L 10070,12389 C 10092,12365 10123,12350 10154,12350 L 10154,12350 C 10197,12350 10221,12376 10228,12427 L 10235,12429 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10504,12489 L 10417,12489 10417,12494 10417,12494 C 10438,12496 10440,12500 10440,12511 L 10440,12511 C 10440,12515 10440,12522 10438,12532 L 10421,12592 10318,12592 10338,12520 10338,12520 C 10345,12504 10352,12496 10374,12494 L 10374,12489 10278,12489 10278,12494 10278,12494 C 10299,12496 10305,12498 10305,12511 L 10305,12511 C 10305,12515 10305,12522 10303,12532 L 10256,12690 10256,12690 C 10250,12711 10247,12714 10228,12716 L 10228,12723 10316,12723 10316,12716 10316,12716 C 10295,12714 10290,12711 10290,12701 L 10290,12701 C 10290,12699 10290,12694 10292,12692 L 10314,12606 10417,12606 10393,12690 10393,12690 C 10388,12709 10380,12714 10357,12716 L 10357,12723 10455,12723 10455,12716 10455,12716 C 10433,12714 10427,12711 10427,12701 L 10427,12701 C 10427,12697 10427,12697 10429,12692 L 10474,12520 10474,12520 C 10481,12500 10483,12498 10504,12494 L 10504,12489 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 10940,12429 L 10955,12333 10946,12333 10946,12333 C 10942,12344 10937,12346 10927,12346 L 10927,12346 C 10925,12346 10918,12344 10908,12344 L 10908,12344 C 10887,12336 10868,12333 10853,12333 L 10853,12333 C 10750,12333 10660,12429 10660,12534 L 10660,12534 C 10660,12609 10710,12658 10784,12658 L 10784,12658 C 10831,12658 10870,12637 10913,12590 L 10906,12582 10906,12582 C 10863,12622 10835,12637 10796,12637 L 10796,12637 C 10743,12637 10713,12601 10713,12541 L 10713,12541 C 10713,12485 10737,12427 10772,12389 L 10772,12389 C 10796,12365 10825,12350 10856,12350 L 10856,12350 C 10901,12350 10925,12376 10930,12427 L 10940,12429 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 10985,12494 L 10985,12494 C 11006,12496 11011,12500 11011,12511 L 11011,12511 C 11011,12515 11008,12522 11006,12537 L 10963,12690 10963,12690 C 10955,12711 10953,12714 10934,12716 L 10934,12723 11021,12723 11021,12716 11021,12716 C 10999,12714 10996,12711 10996,12699 L 10996,12699 C 10996,12697 10996,12692 11002,12680 L 11021,12611 11021,12611 C 11028,12613 11037,12613 11054,12613 L 11054,12613 C 11083,12613 11107,12606 11121,12596 L 11121,12596 C 11139,12582 11149,12562 11149,12541 L 11149,12541 C 11149,12508 11123,12489 11073,12489 L 10985,12489 10985,12494 Z M 11049,12511 L 11049,12511 C 11051,12500 11054,12498 11066,12498 L 11066,12498 C 11081,12498 11092,12504 11099,12508 L 11099,12508 C 11109,12515 11113,12525 11113,12541 L 11113,12541 C 11113,12566 11104,12582 11090,12592 L 11090,12592 C 11077,12596 11064,12601 11042,12601 L 11042,12601 C 11034,12601 11032,12599 11023,12599 L 11049,12511 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 11385,12816 L 11476,12816 11476,12797 11404,12797 11404,12265 11476,12265 11476,12245 11385,12245 11385,12816 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11667,12324 L 11667,12324 C 11650,12324 11629,12331 11609,12346 L 11609,12346 C 11572,12372 11545,12425 11536,12491 L 11536,12491 C 11524,12553 11532,12601 11555,12630 L 11555,12630 C 11572,12647 11594,12656 11613,12656 L 11613,12656 C 11631,12656 11650,12649 11671,12635 L 11671,12635 C 11708,12609 11733,12558 11744,12494 L 11744,12494 C 11756,12427 11748,12379 11724,12353 L 11724,12353 C 11710,12333 11688,12324 11667,12324 Z M 11694,12500 L 11694,12500 C 11684,12556 11671,12587 11656,12613 L 11656,12613 C 11643,12628 11626,12637 11615,12637 L 11615,12637 C 11603,12637 11590,12628 11584,12613 L 11584,12613 C 11575,12587 11575,12556 11581,12500 L 11694,12500 Z M 11586,12474 L 11586,12474 C 11596,12425 11607,12393 11624,12367 L 11624,12367 C 11637,12353 11653,12344 11665,12344 L 11665,12344 C 11677,12344 11691,12353 11696,12367 L 11696,12367 C 11705,12393 11708,12425 11699,12474 L 11586,12474 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11765,12611 L 11765,12611 C 11772,12594 11777,12592 11793,12592 L 11846,12592 11733,12723 11739,12725 11739,12725 C 11744,12723 11748,12720 11753,12720 L 11753,12720 C 11763,12720 11774,12725 11791,12735 L 11791,12735 C 11810,12746 11823,12752 11832,12752 L 11832,12752 C 11849,12752 11865,12737 11865,12723 L 11865,12723 C 11865,12716 11861,12711 11853,12711 L 11853,12711 C 11846,12711 11842,12716 11842,12723 L 11842,12723 C 11842,12725 11842,12728 11844,12733 L 11844,12733 C 11846,12735 11846,12737 11846,12737 L 11846,12737 C 11846,12742 11842,12742 11836,12742 L 11836,12742 C 11827,12742 11823,12740 11810,12725 L 11810,12725 C 11797,12706 11789,12701 11767,12697 L 11870,12573 11870,12570 11770,12570 11758,12611 11765,12611 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12039,12680 L 12039,12680 C 12020,12703 12015,12709 12009,12709 L 12009,12709 C 12006,12709 12006,12706 12006,12701 L 12006,12701 C 12006,12699 12006,12699 12013,12675 L 12039,12568 12013,12568 12013,12568 C 11994,12622 11992,12630 11975,12654 L 11975,12654 C 11953,12690 11936,12706 11925,12706 L 11925,12706 C 11921,12706 11917,12703 11917,12699 L 11917,12699 C 11917,12697 11917,12697 11917,12694 L 11949,12566 11949,12566 11949,12566 C 11927,12570 11915,12573 11894,12575 L 11894,12579 11894,12579 C 11908,12579 11908,12579 11913,12582 L 11913,12582 C 11915,12582 11917,12585 11917,12587 L 11917,12587 C 11917,12592 11915,12599 11911,12611 L 11899,12663 11899,12663 C 11891,12688 11889,12699 11889,12706 L 11889,12706 C 11889,12718 11896,12725 11908,12725 L 11908,12725 C 11934,12725 11953,12706 11994,12637 L 11994,12637 C 11983,12675 11977,12701 11977,12709 L 11977,12709 C 11977,12718 11985,12725 11994,12725 L 11994,12725 C 12011,12725 12020,12718 12045,12682 L 12039,12680 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 12453,12541 L 12453,12541 C 12460,12541 12469,12541 12469,12532 L 12469,12532 C 12469,12522 12460,12522 12453,12522 L 12195,12522 12195,12522 C 12188,12522 12178,12522 12178,12532 L 12178,12532 C 12178,12541 12188,12541 12195,12541 L 12453,12541 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12875,12338 L 12622,12338 12603,12412 12610,12415 12610,12415 C 12637,12365 12650,12355 12725,12357 L 12655,12609 12655,12609 C 12648,12632 12637,12641 12605,12644 L 12605,12652 12744,12652 12744,12644 12744,12644 C 12734,12641 12727,12641 12725,12641 L 12725,12641 C 12705,12639 12701,12635 12701,12620 L 12701,12620 C 12701,12615 12701,12609 12705,12594 L 12772,12357 12798,12357 12798,12357 C 12832,12357 12849,12367 12849,12395 L 12849,12395 C 12849,12401 12846,12408 12846,12417 L 12853,12417 12875,12338 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12970,12560 L 12985,12489 12975,12489 12975,12489 C 12970,12496 12968,12498 12960,12498 L 12960,12498 C 12956,12498 12951,12496 12944,12494 L 12944,12494 C 12937,12491 12925,12489 12913,12489 L 12913,12489 C 12877,12489 12849,12513 12849,12549 L 12849,12549 C 12849,12568 12855,12577 12877,12601 L 12877,12601 C 12879,12603 12885,12609 12891,12615 L 12891,12615 C 12896,12622 12902,12628 12904,12630 L 12904,12630 C 12920,12649 12925,12658 12925,12673 L 12925,12673 C 12925,12699 12906,12720 12879,12720 L 12879,12720 C 12851,12720 12827,12694 12827,12661 L 12827,12661 C 12827,12658 12827,12656 12829,12654 L 12820,12654 12808,12733 12815,12733 12815,12733 C 12817,12723 12823,12720 12829,12720 L 12829,12720 C 12832,12720 12839,12720 12849,12725 L 12849,12725 C 12863,12731 12875,12733 12885,12733 L 12885,12733 C 12925,12733 12956,12701 12956,12661 L 12956,12661 C 12956,12639 12949,12625 12915,12592 L 12915,12592 C 12885,12560 12882,12553 12882,12537 L 12882,12537 C 12882,12515 12896,12500 12920,12500 L 12920,12500 C 12934,12500 12944,12506 12951,12515 L 12951,12515 C 12960,12522 12964,12534 12964,12558 L 12970,12560 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 13107,12816 L 13107,12245 13013,12245 13013,12265 13088,12265 13088,12797 13013,12797 13013,12816 13107,12816 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 13660,12338 L 13567,12338 13567,12348 13567,12348 C 13582,12348 13586,12350 13591,12353 L 13591,12353 C 13595,12357 13601,12363 13601,12370 L 13601,12370 C 13601,12376 13586,12425 13565,12506 L 13565,12506 C 13562,12513 13560,12520 13558,12530 L 13558,12530 C 13550,12560 13543,12579 13531,12596 L 13531,12596 C 13514,12625 13488,12639 13455,12639 L 13455,12639 C 13415,12639 13388,12618 13388,12585 L 13388,12585 C 13388,12568 13402,12511 13436,12401 L 13436,12401 C 13436,12395 13436,12393 13438,12391 L 13438,12391 C 13447,12357 13455,12350 13486,12348 L 13486,12338 13357,12338 13357,12348 13357,12348 C 13388,12350 13396,12353 13396,12367 L 13396,12367 C 13396,12372 13393,12379 13390,12389 L 13366,12479 13366,12479 C 13353,12532 13345,12560 13345,12582 L 13345,12582 C 13345,12628 13388,12658 13450,12658 L 13450,12658 C 13512,12658 13550,12625 13571,12553 L 13612,12419 13612,12419 C 13629,12357 13631,12353 13660,12348 L 13660,12338 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 13624,12723 L 13727,12723 13727,12723 C 13782,12723 13819,12692 13819,12652 L 13819,12652 C 13819,12637 13817,12625 13808,12618 L 13808,12618 C 13800,12609 13794,12603 13774,12596 L 13774,12596 C 13800,12592 13810,12587 13823,12577 L 13823,12577 C 13832,12568 13839,12556 13839,12541 L 13839,12541 C 13839,12508 13813,12489 13768,12489 L 13674,12489 13674,12494 13674,12494 C 13695,12496 13703,12498 13703,12511 L 13703,12511 C 13703,12515 13701,12522 13698,12532 L 13655,12690 13655,12690 C 13648,12711 13646,12714 13624,12716 L 13624,12723 Z M 13712,12603 L 13712,12603 C 13736,12603 13751,12606 13757,12609 L 13757,12609 C 13772,12615 13782,12630 13782,12649 L 13782,12649 C 13782,12688 13755,12711 13712,12711 L 13712,12711 C 13698,12711 13689,12706 13689,12697 L 13689,12697 C 13689,12692 13693,12675 13701,12647 L 13701,12647 C 13706,12630 13708,12622 13712,12603 Z M 13742,12511 L 13742,12511 C 13742,12500 13746,12498 13760,12498 L 13760,12498 C 13789,12498 13804,12513 13804,12537 L 13804,12537 C 13804,12558 13794,12575 13777,12582 L 13777,12582 C 13765,12590 13748,12592 13717,12592 L 13742,12511 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 7939,13172 L 7704,13172 7704,13180 7704,13180 C 7732,13182 7739,13186 7739,13198 L 7739,13198 C 7739,13203 7736,13220 7734,13229 L 7677,13439 7677,13439 C 7668,13466 7665,13471 7636,13475 L 7636,13482 7877,13482 7909,13406 7901,13401 7901,13401 C 7877,13432 7865,13445 7847,13454 L 7847,13454 C 7828,13460 7796,13466 7760,13466 L 7760,13466 C 7732,13466 7722,13460 7722,13451 L 7722,13451 C 7722,13445 7727,13422 7739,13379 L 7739,13379 C 7744,13360 7749,13344 7753,13325 L 7753,13325 C 7770,13327 7784,13327 7792,13327 L 7792,13327 C 7811,13327 7822,13330 7828,13334 L 7828,13334 C 7830,13336 7832,13341 7832,13349 L 7832,13349 C 7832,13358 7830,13363 7828,13375 L 7837,13377 7870,13265 7860,13265 7860,13265 C 7843,13306 7839,13308 7796,13308 L 7796,13308 C 7789,13308 7775,13310 7758,13310 L 7789,13201 7789,13201 C 7792,13189 7798,13186 7824,13186 L 7824,13186 C 7899,13186 7916,13193 7916,13222 L 7916,13222 C 7916,13227 7916,13234 7916,13244 L 7925,13244 7939,13172 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 8687,13327 L 8687,13327 C 8694,13327 8703,13327 8703,13317 L 8703,13317 C 8703,13308 8694,13308 8687,13308 L 8403,13308 8403,13308 C 8395,13308 8386,13308 8386,13317 L 8386,13317 C 8386,13327 8395,13327 8403,13327 L 8687,13327 Z M 8687,13418 L 8687,13418 C 8694,13418 8703,13418 8703,13409 L 8703,13409 C 8703,13398 8694,13398 8687,13398 L 8403,13398 8403,13398 C 8395,13398 8386,13398 8386,13409 L 8386,13409 C 8386,13418 8395,13418 8403,13418 L 8687,13418 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9200,13460 L 9200,13460 C 9209,13477 9228,13488 9252,13488 L 9252,13488 C 9307,13488 9367,13425 9378,13356 L 9378,13356 C 9390,13287 9354,13238 9295,13238 L 9295,13238 C 9281,13238 9271,13242 9256,13246 L 9256,13246 C 9238,13257 9219,13270 9204,13287 L 9204,13287 C 9187,13304 9181,13319 9175,13353 L 9145,13539 9145,13539 C 9140,13559 9138,13569 9130,13588 L 9175,13588 9175,13588 C 9181,13571 9181,13571 9187,13533 L 9200,13460 Z M 9219,13330 L 9221,13323 9221,13323 C 9224,13304 9228,13293 9238,13282 L 9238,13282 C 9247,13272 9256,13265 9266,13265 L 9266,13265 C 9311,13265 9341,13317 9331,13379 L 9331,13379 C 9324,13430 9290,13466 9252,13466 L 9252,13466 C 9233,13466 9213,13451 9209,13432 L 9209,13432 C 9207,13425 9207,13422 9209,13409 L 9219,13330 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9551,13513 L 9551,13513 C 9546,13518 9543,13520 9540,13523 L 9540,13523 C 9531,13535 9527,13537 9525,13537 L 9525,13537 C 9519,13537 9517,13537 9517,13535 L 9517,13535 C 9517,13528 9534,13466 9551,13404 L 9551,13404 C 9551,13401 9551,13401 9553,13396 L 9551,13396 9529,13398 9527,13398 9525,13415 9525,13415 C 9519,13404 9510,13396 9495,13396 L 9495,13396 C 9448,13396 9393,13460 9393,13518 L 9393,13518 C 9393,13542 9407,13556 9429,13556 L 9429,13556 C 9452,13556 9469,13544 9500,13501 L 9500,13501 C 9493,13530 9491,13533 9491,13542 L 9491,13542 C 9491,13552 9495,13556 9505,13556 L 9505,13556 C 9519,13556 9529,13550 9555,13518 L 9551,13513 Z M 9495,13404 L 9495,13404 C 9510,13404 9517,13413 9517,13425 L 9517,13425 C 9517,13456 9498,13497 9474,13523 L 9474,13523 C 9465,13533 9452,13539 9443,13539 L 9443,13539 C 9431,13539 9421,13530 9421,13513 L 9421,13513 C 9421,13494 9436,13456 9450,13435 L 9450,13435 C 9465,13413 9481,13404 9495,13404 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9643,13513 L 9643,13513 C 9636,13523 9634,13528 9629,13530 L 9629,13530 C 9622,13537 9617,13539 9615,13539 L 9615,13539 C 9613,13539 9608,13537 9608,13535 L 9608,13535 C 9608,13533 9610,13525 9613,13518 L 9613,13518 C 9613,13518 9615,13516 9615,13513 L 9615,13511 9645,13396 9645,13396 9645,13396 C 9608,13404 9602,13404 9589,13404 L 9589,13411 9589,13411 C 9608,13411 9610,13413 9610,13418 L 9610,13418 C 9610,13422 9610,13428 9608,13435 L 9591,13499 9591,13499 C 9583,13518 9581,13530 9581,13537 L 9581,13537 C 9581,13550 9589,13556 9598,13556 L 9598,13556 C 9615,13556 9629,13547 9649,13516 L 9643,13513 Z M 9641,13319 L 9641,13319 C 9632,13319 9624,13327 9624,13339 L 9624,13339 C 9624,13351 9632,13358 9641,13358 L 9641,13358 C 9651,13358 9660,13349 9660,13339 L 9660,13339 C 9660,13330 9651,13319 9641,13319 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9705,13554 L 9705,13554 C 9724,13492 9732,13477 9748,13449 L 9748,13449 C 9760,13430 9770,13418 9775,13418 L 9775,13418 C 9777,13418 9779,13420 9782,13425 L 9782,13425 C 9784,13430 9786,13432 9794,13432 L 9794,13432 C 9805,13432 9810,13425 9810,13415 L 9810,13415 C 9810,13404 9803,13396 9794,13396 L 9794,13396 C 9786,13396 9777,13401 9767,13411 L 9767,13411 C 9751,13425 9737,13447 9732,13460 L 9726,13475 9746,13396 9746,13396 9746,13396 C 9720,13401 9715,13401 9689,13406 L 9689,13411 9689,13411 C 9698,13411 9698,13411 9701,13411 L 9701,13411 C 9711,13411 9715,13413 9715,13420 L 9715,13420 C 9715,13425 9715,13425 9707,13449 L 9679,13554 9705,13554 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10235,13261 L 10252,13167 10243,13167 10243,13167 C 10239,13174 10235,13176 10226,13176 L 10226,13176 C 10221,13176 10216,13174 10207,13174 L 10207,13174 C 10185,13167 10166,13165 10149,13165 L 10149,13165 C 10049,13165 9956,13261 9956,13366 L 9956,13366 C 9956,13439 10008,13490 10080,13490 L 10080,13490 C 10130,13490 10168,13471 10211,13420 L 10202,13413 10202,13413 C 10159,13454 10132,13468 10094,13468 L 10094,13468 C 10040,13468 10011,13432 10011,13372 L 10011,13372 C 10011,13315 10032,13257 10070,13220 L 10070,13220 C 10092,13195 10123,13182 10154,13182 L 10154,13182 C 10197,13182 10221,13208 10228,13261 L 10235,13261 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10457,13319 L 10280,13319 10280,13325 10280,13325 C 10303,13327 10307,13330 10307,13341 L 10307,13341 C 10307,13344 10305,13356 10305,13363 L 10259,13520 10259,13520 C 10254,13542 10250,13544 10230,13547 L 10230,13554 10412,13554 10433,13494 10429,13492 10429,13492 C 10412,13516 10402,13525 10386,13533 L 10386,13533 C 10374,13537 10350,13542 10321,13542 L 10321,13542 C 10303,13542 10292,13537 10292,13530 L 10292,13530 C 10292,13525 10297,13509 10307,13477 L 10307,13477 C 10312,13460 10314,13449 10318,13437 L 10318,13437 C 10331,13437 10340,13437 10345,13437 L 10345,13437 C 10359,13437 10369,13439 10374,13441 L 10374,13441 C 10376,13445 10376,13447 10376,13454 L 10376,13454 C 10376,13460 10376,13463 10374,13473 L 10380,13475 10405,13392 10397,13389 10397,13389 C 10386,13420 10380,13422 10350,13425 L 10350,13425 C 10345,13425 10333,13425 10321,13425 L 10345,13341 10345,13341 C 10348,13334 10350,13332 10371,13332 L 10371,13332 C 10427,13332 10438,13336 10438,13358 L 10438,13358 C 10438,13363 10438,13368 10438,13375 L 10446,13375 10457,13319 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 10710,13647 L 10801,13647 10801,13627 10729,13627 10729,13095 10801,13095 10801,13077 10710,13077 10710,13647 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 10996,13573 L 10989,13573 10989,13573 C 10972,13573 10961,13569 10963,13559 L 10963,13559 C 10963,13559 10963,13556 10963,13554 L 11040,13279 11006,13279 10999,13301 10999,13301 C 10992,13279 10983,13272 10963,13272 L 10963,13272 C 10899,13272 10822,13360 10822,13432 L 10822,13432 C 10822,13466 10842,13488 10872,13488 L 10872,13488 C 10906,13488 10927,13471 10970,13409 L 10927,13550 10927,13550 C 10921,13569 10913,13571 10882,13573 L 10882,13580 10996,13580 10996,13573 Z M 10963,13282 L 10963,13282 C 10980,13282 10992,13296 10992,13310 L 10992,13310 C 10992,13351 10961,13418 10927,13447 L 10927,13447 C 10915,13456 10901,13460 10891,13460 L 10891,13460 C 10875,13460 10863,13447 10863,13425 L 10863,13425 C 10863,13389 10889,13336 10921,13306 L 10921,13306 C 10934,13291 10949,13282 10963,13282 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11216,13392 L 11231,13319 11220,13319 11220,13319 C 11216,13327 11214,13330 11207,13330 L 11207,13330 C 11201,13330 11197,13327 11190,13325 L 11190,13325 C 11183,13323 11171,13319 11158,13319 L 11158,13319 C 11123,13319 11096,13344 11096,13379 L 11096,13379 C 11096,13398 11102,13409 11123,13432 L 11123,13432 C 11126,13435 11130,13439 11137,13447 L 11137,13447 C 11143,13454 11147,13460 11149,13463 L 11149,13463 C 11166,13480 11171,13490 11171,13503 L 11171,13503 C 11171,13533 11152,13552 11126,13552 L 11126,13552 C 11096,13552 11073,13525 11073,13492 L 11073,13492 C 11073,13490 11073,13488 11075,13484 L 11068,13484 11056,13563 11061,13563 11061,13563 C 11064,13554 11068,13552 11075,13552 L 11075,13552 C 11077,13552 11085,13554 11094,13556 L 11094,13556 C 11111,13563 11121,13563 11130,13563 L 11130,13563 C 11171,13563 11201,13533 11201,13494 L 11201,13494 C 11201,13471 11195,13456 11164,13422 L 11164,13422 C 11130,13392 11128,13387 11128,13368 L 11128,13368 C 11128,13347 11143,13332 11166,13332 L 11166,13332 C 11180,13332 11190,13336 11197,13347 L 11197,13347 C 11207,13353 11209,13366 11209,13389 L 11216,13392 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 11629,13372 L 11629,13372 C 11637,13372 11646,13372 11646,13363 L 11646,13363 C 11646,13353 11637,13353 11629,13353 L 11372,13353 11372,13353 C 11364,13353 11355,13353 11355,13363 L 11355,13363 C 11355,13372 11364,13372 11372,13372 L 11629,13372 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 11936,13573 L 11930,13573 11930,13573 C 11913,13573 11902,13569 11904,13559 L 11904,13559 C 11904,13559 11904,13556 11904,13554 L 11979,13279 11947,13279 11940,13301 11940,13301 C 11932,13279 11923,13272 11904,13272 L 11904,13272 C 11839,13272 11763,13360 11763,13432 L 11763,13432 C 11763,13466 11782,13488 11812,13488 L 11812,13488 C 11846,13488 11868,13471 11911,13409 L 11868,13550 11868,13550 C 11861,13569 11853,13571 11823,13573 L 11823,13580 11936,13580 11936,13573 Z M 11904,13282 L 11904,13282 C 11921,13282 11932,13296 11932,13310 L 11932,13310 C 11932,13351 11902,13418 11868,13447 L 11868,13447 C 11855,13456 11842,13460 11832,13460 L 11832,13460 C 11815,13460 11803,13447 11803,13425 L 11803,13425 C 11803,13389 11829,13336 11861,13306 L 11861,13306 C 11874,13291 11889,13282 11904,13282 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12018,13445 L 12018,13445 C 12026,13425 12030,13422 12047,13422 L 12099,13422 11989,13554 11992,13559 11992,13559 C 11996,13554 12002,13552 12009,13552 L 12009,13552 C 12015,13552 12028,13556 12045,13565 L 12045,13565 C 12064,13578 12075,13582 12085,13582 L 12085,13582 C 12104,13582 12118,13569 12118,13554 L 12118,13554 C 12118,13547 12113,13542 12107,13542 L 12107,13542 C 12099,13542 12094,13547 12094,13554 L 12094,13554 C 12094,13556 12094,13561 12097,13563 L 12097,13563 C 12099,13565 12099,13569 12099,13569 L 12099,13569 C 12099,13573 12094,13576 12090,13576 L 12090,13576 C 12080,13576 12075,13573 12064,13556 L 12064,13556 C 12049,13537 12042,13533 12023,13528 L 12126,13404 12126,13401 12023,13401 12013,13441 12018,13445 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12293,13511 L 12293,13511 C 12274,13535 12269,13539 12263,13539 L 12263,13539 C 12261,13539 12259,13537 12259,13533 L 12259,13533 C 12259,13533 12259,13533 12266,13507 L 12295,13398 12266,13398 12266,13398 C 12248,13454 12244,13460 12228,13488 L 12228,13488 C 12207,13520 12190,13537 12178,13537 L 12178,13537 C 12173,13537 12171,13535 12171,13530 L 12171,13530 C 12171,13528 12171,13528 12171,13525 L 12204,13396 12201,13396 12201,13396 C 12182,13401 12169,13404 12150,13406 L 12150,13411 12150,13411 C 12161,13411 12163,13411 12166,13413 L 12166,13413 C 12169,13413 12171,13415 12171,13418 L 12171,13418 C 12171,13422 12169,13430 12166,13445 L 12152,13494 12152,13494 C 12145,13518 12142,13530 12142,13537 L 12142,13537 C 12142,13550 12150,13556 12161,13556 L 12161,13556 C 12188,13556 12207,13537 12248,13471 L 12248,13471 C 12238,13507 12231,13533 12231,13539 L 12231,13539 C 12231,13550 12238,13556 12248,13556 L 12248,13556 C 12263,13556 12274,13550 12297,13516 L 12293,13511 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 12428,13647 L 12428,13077 12338,13077 12338,13095 12409,13095 12409,13627 12338,13627 12338,13647 12428,13647 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12982,13172 L 12889,13172 12889,13180 12889,13180 C 12904,13182 12908,13182 12913,13186 L 12913,13186 C 12917,13189 12923,13195 12923,13201 L 12923,13201 C 12923,13208 12908,13257 12887,13336 L 12887,13336 C 12885,13344 12885,13351 12882,13360 L 12882,13360 C 12872,13392 12866,13411 12855,13428 L 12855,13428 C 12836,13456 12810,13471 12776,13471 L 12776,13471 C 12736,13471 12710,13449 12710,13415 L 12710,13415 C 12710,13398 12725,13341 12758,13231 L 12758,13231 C 12758,13227 12758,13225 12761,13222 L 12761,13222 C 12770,13189 12776,13182 12810,13180 L 12810,13172 12680,13172 12680,13180 12680,13180 C 12710,13182 12718,13184 12718,13198 L 12718,13198 C 12718,13203 12714,13212 12712,13220 L 12689,13310 12689,13310 C 12674,13363 12667,13394 12667,13413 L 12667,13413 C 12667,13458 12710,13490 12772,13490 L 12772,13490 C 12834,13490 12872,13456 12894,13385 L 12934,13251 12934,13251 C 12951,13189 12954,13186 12982,13180 L 12982,13172 Z "/>
        <path fill="rgb(0,138,184)" stroke="none" d="M 12947,13554 L 13049,13554 13049,13554 C 13103,13554 13142,13523 13142,13482 L 13142,13482 C 13142,13468 13140,13456 13131,13449 L 13131,13449 C 13123,13439 13116,13435 13097,13428 L 13097,13428 C 13123,13422 13133,13418 13144,13409 L 13144,13409 C 13154,13398 13161,13387 13161,13372 L 13161,13372 C 13161,13339 13135,13319 13090,13319 L 12996,13319 12996,13325 12996,13325 C 13018,13327 13026,13330 13026,13341 L 13026,13341 C 13026,13347 13022,13356 13020,13363 L 12977,13520 12977,13520 C 12970,13542 12968,13544 12947,13547 L 12947,13554 Z M 13035,13435 L 13035,13435 C 13058,13435 13073,13437 13080,13439 L 13080,13439 C 13094,13447 13103,13460 13103,13480 L 13103,13480 C 13103,13518 13078,13542 13035,13542 L 13035,13542 C 13020,13542 13011,13537 13011,13528 L 13011,13528 C 13011,13523 13016,13507 13022,13477 L 13022,13477 C 13030,13460 13030,13454 13035,13435 Z M 13063,13341 L 13063,13341 C 13063,13334 13069,13330 13082,13330 L 13082,13330 C 13111,13330 13125,13344 13125,13370 L 13125,13370 C 13125,13389 13116,13406 13101,13413 L 13101,13413 C 13090,13420 13071,13425 13039,13425 L 13063,13341 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 7533,14320 L 7533,14320 C 7569,14318 7589,14313 7615,14299 L 7615,14299 C 7684,14260 7734,14182 7734,14108 L 7734,14108 C 7734,14044 7687,13995 7625,13995 L 7625,13995 C 7586,13995 7543,14014 7505,14050 L 7505,14050 C 7458,14096 7428,14153 7428,14208 L 7428,14208 C 7428,14247 7443,14279 7469,14299 L 7469,14299 C 7481,14309 7493,14313 7512,14318 L 7512,14318 C 7469,14356 7465,14361 7428,14388 L 7433,14395 7433,14395 C 7452,14382 7469,14380 7488,14380 L 7488,14380 C 7498,14380 7512,14382 7531,14388 L 7531,14388 C 7563,14395 7586,14399 7605,14399 L 7605,14399 C 7631,14399 7665,14388 7689,14369 L 7689,14369 C 7698,14361 7706,14354 7717,14337 L 7710,14333 7710,14333 C 7684,14358 7665,14369 7631,14369 L 7631,14369 C 7617,14369 7608,14366 7572,14356 L 7572,14356 C 7548,14352 7524,14347 7522,14347 L 7522,14347 C 7520,14349 7520,14349 7520,14349 L 7507,14349 7533,14320 Z M 7622,14012 L 7622,14012 C 7660,14012 7681,14039 7681,14084 L 7681,14084 C 7681,14134 7660,14206 7629,14249 L 7629,14249 C 7603,14287 7574,14307 7541,14307 L 7541,14307 C 7501,14307 7479,14275 7479,14225 L 7479,14225 C 7479,14179 7503,14110 7531,14070 L 7531,14070 C 7557,14029 7586,14012 7622,14012 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 7887,14151 L 7792,14151 7792,14158 7792,14158 C 7813,14161 7817,14163 7817,14172 L 7817,14172 C 7817,14177 7817,14187 7815,14194 L 7770,14352 7770,14352 C 7762,14373 7760,14375 7741,14378 L 7741,14384 7922,14384 7944,14320 7937,14318 7937,14318 C 7922,14344 7913,14356 7899,14363 L 7899,14363 C 7884,14371 7870,14371 7839,14371 L 7839,14371 C 7813,14371 7803,14369 7803,14358 L 7803,14358 C 7803,14356 7806,14349 7808,14342 L 7851,14185 7851,14185 C 7856,14166 7865,14158 7887,14158 L 7887,14151 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 8687,14158 L 8687,14158 C 8694,14158 8703,14158 8703,14149 L 8703,14149 C 8703,14138 8694,14138 8687,14138 L 8403,14138 8403,14138 C 8395,14138 8386,14138 8386,14149 L 8386,14149 C 8386,14158 8395,14158 8403,14158 L 8687,14158 Z M 8687,14249 L 8687,14249 C 8694,14249 8703,14249 8703,14239 L 8703,14239 C 8703,14232 8694,14232 8687,14232 L 8403,14232 8403,14232 C 8395,14232 8386,14232 8386,14239 L 8386,14239 C 8386,14249 8395,14249 8403,14249 L 8687,14249 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 9438,14204 L 9438,14204 C 9446,14204 9455,14204 9455,14194 L 9455,14194 C 9455,14185 9446,14185 9438,14185 L 9181,14185 9181,14185 C 9173,14185 9164,14185 9164,14194 L 9164,14194 C 9164,14204 9173,14204 9181,14204 L 9438,14204 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9686,14003 L 9555,14003 9555,14010 9555,14010 C 9587,14012 9593,14018 9593,14031 L 9593,14031 C 9593,14036 9591,14048 9589,14061 L 9529,14270 9529,14270 C 9521,14299 9517,14301 9491,14307 L 9491,14313 9732,14313 9760,14228 9751,14225 9751,14225 C 9734,14260 9722,14275 9701,14285 L 9701,14285 C 9684,14294 9664,14296 9624,14296 L 9624,14296 C 9587,14296 9574,14292 9574,14279 L 9574,14279 C 9574,14277 9576,14266 9579,14256 L 9638,14046 9638,14046 C 9645,14022 9658,14012 9686,14010 L 9686,14003 Z "/>
        <path fill="rgb(68,120,33)" stroke="none" d="M 9767,14241 L 9767,14241 C 9770,14239 9773,14239 9777,14239 L 9777,14239 C 9792,14239 9794,14247 9799,14279 L 9799,14279 C 9803,14304 9808,14358 9808,14378 L 9808,14378 C 9808,14388 9808,14390 9810,14390 L 9810,14390 C 9820,14390 9854,14354 9889,14301 L 9889,14301 C 9901,14285 9910,14260 9910,14249 L 9910,14249 C 9910,14237 9901,14228 9891,14228 L 9891,14228 C 9884,14228 9878,14232 9878,14239 L 9878,14239 C 9878,14247 9880,14249 9887,14256 L 9887,14256 C 9891,14258 9891,14264 9891,14266 L 9891,14266 C 9891,14282 9870,14322 9844,14347 L 9832,14358 9832,14358 C 9829,14309 9827,14292 9825,14266 L 9825,14266 C 9816,14228 9816,14228 9813,14228 L 9813,14228 C 9810,14228 9808,14228 9805,14228 L 9805,14228 C 9799,14230 9779,14234 9767,14237 L 9767,14241 Z "/>
        <path fill="rgb(0,0,0)" stroke="none" d="M 10292,14003 L 10057,14003 10057,14010 10057,14010 C 10085,14012 10092,14018 10092,14029 L 10092,14029 C 10092,14034 10090,14050 10087,14061 L 10027,14270 10027,14270 C 10021,14296 10016,14301 9989,14307 L 9989,14313 10230,14313 10262,14237 10252,14232 10252,14232 C 10230,14264 10218,14275 10197,14285 L 10197,14285 C 10181,14292 10147,14296 10111,14296 L 10111,14296 C 10085,14296 10073,14292 10073,14282 L 10073,14282 C 10073,14275 10078,14254 10090,14213 L 10090,14213 C 10096,14191 10102,14175 10106,14158 L 10106,14158 C 10123,14158 10137,14158 10143,14158 L 10143,14158 C 10162,14158 10175,14161 10181,14166 L 10181,14166 C 10183,14168 10183,14172 10183,14179 L 10183,14179 C 10183,14189 10183,14194 10181,14206 L 10190,14208 10221,14098 10214,14096 10214,14096 C 10194,14136 10192,14138 10147,14142 L 10147,14142 C 10143,14142 10128,14142 10111,14142 L 10143,14031 10143,14031 C 10145,14020 10149,14020 10175,14020 L 10175,14020 C 10252,14020 10269,14025 10269,14053 L 10269,14053 C 10269,14057 10267,14067 10267,14074 L 10276,14074 10292,14003 Z "/>
       </g>
      </g>
      <g class="Group">
       <g class="com.sun.star.drawing.TextShape">
        <g id="id17">
         <rect class="BoundingBox" stroke="none" fill="none" x="19242" y="4656" width="8383" height="1180"/>
         <text class="TextShape"><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="5074"><tspan id="id32.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="5120"><tspan fill="rgb(136,0,170)" stroke="none">Pot. temperature of air at h=</tspan><tspan font-style="italic" fill="rgb(136,0,170)" stroke="none">zt</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="5538"><tspan id="id33.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="5552"><tspan fill="rgb(136,0,170)" stroke="none">Surface Skin </tspan><tspan font-style="italic" fill="rgb(136,0,170)" stroke="none">T</tspan><tspan fill="rgb(136,0,170)" stroke="none"> &amp; </tspan><tspan font-style="italic" fill="rgb(136,0,170)" stroke="none">q</tspan><tspan fill="rgb(136,0,170)" stroke="none"> (</tspan><tspan font-style="italic" fill="rgb(136,0,170)" stroke="none">T</tspan></tspan><tspan class="TextPosition" x="23044" y="5657"><tspan font-size="184px" font-style="italic" fill="rgb(136,0,170)" stroke="none">S</tspan></tspan><tspan class="TextPosition" y="5552"><tspan fill="rgb(136,0,170)" stroke="none">, </tspan><tspan font-style="italic" fill="rgb(136,0,170)" stroke="none">q</tspan></tspan><tspan class="TextPosition" y="5657"><tspan font-size="184px" font-style="italic" fill="rgb(136,0,170)" stroke="none">S</tspan></tspan><tspan class="TextPosition" y="5552"><tspan fill="rgb(136,0,170)" stroke="none">)</tspan><tspan fill="rgb(136,0,170)" stroke="none"> </tspan><tspan fill="rgb(136,0,170)" stroke="none">at h=</tspan><tspan font-style="italic" fill="rgb(136,0,170)" stroke="none">0</tspan></tspan></tspan></text>
         <g class="BulletChars">
          <g id="bullet-char-id33.bp" class="BulletChar">
           <g transform="translate(19492,5538)" fill="rgb(136,0,170)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id32.bp" class="BulletChar">
           <g transform="translate(19492,5074)" fill="rgb(136,0,170)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
         </g>
        </g>
       </g>
      </g>
      <g class="Group">
       <g class="Group">
        <g class="com.sun.star.drawing.TextShape">
         <g id="id18">
          <rect class="BoundingBox" stroke="none" fill="none" x="19832" y="6451" width="3841" height="1839"/>
          <text class="TextShape"><tspan class="TextParagraph" font-family="Open Sans, sans-serif" font-size="388px" font-weight="400"><tspan class="TextPosition" x="20082" y="6991"><tspan fill="rgb(56,138,186)" stroke="none">Choice of </tspan><tspan font-weight="700" fill="rgb(56,138,186)" stroke="none">bulk </tspan></tspan><tspan class="TextPosition" x="20082" y="7520"><tspan font-weight="700" fill="rgb(56,138,186)" stroke="none">algorithm</tspan><tspan fill="rgb(56,138,186)" stroke="none"> </tspan><tspan font-style="italic" fill="rgb(56,138,186)" stroke="none">aka</tspan><tspan fill="rgb(56,138,186)" stroke="none"> </tspan></tspan><tspan class="TextPosition" x="20082" y="8049"><tspan fill="rgb(56,138,186)" stroke="none">parametrization</tspan></tspan></tspan></text>
         </g>
        </g>
        <g class="com.sun.star.drawing.TextShape">
         <g id="id19">
          <rect class="BoundingBox" stroke="none" fill="none" x="22928" y="6450" width="2919" height="1980"/>
          <text class="TextShape"><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="23178" y="6872"><tspan id="id34.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="23778" y="6914"><tspan fill="rgb(56,138,186)" stroke="none">COARE 3.0</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="23178" y="7304"><tspan id="id35.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="23778" y="7346"><tspan fill="rgb(56,138,186)" stroke="none">ECMWF (IFS)</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="23178" y="7736"><tspan id="id36.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="23778" y="7778"><tspan fill="rgb(56,138,186)" stroke="none">COARE 3.5</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="23178" y="8168"><tspan id="id37.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="23778" y="8210"><tspan fill="rgb(56,138,186)" stroke="none">NCAR</tspan></tspan></tspan></text>
          <g class="BulletChars">
           <g id="bullet-char-id37.bp" class="BulletChar">
            <g transform="translate(23178,8168)" fill="rgb(56,138,186)" stroke="none">
             <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
            </g>
           </g>
           <g id="bullet-char-id36.bp" class="BulletChar">
            <g transform="translate(23178,7736)" fill="rgb(56,138,186)" stroke="none">
             <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
            </g>
           </g>
           <g id="bullet-char-id35.bp" class="BulletChar">
            <g transform="translate(23178,7304)" fill="rgb(56,138,186)" stroke="none">
             <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
            </g>
           </g>
           <g id="bullet-char-id34.bp" class="BulletChar">
            <g transform="translate(23178,6872)" fill="rgb(56,138,186)" stroke="none">
             <use transform="scale(270,270)" xlink:href="#bullet-char-template-57354"/>
            </g>
           </g>
          </g>
         </g>
        </g>
       </g>
       <g class="com.sun.star.drawing.CustomShape">
        <g id="id20">
         <rect class="BoundingBox" stroke="none" fill="none" x="19446" y="6246" width="6959" height="2387"/>
         <path fill="none" stroke="rgb(7,137,184)" stroke-width="100" stroke-linejoin="round" d="M 22925,8582 L 19496,8582 19496,6296 26354,6296 26354,8582 22925,8582 Z"/>
        </g>
       </g>
      </g>
      <g class="Group">
       <g class="com.sun.star.drawing.TextShape">
        <g id="id21">
         <rect class="BoundingBox" stroke="none" fill="none" x="19242" y="9056" width="8383" height="2044"/>
         <text class="TextShape"><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="9506"><tspan id="id38.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="9520"><tspan fill="rgb(68,120,33)" stroke="none">Surface Skin </tspan><tspan font-style="italic" fill="rgb(68,120,33)" stroke="none">T</tspan><tspan fill="rgb(68,120,33)" stroke="none"> &amp; </tspan><tspan font-style="italic" fill="rgb(68,120,33)" stroke="none">q</tspan><tspan fill="rgb(68,120,33)" stroke="none"> (</tspan><tspan font-style="italic" fill="rgb(68,120,33)" stroke="none">T</tspan></tspan><tspan class="TextPosition" x="23044" y="9625"><tspan font-size="184px" font-style="italic" fill="rgb(68,120,33)" stroke="none">S</tspan></tspan><tspan class="TextPosition" y="9520"><tspan fill="rgb(68,120,33)" stroke="none">, </tspan><tspan font-style="italic" fill="rgb(68,120,33)" stroke="none">q</tspan></tspan><tspan class="TextPosition" y="9625"><tspan font-size="184px" font-style="italic" fill="rgb(68,120,33)" stroke="none">S</tspan></tspan><tspan class="TextPosition" y="9520"><tspan fill="rgb(68,120,33)" stroke="none">)</tspan><tspan fill="rgb(68,120,33)" stroke="none"> </tspan><tspan fill="rgb(68,120,33)" stroke="none">at h=</tspan><tspan font-style="italic" fill="rgb(68,120,33)" stroke="none">0</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="9970"><tspan id="id39.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="10016"><tspan fill="rgb(68,120,33)" stroke="none">Density of air</tspan><tspan fill="rgb(68,120,33)" stroke="none"> </tspan><tspan fill="rgb(68,120,33)" stroke="none">at h=</tspan><tspan font-style="italic" fill="rgb(68,120,33)" stroke="none">zu</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="10402"><tspan id="id40.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="10448"><tspan fill="rgb(68,120,33)" stroke="none">Specific heat of moist air </tspan><tspan fill="rgb(68,120,33)" stroke="none">h=</tspan><tspan font-style="italic" fill="rgb(68,120,33)" stroke="none">zu</tspan></tspan></tspan><tspan ooo:numbering-type="bullet-style" class="ListItem" font-family="Open Sans, sans-serif" font-size="318px" font-weight="400"><tspan class="TextPosition" x="19492" y="10834"><tspan id="id41.bp" class="BulletPlaceholder"/></tspan><tspan class="TextPosition" x="20092" y="10880"><tspan fill="rgb(68,120,33)" stroke="none">Latent heat of vaporization</tspan></tspan></tspan></text>
         <g class="BulletChars">
          <g id="bullet-char-id41.bp" class="BulletChar">
           <g transform="translate(19492,10834)" fill="rgb(68,120,33)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id40.bp" class="BulletChar">
           <g transform="translate(19492,10402)" fill="rgb(68,120,33)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id39.bp" class="BulletChar">
           <g transform="translate(19492,9970)" fill="rgb(68,120,33)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
          <g id="bullet-char-id38.bp" class="BulletChar">
           <g transform="translate(19492,9506)" fill="rgb(68,120,33)" stroke="none">
            <use transform="scale(254,254)" xlink:href="#bullet-char-template-57354"/>
           </g>
          </g>
         </g>
        </g>
       </g>
      </g>
     </g>
    </g>
   </g>
  </g>
 </g>
 <script type="text/ecmascript"><![CDATA[


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/

/*****  ******************************************************************
*
* Copyright 2008-2013 Hannes Hochreiner
*
* The JavaScript code included between the start note '@jessyinkstart'
* and the end note '@jessyinkend' is subject to the terms of the Mozilla
* Public License, v. 2.0. If a copy of the MPL was not distributed with
* this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* Alternatively, you can redistribute and/or that part of this file
* under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see http://www.gnu.org/licenses/.
*/

/*****
*  You can find the complete source code of the JessyInk project at:
*  @source http://code.google.com/p/jessyink/
*/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@jessyinkstart' and the '@jessyinkend' notes.
*/


/*****
* @jessyinkstart
*
*  The following code is a derivative work of some parts of the JessyInk
*  project.
*  @source http://code.google.com/p/jessyink/
*/

function getElementsByProperty( node, name )
{
var elements = [];

if( node.getAttribute( name ) )
elements.push( node );

for( var counter = 0; counter < node.childNodes.length; ++counter )
{
if( node.childNodes[counter].nodeType == 1 )
{
var subElements = getElementsByProperty( node.childNodes[counter], name );
elements = elements.concat( subElements );
}
}
return elements;
}

function onKeyDown( aEvt )
{
if ( !aEvt )
aEvt = window.event;

var code = aEvt.keyCode || aEvt.charCode;

if( !processingEffect && keyCodeDictionary[currentMode] && keyCodeDictionary[currentMode][code] )
{
return keyCodeDictionary[currentMode][code]();
}
else
{
document.onkeypress = onKeyPress;
return null;
}
}
document.onkeydown = onKeyDown;

function onKeyPress( aEvt )
{
document.onkeypress = null;

if ( !aEvt )
aEvt = window.event;

var str = String.fromCharCode( aEvt.keyCode || aEvt.charCode );

if ( !processingEffect && charCodeDictionary[currentMode] && charCodeDictionary[currentMode][str] )
return charCodeDictionary[currentMode][str]();

return null;
}

function getDefaultKeyCodeDictionary()
{
var keyCodeDict = {};

keyCodeDict[SLIDE_MODE] = {};
keyCodeDict[INDEX_MODE] = {};

keyCodeDict[SLIDE_MODE][LEFT_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][RIGHT_KEY]
= function() { return dispatchEffects(1); };
keyCodeDict[SLIDE_MODE][UP_KEY]
= function() { return aSlideShow.rewindEffect(); };
keyCodeDict[SLIDE_MODE][DOWN_KEY]
= function() { return skipEffects(1); };
keyCodeDict[SLIDE_MODE][PAGE_UP_KEY]
= function() { return aSlideShow.rewindAllEffects(); };
keyCodeDict[SLIDE_MODE][PAGE_DOWN_KEY]
= function() { return skipAllEffects(); };
keyCodeDict[SLIDE_MODE][HOME_KEY]
= function() { return aSlideShow.displaySlide( 0, true ); };
keyCodeDict[SLIDE_MODE][END_KEY]
= function() { return aSlideShow.displaySlide( theMetaDoc.nNumberOfSlides - 1, true ); };
keyCodeDict[SLIDE_MODE][SPACE_KEY]
= function() { return dispatchEffects(1); };

keyCodeDict[INDEX_MODE][LEFT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - 1 ); };
keyCodeDict[INDEX_MODE][RIGHT_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + 1 ); };
keyCodeDict[INDEX_MODE][UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.indexColumns ); };
keyCodeDict[INDEX_MODE][PAGE_UP_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex - theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][PAGE_DOWN_KEY]
= function() { return indexSetPageSlide( theSlideIndexPage.selectedSlideIndex + theSlideIndexPage.getTotalThumbnails() ); };
keyCodeDict[INDEX_MODE][HOME_KEY]
= function() { return indexSetPageSlide( 0 ); };
keyCodeDict[INDEX_MODE][END_KEY]
= function() { return indexSetPageSlide( theMetaDoc.nNumberOfSlides - 1 ); };
keyCodeDict[INDEX_MODE][ENTER_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][SPACE_KEY]
= function() { return toggleSlideIndex(); };
keyCodeDict[INDEX_MODE][ESCAPE_KEY]
= function() { return abandonIndexMode(); };

return keyCodeDict;
}

function getDefaultCharCodeDictionary()
{
var charCodeDict = {};

charCodeDict[SLIDE_MODE] = {};
charCodeDict[INDEX_MODE] = {};

charCodeDict[SLIDE_MODE]['i']
= function () { return toggleSlideIndex(); };

charCodeDict[INDEX_MODE]['i']
= function () { return toggleSlideIndex(); };
charCodeDict[INDEX_MODE]['-']
= function () { return theSlideIndexPage.decreaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['=']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['+']
= function () { return theSlideIndexPage.increaseNumberOfColumns(); };
charCodeDict[INDEX_MODE]['0']
= function () { return theSlideIndexPage.resetNumberOfColumns(); };

return charCodeDict;
}


function slideOnMouseUp( aEvt )
{
if (!aEvt)
aEvt = window.event;

var nOffset = 0;

if( aEvt.button == 0 )
nOffset = 1;
else if( aEvt.button == 2 )
nOffset = -1;

if( 0 != nOffset )
dispatchEffects( nOffset );
return true; // the click has been handled
}

document.handleClick = slideOnMouseUp;


function slideOnMouseWheel(aEvt)
{
var delta = 0;

if (!aEvt)
aEvt = window.event;

if (aEvt.wheelDelta)
{ // IE Opera
delta = aEvt.wheelDelta/120;
}
else if (aEvt.detail)
{ // MOZ
delta = -aEvt.detail/3;
}

if (delta > 0)
skipEffects(-1);
else if (delta < 0)
skipEffects(1);

if (aEvt.preventDefault)
aEvt.preventDefault();

aEvt.returnValue = false;
}

if( window.addEventListener )
{
window.addEventListener( 'DOMMouseScroll', function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); }, false );
}

window.onmousewheel
= function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_WHEEL ); };

function mouseHandlerDispatch( aEvt, anAction )
{
if( !aEvt )
aEvt = window.event;

var retVal = true;

if ( mouseHandlerDictionary[currentMode] && mouseHandlerDictionary[currentMode][anAction] )
{
var subRetVal = mouseHandlerDictionary[currentMode][anAction]( aEvt );

if( subRetVal != null && subRetVal != undefined )
retVal = subRetVal;
}

if( aEvt.preventDefault && !retVal )
aEvt.preventDefault();

aEvt.returnValue = retVal;

return retVal;
}

document.onmouseup = function( aEvt ) { return mouseHandlerDispatch( aEvt, MOUSE_UP ); };


function mouseClickHelper( aEvt )
{
if( !Detect.isMozilla )
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
var aTextSelection = aWindowObject.getSelection();
var sSelectedText =  aTextSelection.toString();
if( sSelectedText )
{
DBGLOG( 'text selection: ' + sSelectedText );
if( sLastSelectedText !== sSelectedText )
{
bTextHasBeenSelected = true;
sLastSelectedText = sSelectedText;
}
else
{
bTextHasBeenSelected = false;
}
return null;
}
else if( bTextHasBeenSelected )
{
bTextHasBeenSelected = false;
sLastSelectedText = '';
return null;
}
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

var aSlideAnimationsHandler = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler;
if( aSlideAnimationsHandler )
{
var aCurrentEventMultiplexer = aSlideAnimationsHandler.aEventMultiplexer;
if( aCurrentEventMultiplexer )
{
if( aCurrentEventMultiplexer.hasRegisteredMouseClickHandlers() )
{
return aCurrentEventMultiplexer.notifyMouseClick( aEvt );
}
}
}
return slideOnMouseUp( aEvt );
}


function getDefaultMouseHandlerDictionary()
{
var mouseHandlerDict = {};

mouseHandlerDict[SLIDE_MODE] = {};
mouseHandlerDict[INDEX_MODE] = {};

mouseHandlerDict[SLIDE_MODE][MOUSE_UP]
= mouseClickHelper;

mouseHandlerDict[SLIDE_MODE][MOUSE_WHEEL]
= function( aEvt ) { return slideOnMouseWheel( aEvt ); };

mouseHandlerDict[INDEX_MODE][MOUSE_UP]
= function( ) { return toggleSlideIndex(); };

return mouseHandlerDict;
}

function indexSetPageSlide( nIndex )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
nIndex = getSafeIndex( nIndex, 0, aMetaSlideSet.length - 1 );

var nSelectedThumbnailIndex = nIndex % theSlideIndexPage.getTotalThumbnails();
var offset = nIndex - nSelectedThumbnailIndex;

if( offset < 0 )
offset = 0;

if( offset != INDEX_OFFSET )
{
INDEX_OFFSET = offset;
displayIndex( INDEX_OFFSET );
}

theSlideIndexPage.setSelection( nSelectedThumbnailIndex );
}


/*****
* @jessyinkend
*
*  The above code is a derivative work of some parts of the JessyInk project.
*  @source http://code.google.com/p/jessyink/
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/

/*****  **********************************************************************
*
*  The 'New' BSD License:
*  **********************
*  Copyright (c) 2005-2012, The Dojo Foundation
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions are met:
*
*    * Redistributions of source code must retain the above copyright notice,
*      this list of conditions and the following disclaimer.
*    * Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution.
*    * Neither the name of the Dojo Foundation nor the names of its contributors
*      may be used to endorse or promote products derived from this software
*      without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
*  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
*  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
*  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/


/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* page included between the '@dojostart' and the '@dojoend' notes.
*/


/*****
* @dojostart
*
*  The following code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

function has( name )
{
return has.cache[name];
}

has.cache = {};

has.add = function( name, test )
{
has.cache[name] = test;
};

function configureDetectionTools()
{
if( !navigator )
{
log( 'error: configureDetectionTools: configuration failed' );
return null;
}

var n = navigator,
dua = n.userAgent,
dav = n.appVersion,
tv = parseFloat(dav);

has.add('air', dua.indexOf('AdobeAIR') >= 0);
has.add('khtml', dav.indexOf('Konqueror') >= 0 ? tv : undefined);
has.add('webkit', parseFloat(dua.split('WebKit/')[1]) || undefined);
has.add('chrome', parseFloat(dua.split('Chrome/')[1]) || undefined);
has.add('safari', dav.indexOf('Safari')>=0 && !has('chrome') ? parseFloat(dav.split('Version/')[1]) : undefined);
has.add('mac', dav.indexOf('Macintosh') >= 0);
has.add('quirks', document.compatMode == 'BackCompat');
has.add('ios', /iPhone|iPod|iPad/.test(dua));
has.add('android', parseFloat(dua.split('Android ')[1]) || undefined);

if(!has('webkit')){
if(dua.indexOf('Opera') >= 0){
has.add('opera', tv >= 9.8 ? parseFloat(dua.split('Version/')[1]) || tv : tv);
}

if(dua.indexOf('Gecko') >= 0 && !has('khtml') && !has('webkit')){
has.add('mozilla', tv);
}
if(has('mozilla')){
has.add('ff', parseFloat(dua.split('Firefox/')[1] || dua.split('Minefield/')[1]) || undefined);
}

if(document.all && !has('opera')){
var isIE = parseFloat(dav.split('MSIE ')[1]) || undefined;

var mode = document.documentMode;
if(mode && mode != 5 && Math.floor(isIE) != mode){
isIE = mode;
}

has.add('ie', isIE);
}

has.add('wii', typeof opera != 'undefined' && opera.wiiremote);
}

var detect =
{
isFF: has('ff'),

isIE: has('ie'),

isKhtml: has('khtml'),

isWebKit: has('webkit'),

isMozilla: has('mozilla'),
isMoz: has('mozilla'),

isOpera: has('opera'),

isSafari: has('safari'),

isChrome: has('chrome'),

isMac: has('mac'),

isIos: has('ios'),

isAndroid: has('android'),

isWii: has('wii'),

isQuirks: has('quirks'),

isAir: has('air')
};
return detect;
}

/*****
* @dojoend
*
*  The above code is a derivative work of some part of the dojox.gfx library.
*  @source http://svn.dojotoolkit.org/src/dojox/trunk/_base/sniff.js
*/

/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/

/*****  **********************************************************************
*
*   Copyright 2015 The Chromium Authors. All rights reserved.
*
*   The Chromium Authors can be found at
*   http://src.chromium.org/svn/trunk/src/AUTHORS
*
*   Redistribution and use in source and binary forms, with or without
*   modification, are permitted provided that the following conditions are
*   met:
*
*   * Redistributions of source code must retain the above copyright
*   notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*   copyright notice, this list of conditions and the following disclaimer
*   in the documentation and/or other materials provided with the
*   distribution.
*   * Neither the name of Google Inc. nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
*
*   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*   'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
*   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
*   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
*   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
*   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
*   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code of this
* file included between the '@svgpathstart' and the '@svgpathend' notes.
*/


/*****
* @svgpathstart
*
*  The following code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/

(function() { 'use strict';
if (!('SVGPathSeg' in window)) {
window.SVGPathSeg = function(type, typeAsLetter, owningPathSegList) {
this.pathSegType = type;
this.pathSegTypeAsLetter = typeAsLetter;
this._owningPathSegList = owningPathSegList;
};

SVGPathSeg.prototype.classname = 'SVGPathSeg';

SVGPathSeg.PATHSEG_UNKNOWN = 0;
SVGPathSeg.PATHSEG_CLOSEPATH = 1;
SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
SVGPathSeg.PATHSEG_MOVETO_REL = 3;
SVGPathSeg.PATHSEG_LINETO_ABS = 4;
SVGPathSeg.PATHSEG_LINETO_REL = 5;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
SVGPathSeg.PATHSEG_ARC_ABS = 10;
SVGPathSeg.PATHSEG_ARC_REL = 11;
SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

SVGPathSeg.prototype._segmentChanged = function() {
if (this._owningPathSegList)
this._owningPathSegList.segmentChanged(this);
};

window.SVGPathSegClosePath = function(owningPathSegList) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CLOSEPATH, 'z', owningPathSegList);
};
SVGPathSegClosePath.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegClosePath.prototype.toString = function() { return '[object SVGPathSegClosePath]'; };
SVGPathSegClosePath.prototype._asPathString = function() { return this.pathSegTypeAsLetter; };
SVGPathSegClosePath.prototype.clone = function() { return new SVGPathSegClosePath(undefined); };

window.SVGPathSegMovetoAbs = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_ABS, 'M', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegMovetoAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegMovetoAbs.prototype.toString = function() { return '[object SVGPathSegMovetoAbs]'; };
SVGPathSegMovetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegMovetoAbs.prototype.clone = function() { return new SVGPathSegMovetoAbs(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegMovetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegMovetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegMovetoRel = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_REL, 'm', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegMovetoRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegMovetoRel.prototype.toString = function() { return '[object SVGPathSegMovetoRel]'; };
SVGPathSegMovetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegMovetoRel.prototype.clone = function() { return new SVGPathSegMovetoRel(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegMovetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegMovetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoAbs = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_ABS, 'L', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegLinetoAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoAbs.prototype.toString = function() { return '[object SVGPathSegLinetoAbs]'; };
SVGPathSegLinetoAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegLinetoAbs.prototype.clone = function() { return new SVGPathSegLinetoAbs(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegLinetoAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegLinetoAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoRel = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_REL, 'l', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegLinetoRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoRel.prototype.toString = function() { return '[object SVGPathSegLinetoRel]'; };
SVGPathSegLinetoRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegLinetoRel.prototype.clone = function() { return new SVGPathSegLinetoRel(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegLinetoRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegLinetoRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicAbs = function(owningPathSegList, x, y, x1, y1, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, 'C', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicAbs]'; };
SVGPathSegCurvetoCubicAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicAbs.prototype.clone = function() { return new SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicRel = function(owningPathSegList, x, y, x1, y1, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, 'c', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicRel]'; };
SVGPathSegCurvetoCubicRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicRel.prototype.clone = function() { return new SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticAbs = function(owningPathSegList, x, y, x1, y1) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, 'Q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
};
SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticAbs]'; };
SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticAbs.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1); };
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticRel = function(owningPathSegList, x, y, x1, y1) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, 'q', owningPathSegList);
this._x = x;
this._y = y;
this._x1 = x1;
this._y1 = y1;
};
SVGPathSegCurvetoQuadraticRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticRel]'; };
SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x1 + ' ' + this._y1 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticRel.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1); };
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'x1', { get: function() { return this._x1; }, set: function(x1) { this._x1 = x1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, 'y1', { get: function() { return this._y1; }, set: function(y1) { this._y1 = y1; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcAbs = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_ABS, 'A', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
};
SVGPathSegArcAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegArcAbs.prototype.toString = function() { return '[object SVGPathSegArcAbs]'; };
SVGPathSegArcAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; };
SVGPathSegArcAbs.prototype.clone = function() { return new SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); };
Object.defineProperty(SVGPathSegArcAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcAbs.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegArcRel = function(owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_REL, 'a', owningPathSegList);
this._x = x;
this._y = y;
this._r1 = r1;
this._r2 = r2;
this._angle = angle;
this._largeArcFlag = largeArcFlag;
this._sweepFlag = sweepFlag;
};
SVGPathSegArcRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegArcRel.prototype.toString = function() { return '[object SVGPathSegArcRel]'; };
SVGPathSegArcRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._r1 + ' ' + this._r2 + ' ' + this._angle + ' ' + (this._largeArcFlag ? '1' : '0') + ' ' + (this._sweepFlag ? '1' : '0') + ' ' + this._x + ' ' + this._y; };
SVGPathSegArcRel.prototype.clone = function() { return new SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag); };
Object.defineProperty(SVGPathSegArcRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'r1', { get: function() { return this._r1; }, set: function(r1) { this._r1 = r1; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'r2', { get: function() { return this._r2; }, set: function(r2) { this._r2 = r2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'angle', { get: function() { return this._angle; }, set: function(angle) { this._angle = angle; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'largeArcFlag', { get: function() { return this._largeArcFlag; }, set: function(largeArcFlag) { this._largeArcFlag = largeArcFlag; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegArcRel.prototype, 'sweepFlag', { get: function() { return this._sweepFlag; }, set: function(sweepFlag) { this._sweepFlag = sweepFlag; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalAbs = function(owningPathSegList, x) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, 'H', owningPathSegList);
this._x = x;
};
SVGPathSegLinetoHorizontalAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoHorizontalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalAbs]'; };
SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; };
SVGPathSegLinetoHorizontalAbs.prototype.clone = function() { return new SVGPathSegLinetoHorizontalAbs(undefined, this._x); };
Object.defineProperty(SVGPathSegLinetoHorizontalAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoHorizontalRel = function(owningPathSegList, x) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, 'h', owningPathSegList);
this._x = x;
};
SVGPathSegLinetoHorizontalRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoHorizontalRel.prototype.toString = function() { return '[object SVGPathSegLinetoHorizontalRel]'; };
SVGPathSegLinetoHorizontalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x; };
SVGPathSegLinetoHorizontalRel.prototype.clone = function() { return new SVGPathSegLinetoHorizontalRel(undefined, this._x); };
Object.defineProperty(SVGPathSegLinetoHorizontalRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalAbs = function(owningPathSegList, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, 'V', owningPathSegList);
this._y = y;
};
SVGPathSegLinetoVerticalAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoVerticalAbs.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalAbs]'; };
SVGPathSegLinetoVerticalAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; };
SVGPathSegLinetoVerticalAbs.prototype.clone = function() { return new SVGPathSegLinetoVerticalAbs(undefined, this._y); };
Object.defineProperty(SVGPathSegLinetoVerticalAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegLinetoVerticalRel = function(owningPathSegList, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, 'v', owningPathSegList);
this._y = y;
};
SVGPathSegLinetoVerticalRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegLinetoVerticalRel.prototype.toString = function() { return '[object SVGPathSegLinetoVerticalRel]'; };
SVGPathSegLinetoVerticalRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._y; };
SVGPathSegLinetoVerticalRel.prototype.clone = function() { return new SVGPathSegLinetoVerticalRel(undefined, this._y); };
Object.defineProperty(SVGPathSegLinetoVerticalRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothAbs = function(owningPathSegList, x, y, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, 'S', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothAbs]'; };
SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function() { return new SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoCubicSmoothRel = function(owningPathSegList, x, y, x2, y2) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, 's', owningPathSegList);
this._x = x;
this._y = y;
this._x2 = x2;
this._y2 = y2;
};
SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoCubicSmoothRel]'; };
SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x2 + ' ' + this._y2 + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function() { return new SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2); };
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'x2', { get: function() { return this._x2; }, set: function(x2) { this._x2 = x2; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, 'y2', { get: function() { return this._y2; }, set: function(y2) { this._y2 = y2; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothAbs = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, 'T', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothAbs]'; };
SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

window.SVGPathSegCurvetoQuadraticSmoothRel = function(owningPathSegList, x, y) {
SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, 't', owningPathSegList);
this._x = x;
this._y = y;
};
SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function() { return '[object SVGPathSegCurvetoQuadraticSmoothRel]'; };
SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function() { return this.pathSegTypeAsLetter + ' ' + this._x + ' ' + this._y; };
SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function() { return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y); };
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'x', { get: function() { return this._x; }, set: function(x) { this._x = x; this._segmentChanged(); }, enumerable: true });
Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, 'y', { get: function() { return this._y; }, set: function(y) { this._y = y; this._segmentChanged(); }, enumerable: true });

SVGPathElement.prototype.createSVGPathSegClosePath = function() { return new SVGPathSegClosePath(undefined); };
SVGPathElement.prototype.createSVGPathSegMovetoAbs = function(x, y) { return new SVGPathSegMovetoAbs(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegMovetoRel = function(x, y) { return new SVGPathSegMovetoRel(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegLinetoAbs = function(x, y) { return new SVGPathSegLinetoAbs(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegLinetoRel = function(x, y) { return new SVGPathSegLinetoRel(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function(x, y, x1, y1, x2, y2) { return new SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function(x, y, x1, y1, x2, y2) { return new SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function(x, y, x1, y1) { return new SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function(x, y, x1, y1) { return new SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1); };
SVGPathElement.prototype.createSVGPathSegArcAbs = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
SVGPathElement.prototype.createSVGPathSegArcRel = function(x, y, r1, r2, angle, largeArcFlag, sweepFlag) { return new SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag); }
SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function(x) { return new SVGPathSegLinetoHorizontalAbs(undefined, x); };
SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function(x) { return new SVGPathSegLinetoHorizontalRel(undefined, x); };
SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function(y) { return new SVGPathSegLinetoVerticalAbs(undefined, y); };
SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function(y) { return new SVGPathSegLinetoVerticalRel(undefined, y); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function(x, y, x2, y2) { return new SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function(x, y, x2, y2) { return new SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function(x, y) { return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y); };
SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function(x, y) { return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y); };
}

if (!('SVGPathSegList' in window)) {
window.SVGPathSegList = function(pathElement) {
this._pathElement = pathElement;
this._list = this._parsePath(this._pathElement.getAttribute('d'));

this._mutationObserverConfig = { 'attributes': true, 'attributeFilter': ['d'] };
this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
};

SVGPathSegList.prototype.classname = 'SVGPathSegList';

Object.defineProperty(SVGPathSegList.prototype, 'numberOfItems', {
get: function() {
this._checkPathSynchronizedToList();
return this._list.length;
},
enumerable: true
});

Object.defineProperty(SVGPathElement.prototype, 'pathSegList', {
get: function() {
if (!this._pathSegList)
this._pathSegList = new SVGPathSegList(this);
return this._pathSegList;
},
enumerable: true
});
Object.defineProperty(SVGPathElement.prototype, 'normalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(SVGPathElement.prototype, 'animatedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });
Object.defineProperty(SVGPathElement.prototype, 'animatedNormalizedPathSegList', { get: function() { return this.pathSegList; }, enumerable: true });

SVGPathSegList.prototype._checkPathSynchronizedToList = function() {
this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
};

SVGPathSegList.prototype._updateListFromPathMutations = function(mutationRecords) {
if (!this._pathElement)
return;
var hasPathMutations = false;
mutationRecords.forEach(function(record) {
if (record.attributeName == 'd')
hasPathMutations = true;
});
if (hasPathMutations)
this._list = this._parsePath(this._pathElement.getAttribute('d'));
};

SVGPathSegList.prototype._writeListToPath = function() {
this._pathElementMutationObserver.disconnect();
this._pathElement.setAttribute('d', SVGPathSegList._pathSegArrayAsString(this._list));
this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
};

SVGPathSegList.prototype.segmentChanged = function() {
this._writeListToPath();
};

SVGPathSegList.prototype.clear = function() {
this._checkPathSynchronizedToList();

this._list.forEach(function(pathSeg) {
pathSeg._owningPathSegList = null;
});
this._list = [];
this._writeListToPath();
};

SVGPathSegList.prototype.initialize = function(newItem) {
this._checkPathSynchronizedToList();

this._list = [newItem];
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
};

SVGPathSegList.prototype._checkValidIndex = function(index) {
if (isNaN(index) || index < 0 || index >= this.numberOfItems)
throw 'INDEX_SIZE_ERR';
};

SVGPathSegList.prototype.getItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
return this._list[index];
};

SVGPathSegList.prototype.insertItemBefore = function(newItem, index) {
this._checkPathSynchronizedToList();

if (index > this.numberOfItems)
index = this.numberOfItems;
if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.splice(index, 0, newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
};

SVGPathSegList.prototype.replaceItem = function(newItem, index) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._checkValidIndex(index);
this._list[index] = newItem;
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
};

SVGPathSegList.prototype.removeItem = function(index) {
this._checkPathSynchronizedToList();

this._checkValidIndex(index);
var item = this._list[index];
this._list.splice(index, 1);
this._writeListToPath();
return item;
};

SVGPathSegList.prototype.appendItem = function(newItem) {
this._checkPathSynchronizedToList();

if (newItem._owningPathSegList) {
newItem = newItem.clone();
}
this._list.push(newItem);
newItem._owningPathSegList = this;
this._writeListToPath();
return newItem;
};

SVGPathSegList.prototype.matrixTransform = function(aSVGMatrix) {
this._checkPathSynchronizedToList();

var nLength = this._list.length;
for( var i = 0; i < nLength; ++i )
{
var nX;
var aPathSeg = this._list[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
nX = aPathSeg._x2;
aPathSeg._x2 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y2 + aSVGMatrix.e;
aPathSeg._y2 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y2 + aSVGMatrix.f;
case 'Q':
nX = aPathSeg._x1;
aPathSeg._x1 = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y1 + aSVGMatrix.e;
aPathSeg._y1 = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y1 + aSVGMatrix.f;
case 'M':
case 'L':
nX = aPathSeg._x;
aPathSeg._x = aSVGMatrix.a * nX + aSVGMatrix.c * aPathSeg._y + aSVGMatrix.e;
aPathSeg._y = aSVGMatrix.b * nX + aSVGMatrix.d * aPathSeg._y + aSVGMatrix.f;
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}
}

this._writeListToPath();
};

SVGPathSegList.prototype.changeOrientation = function() {
this._checkPathSynchronizedToList();

var aPathSegList = this._list;
var nLength = aPathSegList.length;
if( nLength == 0 ) return;

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList[0];
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.shift();
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList[i];
switch( aPathSeg.pathSegTypeAsLetter )
{
case 'C':
var nX = aPathSeg._x1;
aPathSeg._x1 = aPathSeg._x2;
aPathSeg._x2 = nX;
var nY = aPathSeg._y1;
aPathSeg._y1 = aPathSeg._y2;
aPathSeg._y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: aPathSeg._x, y: aPathSeg._y };
aPathSeg._x = nCurrentX;
aPathSeg._y = nCurrentY;
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
break;
default:
log( 'SVGPathSegList.changeOrientation: unexpected path segment type: '
+ aPathSeg.pathSegTypeAsLetter );
}

}

aPathSegList.reverse();

var aMovePathSeg = new SVGPathSegMovetoAbs( this, nCurrentX, nCurrentY );
aPathSegList.unshift( aMovePathSeg );

this._writeListToPath();
};

SVGPathSegList._pathSegArrayAsString = function(pathSegArray) {
var string = '';
var first = true;
pathSegArray.forEach(function(pathSeg) {
if (first) {
first = false;
string += pathSeg._asPathString();
} else {
string += ' ' + pathSeg._asPathString();
}
});
return string;
};

var Source = function(string) {
this._string = string;
this._currentIndex = 0;
this._endIndex = this._string.length;
this._previousCommand = SVGPathSeg.PATHSEG_UNKNOWN;

this._skipOptionalSpaces();
};

Source.prototype._isCurrentSpace = function() {
var character = this._string[this._currentIndex];
return character <= ' ' && (character == ' ' || character == '\n' || character == '\t' || character == '\r' || character == '\f');
};

Source.prototype._skipOptionalSpaces = function() {
while (this._currentIndex < this._endIndex && this._isCurrentSpace())
this._currentIndex++;
return this._currentIndex < this._endIndex;
};

Source.prototype._skipOptionalSpacesOrDelimiter = function() {
if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ',')
return false;
if (this._skipOptionalSpaces()) {
if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ',') {
this._currentIndex++;
this._skipOptionalSpaces();
}
}
return this._currentIndex < this._endIndex;
};

Source.prototype.hasMoreData = function() {
return this._currentIndex < this._endIndex;
};

Source.prototype.peekSegmentType = function() {
var lookahead = this._string[this._currentIndex];
return this._pathSegTypeFromChar(lookahead);
};

Source.prototype._pathSegTypeFromChar = function(lookahead) {
switch (lookahead) {
case 'Z':
case 'z':
return SVGPathSeg.PATHSEG_CLOSEPATH;
case 'M':
return SVGPathSeg.PATHSEG_MOVETO_ABS;
case 'm':
return SVGPathSeg.PATHSEG_MOVETO_REL;
case 'L':
return SVGPathSeg.PATHSEG_LINETO_ABS;
case 'l':
return SVGPathSeg.PATHSEG_LINETO_REL;
case 'C':
return SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
case 'c':
return SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
case 'Q':
return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
case 'q':
return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
case 'A':
return SVGPathSeg.PATHSEG_ARC_ABS;
case 'a':
return SVGPathSeg.PATHSEG_ARC_REL;
case 'H':
return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
case 'h':
return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
case 'V':
return SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
case 'v':
return SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
case 'S':
return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
case 's':
return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
case 'T':
return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
case 't':
return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
default:
return SVGPathSeg.PATHSEG_UNKNOWN;
}
};

Source.prototype._nextCommandHelper = function(lookahead, previousCommand) {
if ((lookahead == '+' || lookahead == '-' || lookahead == '.' || (lookahead >= '0' && lookahead <= '9')) && previousCommand != SVGPathSeg.PATHSEG_CLOSEPATH) {
if (previousCommand == SVGPathSeg.PATHSEG_MOVETO_ABS)
return SVGPathSeg.PATHSEG_LINETO_ABS;
if (previousCommand == SVGPathSeg.PATHSEG_MOVETO_REL)
return SVGPathSeg.PATHSEG_LINETO_REL;
return previousCommand;
}
return SVGPathSeg.PATHSEG_UNKNOWN;
};

Source.prototype.initialCommandIsMoveTo = function() {
if (!this.hasMoreData())
return true;
var command = this.peekSegmentType();
return command == SVGPathSeg.PATHSEG_MOVETO_ABS || command == SVGPathSeg.PATHSEG_MOVETO_REL;
};

Source.prototype._parseNumber = function() {
var exponent = 0;
var integer = 0;
var frac = 1;
var decimal = 0;
var sign = 1;
var expsign = 1;

var startIndex = this._currentIndex;

this._skipOptionalSpaces();

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '+')
this._currentIndex++;
else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
sign = -1;
}

if (this._currentIndex == this._endIndex || ((this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9') && this._string.charAt(this._currentIndex) != '.'))
return undefined;

var startIntPartIndex = this._currentIndex;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9')
this._currentIndex++; // Advance to first non-digit.

if (this._currentIndex != startIntPartIndex) {
var scanIntPartIndex = this._currentIndex - 1;
var multiplier = 1;
while (scanIntPartIndex >= startIntPartIndex) {
integer += multiplier * (this._string.charAt(scanIntPartIndex--) - '0');
multiplier *= 10;
}
}

if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == '.') {
this._currentIndex++;

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;
while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
frac *= 10;
decimal += (this._string.charAt(this._currentIndex) - '0') / frac;
this._currentIndex += 1;
}
}

if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == 'e' || this._string.charAt(this._currentIndex) == 'E') && (this._string.charAt(this._currentIndex + 1) != 'x' && this._string.charAt(this._currentIndex + 1) != 'm')) {
this._currentIndex++;

if (this._string.charAt(this._currentIndex) == '+') {
this._currentIndex++;
} else if (this._string.charAt(this._currentIndex) == '-') {
this._currentIndex++;
expsign = -1;
}

if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < '0' || this._string.charAt(this._currentIndex) > '9')
return undefined;

while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= '0' && this._string.charAt(this._currentIndex) <= '9') {
exponent *= 10;
exponent += (this._string.charAt(this._currentIndex) - '0');
this._currentIndex++;
}
}

var number = integer + decimal;
number *= sign;

if (exponent)
number *= Math.pow(10, expsign * exponent);

if (startIndex == this._currentIndex)
return undefined;

this._skipOptionalSpacesOrDelimiter();

return number;
};

Source.prototype._parseArcFlag = function() {
if (this._currentIndex >= this._endIndex)
return undefined;
var flag = false;
var flagChar = this._string.charAt(this._currentIndex++);
if (flagChar == '0')
flag = false;
else if (flagChar == '1')
flag = true;
else
return undefined;

this._skipOptionalSpacesOrDelimiter();
return flag;
};

Source.prototype.parseSegment = function(owningPathSegList) {
var lookahead = this._string[this._currentIndex];
var command = this._pathSegTypeFromChar(lookahead);
if (command == SVGPathSeg.PATHSEG_UNKNOWN) {
if (this._previousCommand == SVGPathSeg.PATHSEG_UNKNOWN)
return null;
command = this._nextCommandHelper(lookahead, this._previousCommand);
if (command == SVGPathSeg.PATHSEG_UNKNOWN)
return null;
} else {
this._currentIndex++;
}

this._previousCommand = command;

switch (command) {
case SVGPathSeg.PATHSEG_MOVETO_REL:
return new SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case SVGPathSeg.PATHSEG_MOVETO_ABS:
return new SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case SVGPathSeg.PATHSEG_LINETO_REL:
return new SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case SVGPathSeg.PATHSEG_LINETO_ABS:
return new SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
return new SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
return new SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
return new SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
return new SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
case SVGPathSeg.PATHSEG_CLOSEPATH:
this._skipOptionalSpaces();
return new SVGPathSegClosePath(owningPathSegList);
case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
{
const points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
}
case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
{
const points = {x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
}
case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
{
const points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
}
case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
{
const points = {x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
}
case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
{
const points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
}
case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
{
const points = {x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
}
case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
return new SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
return new SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
case SVGPathSeg.PATHSEG_ARC_REL:
{
const points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
}
case SVGPathSeg.PATHSEG_ARC_ABS:
{
const points = {x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber()};
return new SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
}
default:
throw 'Unknown path seg type.'
}
};

var Builder = function() {
this.pathSegList = [];
};

Builder.prototype.appendSegment = function(pathSeg) {
this.pathSegList.push(pathSeg);
};

SVGPathSegList.prototype._parsePath = function(string) {
if (!string || string.length == 0)
return [];

var owningPathSegList = this;

var source = new Source(string);

if (!source.initialCommandIsMoveTo())
return [];
var builder = new Builder();
while (source.hasMoreData()) {
var pathSeg = source.parseSegment(owningPathSegList);
if (!pathSeg)
return [];
builder.appendSegment(pathSeg);
}

return builder.pathSegList;
}
}
}());

/*****
* @svgpathend
*
*  The above code is a derivative work of some part of the SVGPathSeg API.
*
*  This API is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
*  SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
*  changes which were implemented in Firefox 43 and Chrome 46.
*
*  @source https://github.com/progers/pathseg
*/


/*****
* @licstart
*
* The following is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/

/*****  ******************************************************************
*
* This file is part of the LibreOffice project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*
* This file incorporates work covered by the following license notice:
*
*   Licensed to the Apache Software Foundation (ASF) under one or more
*   contributor license agreements. See the NOTICE file distributed
*   with this work for additional information regarding copyright
*   ownership. The ASF licenses this file to you under the Apache
*   License, Version 2.0 (the 'License'); you may not use this file
*   except in compliance with the License. You may obtain a copy of
*   the License at http://www.apache.org/licenses/LICENSE-2.0 .
*
************************************************************************/

/*****
* @licend
*
* The above is the license notice for the part of JavaScript code  of
* this page included between the '@libreofficestart' and the '@libreofficeend'
* notes.
*/


/*****
* @libreofficestart
*
* Several parts of the following code are the result of the porting,
* started on August 2011, of the C++ code included in the source
* files placed under the folder '/slideshow/source' and
* sub-folders. This got later rebased onto the AL2-licensed versions
* of those files in early 2013.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/


window.onload = init;


var aOOOElemMetaSlides = 'ooo:meta_slides';
var aOOOElemMetaSlide = 'ooo:meta_slide';
var aOOOElemTextField = 'ooo:text_field';
var aPresentationClipPathId = 'presentation_clip_path';
var aPresentationClipPathShrinkId = 'presentation_clip_path_shrink';

var aOOOAttrNumberOfSlides = 'number-of-slides';
var aOOOAttrStartSlideNumber= 'start-slide-number';
var aOOOAttrNumberingType = 'page-numbering-type';
var aOOOAttrListItemNumberingType= 'numbering-type';
var aOOOAttrUsePositionedChars = 'use-positioned-chars';

var aOOOAttrSlide = 'slide';
var aOOOAttrMaster = 'master';
var aOOOAttrHasTransition = 'has-transition';
var aOOOAttrBackgroundVisibility = 'background-visibility';
var aOOOAttrMasterObjectsVisibility = 'master-objects-visibility';
var aOOOAttrPageNumberVisibility = 'page-number-visibility';
var aOOOAttrDateTimeVisibility = 'date-time-visibility';
var aOOOAttrFooterVisibility = 'footer-visibility';
var aOOOAttrHeaderVisibility = 'header-visibility';
var aOOOAttrDateTimeField = 'date-time-field';
var aOOOAttrFooterField = 'footer-field';
var aOOOAttrHeaderField = 'header-field';

var aOOOAttrDateTimeFormat = 'date-time-format';

var aOOOAttrTextAdjust = 'text-adjust';

var aClipPathGroupClassName = 'ClipPathGroup';
var aPageClassName = 'Page';
var aSlideNumberClassName = 'Slide_Number';
var aDateTimeClassName = 'Date/Time';
var aFooterClassName = 'Footer';
var aHeaderClassName = 'Header';

var NSS = {};
NSS['svg']='http://www.w3.org/2000/svg';
NSS['rdf']='http://www.w3.org/1999/02/22-rdf-syntax-ns#';
NSS['xlink']='http://www.w3.org/1999/xlink';
NSS['xml']='http://www.w3.org/XML/1998/namespace';
NSS['ooo'] = 'http://xml.openoffice.org/svg/export';
NSS['presentation'] = 'http://sun.com/xmlns/staroffice/presentation';
NSS['smil'] = 'http://www.w3.org/2001/SMIL20/';
NSS['anim'] = 'urn:oasis:names:tc:opendocument:xmlns:animation:1.0';

var SLIDE_MODE = 1;
var INDEX_MODE = 2;

var MOUSE_UP = 1;
var MOUSE_DOWN = 2; // eslint-disable-line no-unused-vars
var MOUSE_MOVE = 3; // eslint-disable-line no-unused-vars
var MOUSE_WHEEL = 4;

var LEFT_KEY = 37;          // cursor left keycode
var UP_KEY = 38;            // cursor up keycode
var RIGHT_KEY = 39;         // cursor right keycode
var DOWN_KEY = 40;          // cursor down keycode
var PAGE_UP_KEY = 33;       // page up keycode
var PAGE_DOWN_KEY = 34;     // page down keycode
var HOME_KEY = 36;          // home keycode
var END_KEY = 35;           // end keycode
var ENTER_KEY = 13;
var SPACE_KEY = 32;
var ESCAPE_KEY = 27;

var HIDDEN = 0;
var VISIBLE = 1;
var INHERIT = 2;
var aVisibilityAttributeValue = [ 'hidden', 'visible', 'inherit' ];  // eslint-disable-line no-unused-vars
var aVisibilityValue = { 'hidden' : HIDDEN, 'visible' : VISIBLE, 'inherit' : INHERIT };

var ROOT_NODE = document.getElementsByTagNameNS( NSS['svg'], 'svg' )[0];
var WIDTH = 0;
var HEIGHT = 0;
var INDEX_COLUMNS_DEFAULT = 3;
var INDEX_OFFSET = 0;

var Detect = configureDetectionTools();
var theMetaDoc;
var theSlideIndexPage;
var currentMode = SLIDE_MODE;
var processingEffect = false;
var nCurSlide = undefined;
var bTextHasBeenSelected = false;
var sLastSelectedText = '';


var charCodeDictionary = getDefaultCharCodeDictionary();
var keyCodeDictionary = getDefaultKeyCodeDictionary();

var mouseHandlerDictionary = getDefaultMouseHandlerDictionary();


function object( aObject )
{
var F = function() {};
F.prototype = aObject;
return new F();
}


function extend( aSubType, aSuperType )
{
if (!aSuperType || !aSubType)
{
alert('extend failed, verify dependencies');
}
var OP = Object.prototype;
var sp = aSuperType.prototype;
var rp = object( sp );
aSubType.prototype = rp;

rp.constructor = aSubType;
aSubType.superclass = sp;

if (aSuperType != Object && sp.constructor == OP.constructor)
{
sp.constructor = aSuperType;
}

return aSubType;
}


function instantiate( TemplateClass, BaseType )
{
if( !TemplateClass.instanceSet )
TemplateClass.instanceSet = [];

var nSize = TemplateClass.instanceSet.length;

for( var i = 0; i < nSize; ++i )
{
if( TemplateClass.instanceSet[i].base === BaseType )
return TemplateClass.instanceSet[i].instance;
}

TemplateClass.instanceSet[ nSize ] = {};
TemplateClass.instanceSet[ nSize ].base = BaseType;
TemplateClass.instanceSet[ nSize ].instance = TemplateClass( BaseType );

return TemplateClass.instanceSet[ nSize ].instance;
}


function Rectangle( aSVGRectElem )
{
var x = parseInt( aSVGRectElem.getAttribute( 'x' ) );
var y = parseInt( aSVGRectElem.getAttribute( 'y' ) );
var width = parseInt( aSVGRectElem.getAttribute( 'width' ) );
var height = parseInt( aSVGRectElem.getAttribute( 'height' ) );

this.left = x;
this.right = x + width;
this.top = y;
this.bottom = y + height;
}

function getKeyByValue(aObj, value) {
for(var key in aObj) {
if(aObj[key] == value)
return key;
}
return null;
}

function log( message )
{
if( typeof console == 'object' )
{
console.log( message );
}
else if( typeof opera == 'object' )
{
opera.postError( message );
}
else if( typeof java == 'object' && typeof java.lang == 'object' )
{
java.lang.System.out.println( message );
}
}

function getNSAttribute( sNSPrefix, aElem, sAttrName )
{
if( !aElem ) return null;
if( 'getAttributeNS' in aElem )
{
return aElem.getAttributeNS( NSS[sNSPrefix], sAttrName );
}
else
{
return aElem.getAttribute( sNSPrefix + ':' + sAttrName );
}
}

function getOOOAttribute( aElem, sAttrName )
{
return getNSAttribute( 'ooo', aElem, sAttrName );
}

function setNSAttribute( sNSPrefix, aElem, sAttrName, aValue )
{
if( !aElem ) return false;
if( 'setAttributeNS' in aElem )
{
aElem.setAttributeNS( NSS[sNSPrefix], sAttrName, aValue );
return true;
}
else
{
aElem.setAttribute(sNSPrefix + ':' + sAttrName, aValue );
return true;
}
}

function getElementsByClassName( aElem, sClassName )
{

var aElementSet = [];
if( 'getElementsByClassName' in aElem )
{
aElementSet = aElem.getElementsByClassName( sClassName );
}
else
{
var aElementSetByClassProperty = getElementsByProperty( aElem, 'class' );
for( var i = 0; i < aElementSetByClassProperty.length; ++i )
{
var sAttrClassName = aElementSetByClassProperty[i].getAttribute( 'class' );
if( sAttrClassName == sClassName )
{
aElementSet.push( aElementSetByClassProperty[i] );
}
}
}
return aElementSet;
}

function getElementByClassName( aElem, sClassName /*, sTagName */)
{
var aElementSet = getElementsByClassName( aElem, sClassName );
if ( aElementSet.length == 1 )
return aElementSet[0];
else
return null;
}

function getClassAttribute(  aElem )
{
if( aElem )
return aElem.getAttribute( 'class' );
return '';
}

function createElementGroup( aParentElement, aElementList, nFrom, nCount, sGroupClass, sGroupId )
{
var nTo = nFrom + nCount;
if( nCount < 1 || aElementList.length < nTo )
{
log( 'createElementGroup: not enough elements available.' );
return;
}
var firstElement = aElementList[nFrom];
if( !firstElement )
{
log( 'createElementGroup: element not found.' );
return;
}
var aGroupElement = document.createElementNS( NSS['svg'], 'g' );
if( sGroupId )
aGroupElement.setAttribute( 'id', sGroupId );
if( sGroupClass )
aGroupElement.setAttribute( 'class', sGroupClass );
aParentElement.insertBefore( aGroupElement, firstElement );
var i = nFrom;
for( ; i < nTo; ++i )
{
aParentElement.removeChild( aElementList[i] );
aGroupElement.appendChild( aElementList[i] );
}
}

function initVisibilityProperty( aElement )
{
var nVisibility = VISIBLE;
var sVisibility = aElement.getAttribute( 'visibility' );
if( sVisibility ) nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
}

function getSafeIndex( nIndex, nMin, nMax )
{
if( nIndex < nMin )
return nMin;
else if( nIndex > nMax )
return nMax;
else
return nIndex;
}

function getRandomInt( nMax )
{
return Math.floor( Math.random() * nMax );
}

function isTextFieldElement( aElement ) // eslint-disable-line no-unused-vars
{
var sClassName = aElement.getAttribute( 'class' );
return ( sClassName === aSlideNumberClassName ) ||
( sClassName === aFooterClassName ) ||
( sClassName === aHeaderClassName ) ||
( sClassName === aDateTimeClassName );
}


function DebugPrinter()
{
this.bEnabled = false;
}


DebugPrinter.prototype.on = function()
{
this.bEnabled = true;
};

DebugPrinter.prototype.off = function()
{
this.bEnabled = false;
};

DebugPrinter.prototype.isEnabled = function()
{
return this.bEnabled;
};

DebugPrinter.prototype.print = function( sMessage, nTime )
{
if( this.isEnabled() )
{
var sInfo = 'DBG: ' + sMessage;
if( nTime )
sInfo += ' (at: ' + String( nTime / 1000 ) + 's)';
log( sInfo );
}
};


var aGenericDebugPrinter = new DebugPrinter();
aGenericDebugPrinter.off();
var DBGLOG = bind2( DebugPrinter.prototype.print, aGenericDebugPrinter );

var NAVDBG = new DebugPrinter();
NAVDBG.off();

var ANIMDBG = new DebugPrinter();
ANIMDBG.off();

var aRegisterEventDebugPrinter = new DebugPrinter();
aRegisterEventDebugPrinter.off();

var aTimerEventQueueDebugPrinter = new DebugPrinter();
aTimerEventQueueDebugPrinter.off();

var aEventMultiplexerDebugPrinter = new DebugPrinter();
aEventMultiplexerDebugPrinter.off();

var aNextEffectEventArrayDebugPrinter = new DebugPrinter();
aNextEffectEventArrayDebugPrinter.off();

var aActivityQueueDebugPrinter = new DebugPrinter();
aActivityQueueDebugPrinter.off();

var aAnimatedElementDebugPrinter = new DebugPrinter();
aAnimatedElementDebugPrinter.off();


function MetaDocument()
{
var aMetaDocElem = document.getElementById( aOOOElemMetaSlides );
assert( aMetaDocElem, 'MetaDocument: the svg element with id:' + aOOOElemMetaSlides + 'is not valid.');

this.nNumberOfSlides = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberOfSlides ) );
assert( typeof this.nNumberOfSlides == 'number' && this.nNumberOfSlides > 0,
'MetaDocument: number of slides is zero or undefined.' );
this.nStartSlideNumber = parseInt( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrStartSlideNumber ) ) || 0;
this.sPageNumberingType = aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrNumberingType ) || 'arabic';
this.bIsUsePositionedChars = ( aMetaDocElem.getAttributeNS( NSS['ooo'], aOOOAttrUsePositionedChars ) === 'true' );

this.aClipPathGroup = getElementByClassName( ROOT_NODE, aClipPathGroupClassName );
assert( this.aClipPathGroup, 'MetaDocument: the clip path group element is not valid.');

this.aPresentationClipPath = document.getElementById( aPresentationClipPathId );
assert( this.aPresentationClipPath,
'MetaDocument: the presentation clip path element element is not valid.');

this.aMetaSlideSet = [];
this.aMasterPageSet = {};
this.aTextFieldHandlerSet = {};
this.aTextFieldContentProviderSet = [];
this.aSlideNumberProvider = new SlideNumberProvider( this.nStartSlideNumber + 1, this.sPageNumberingType );

this.bIsAnimated = false;
this.aSlideAnimationsMap = {};
this.initSlideAnimationsMap();

this.theMetaDummySlide = new MetaSlide( 'ooo:meta_dummy_slide', this );

for( var i = 0; i < this.nNumberOfSlides; ++i )
{
var sMetaSlideId = aOOOElemMetaSlide + '_' + i;
this.aMetaSlideSet.push( new MetaSlide( sMetaSlideId, this ) );
}
assert( this.aMetaSlideSet.length == this.nNumberOfSlides,
'MetaDocument: aMetaSlideSet.length != nNumberOfSlides.' );
}

MetaDocument.prototype =
{

getCurrentSlide : function()
{
return this.aMetaSlideSet[nCurSlide];
},

setCurrentSlide : function( nSlideIndex )
{
if( nSlideIndex >= 0 &&  nSlideIndex < this.nNumberOfSlides )
{
if( nCurSlide !== undefined )
this.aMetaSlideSet[nCurSlide].hide();
this.aMetaSlideSet[nSlideIndex].show();
nCurSlide = nSlideIndex;
}
else
{
log('MetaDocument.setCurrentSlide: slide index out of range: ' + nSlideIndex );
}
},


initSlideAnimationsMap : function()
{
var aAnimationsSection = document.getElementById( 'presentation-animations' );
if( aAnimationsSection )
{
var aAnimationsDefSet = aAnimationsSection.getElementsByTagName( 'defs' );

this.bIsAnimated = ( typeof aAnimationsDefSet.length =='number' &&
aAnimationsDefSet.length > 0 );

for( var i = 0; i < aAnimationsDefSet.length; ++i )
{
var sSlideId = aAnimationsDefSet[i].getAttributeNS( NSS['ooo'], aOOOAttrSlide );
var aChildSet = getElementChildren( aAnimationsDefSet[i] );
if( sSlideId && ( aChildSet.length === 1 ) )
{
this.aSlideAnimationsMap[ sSlideId ] = aChildSet[0];
}
}
}
}

}; // end MetaDocument prototype

function MetaSlide( sMetaSlideId, aMetaDoc )
{
this.theDocument = document;
this.id = sMetaSlideId;
this.theMetaDoc = aMetaDoc;

this.element = this.theDocument.getElementById( this.id );
assert( this.element,
'MetaSlide: meta_slide element <' + this.id + '> not found.' );

this.slideId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrSlide );
this.slideElement = this.theDocument.getElementById( this.slideId );
assert( this.slideElement,
'MetaSlide: slide element <' + this.slideId + '> not found.' );

if( this.slideId !== 'dummy_slide' )
this.nSlideNumber = parseInt( this.slideId.substr(2) );
else
this.nSlideNumber= -1;

this.aContainerElement = this.slideElement.parentNode;
this.slideContainerId = this.aContainerElement.getAttribute( 'id' );
this.aVisibilityStatusElement = this.aContainerElement.parentNode;

this.pageElement = getElementByClassName( this.slideElement, aPageClassName );
assert( this.pageElement,
'MetaSlide: page element <' + this.slideId + '> not found.' );

this.masterPage = this.initMasterPage();

this.nAreMasterObjectsVisible     = this.initVisibilityProperty( aOOOAttrMasterObjectsVisibility,  VISIBLE );
this.nIsBackgroundVisible         = this.initVisibilityProperty( aOOOAttrBackgroundVisibility,     VISIBLE );
this.nIsPageNumberVisible         = this.initVisibilityProperty( aOOOAttrPageNumberVisibility,     HIDDEN );
this.nIsDateTimeVisible           = this.initVisibilityProperty( aOOOAttrDateTimeVisibility,       VISIBLE );
this.nIsFooterVisible             = this.initVisibilityProperty( aOOOAttrFooterVisibility,         VISIBLE );
this.nIsHeaderVisible             = this.initVisibilityProperty( aOOOAttrHeaderVisibility,         VISIBLE );

this.bIsDateTimeVariable = undefined;

this.aTextFieldContentProviderSet = {};
this.aTextFieldContentProviderSet[aSlideNumberClassName]   = this.initSlideNumberFieldContentProvider();
this.aTextFieldContentProviderSet[aDateTimeClassName]      = this.initDateTimeFieldContentProvider( aOOOAttrDateTimeField );
this.aTextFieldContentProviderSet[aFooterClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrFooterField );
this.aTextFieldContentProviderSet[aHeaderClassName]        = this.initFixedTextFieldContentProvider( aOOOAttrHeaderField );

this.aTransitionHandler = null;
this.bHasTransition = this.initHasTransition() || true;
if( this.bHasTransition )
{
this.aTransitionHandler = new SlideTransition( this.getSlideAnimationsRoot(), this.slideId );
}

this.aSlideAnimationsHandler = new SlideAnimations( aSlideShow.getContext() );
this.aSlideAnimationsHandler.importAnimations( this.getSlideAnimationsRoot() );
this.aSlideAnimationsHandler.parseElements();

if( false && this.aSlideAnimationsHandler.aRootNode )
log( this.aSlideAnimationsHandler.aRootNode.info( true ) );

this.aTextShapeSet = this.collectTextShapes();

this.aHyperlinkSet = this.initHyperlinks();

}

MetaSlide.prototype =
{

show : function()
{
this.updateMasterPageView();
this.aVisibilityStatusElement.setAttribute( 'visibility', 'inherit' );
},

hide : function()
{
this.aVisibilityStatusElement.setAttribute( 'visibility', 'hidden' );
},

updateMasterPageView : function()
{
if( !this.aMasterPageView )
{
this.aMasterPageView = new MasterPageView( this );
this.aMasterPageView.attachToSlide();
}
this.aMasterPageView.update();
},

initMasterPage : function()
{
var sMasterPageId = this.element.getAttributeNS( NSS['ooo'], aOOOAttrMaster );

if( !this.theMetaDoc.aMasterPageSet.hasOwnProperty( sMasterPageId ) )
{
this.theMetaDoc.aMasterPageSet[ sMasterPageId ] = new MasterPage( sMasterPageId, this );

this.theMetaDoc.aTextFieldHandlerSet[ sMasterPageId ] = {};
}
return this.theMetaDoc.aMasterPageSet[ sMasterPageId ];
},

initHasTransition : function()
{
var sHasTransition = this.element.getAttributeNS( NSS['ooo'], aOOOAttrHasTransition );
return ( sHasTransition === 'true' );
},

initVisibilityProperty : function( aVisibilityAttribute, nDefaultValue )
{
var nVisibility = nDefaultValue;
var sVisibility = getOOOAttribute( this.element, aVisibilityAttribute );
if( sVisibility )
nVisibility = aVisibilityValue[ sVisibility ];
return nVisibility;
},

initSlideNumberFieldContentProvider : function()
{
return this.theMetaDoc.aSlideNumberProvider;
},

initDateTimeFieldContentProvider : function( aOOOAttrDateTimeField )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttrDateTimeField );
if( !sTextFieldId )  return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt(sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextField;
var aTextFieldElem = document.getElementById( sTextFieldId );
var sClassName = getClassAttribute( aTextFieldElem );
if( sClassName == 'FixedDateTimeField' )
{
aTextField = new FixedTextProvider( aTextFieldElem );
this.bIsDateTimeVariable = false;
}
else if( sClassName == 'VariableDateTimeField' )
{
aTextField = new CurrentDateTimeProvider( aTextFieldElem );
this.bIsDateTimeVariable = true;
}
else
{
aTextField = null;
}
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] = aTextField;
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

initFixedTextFieldContentProvider : function( aOOOAttribute )
{
var sTextFieldId = getOOOAttribute( this.element, aOOOAttribute );
if( !sTextFieldId ) return null;

var nLength = aOOOElemTextField.length + 1;
var nIndex = parseInt( sTextFieldId.substring( nLength ) );
if( typeof nIndex != 'number') return null;

if( !this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ] )
{
var aTextFieldElem = document.getElementById( sTextFieldId );
this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ]
= new FixedTextProvider( aTextFieldElem );
}
return this.theMetaDoc.aTextFieldContentProviderSet[ nIndex ];
},

collectTextShapes : function()
{
var aTextShapeSet = [];
var aTextShapeIndexElem = getElementByClassName( document, 'TextShapeIndex' );
if( aTextShapeIndexElem )
{
var aIndexEntryList = getElementChildren( aTextShapeIndexElem );
var i;
for( i = 0; i < aIndexEntryList.length; ++i )
{
var sSlideId = getOOOAttribute( aIndexEntryList[i], 'slide' );
if( sSlideId === this.slideId )
{
var sTextShapeIds = getOOOAttribute( aIndexEntryList[i], 'id-list' );
if( sTextShapeIds )
{
var aTextShapeIdSet =  sTextShapeIds.split( ' ' );
var j;
for( j = 0; j < aTextShapeIdSet.length; ++j )
{
var aTextShapeElem = document.getElementById( aTextShapeIdSet[j] );
if( aTextShapeElem )
{
aTextShapeSet.push( aTextShapeElem );
}
else
{
log( 'warning: MetaSlide.collectTextShapes: text shape with id <' + aTextShapeIdSet[j] + '> is not valid.'  );
}
}
}
break;
}
}
}
return aTextShapeSet;
},

initHyperlinks : function()
{
var aHyperlinkSet = {};
var i;
for( i = 0; i < this.aTextShapeSet.length; ++i )
{
if( this.aTextShapeSet[i] )
{
var aHyperlinkIdList = getElementByClassName( this.aTextShapeSet[i], 'HyperlinkIdList' );
if( aHyperlinkIdList )
{
var sHyperlinkIds = aHyperlinkIdList.textContent;
if( sHyperlinkIds )
{
var aHyperlinkIdSet = sHyperlinkIds.trim().split( ' ' );
var j;
for( j = 0; j < aHyperlinkIdSet.length; ++j )
{
var sId = aHyperlinkIdSet[j];
aHyperlinkSet[ sId ] = new HyperlinkElement( sId, this.aSlideAnimationsHandler.aEventMultiplexer );
}
}
}
}
}
return aHyperlinkSet;
},

getSlideAnimationsRoot : function()
{
return this.theMetaDoc.aSlideAnimationsMap[ this.slideId ];
}

}; // end MetaSlide prototype

function MasterPage( sMasterPageId, aMetaSlide )
{
this.id = sMasterPageId;
this.metaSlide = aMetaSlide;

this.element = document.getElementById( this.id );
assert( this.element,
'MasterPage: master page element <' + this.id + '> not found.' );

this.background = getElementByClassName( this.element, 'Background' );
if( this.background )
{
this.backgroundId = this.background.getAttribute( 'id' );
this.backgroundVisibility = initVisibilityProperty( this.background );
}
else
{
this.backgroundId = '';
log( 'MasterPage: the background element is not valid.' );
}

this.backgroundObjects = getElementByClassName( this.element, 'BackgroundObjects' );
if( this.backgroundObjects )
{
this.backgroundObjectsId = this.backgroundObjects.getAttribute( 'id' );
this.backgroundObjectsVisibility = initVisibilityProperty( this.backgroundObjects );

if( this.backgroundObjectsVisibility != HIDDEN )
{
var aBackgroundObjectList = getElementChildren( this.backgroundObjects );
var nFrom = 0;
var nCount = 0;
var nSubGroupId = 1;
var sClass;
var sId = '';
this.aBackgroundObjectSubGroupIdList = [];
var i = 0;
for( ; i < aBackgroundObjectList.length; ++i )
{
sClass = aBackgroundObjectList[i].getAttribute( 'class' );
if( !sClass || ( ( sClass !== aDateTimeClassName ) && ( sClass !== aFooterClassName )
&& ( sClass !== aHeaderClassName ) && ( sClass !== aSlideNumberClassName ) ) )
{
if( nCount === 0 )
{
nFrom = i;
sId = this.backgroundObjectsId + '.' + nSubGroupId;
++nSubGroupId;
this.aBackgroundObjectSubGroupIdList.push( sId );
}
++nCount;
}
else
{
this.aBackgroundObjectSubGroupIdList.push( sClass );
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
nCount = 0;
}
}
}
if( nCount !== 0 )
{
createElementGroup( this.backgroundObjects, aBackgroundObjectList, nFrom, nCount, 'BackgroundObjectSubgroup', sId );
}
}
}
else
{
this.backgroundObjectsId = '';
log( 'MasterPage: the background objects element is not valid.' );
}

this.aPlaceholderShapeSet = {};
this.initPlaceholderShapes();
}

MasterPage.prototype =
{

initPlaceholderShapes : function()
{
this.aPlaceholderShapeSet[ aSlideNumberClassName ] = new PlaceholderShape( this, aSlideNumberClassName );
this.aPlaceholderShapeSet[ aDateTimeClassName ] = new PlaceholderShape( this, aDateTimeClassName );
this.aPlaceholderShapeSet[ aFooterClassName ] = new PlaceholderShape( this, aFooterClassName );
this.aPlaceholderShapeSet[ aHeaderClassName ] = new PlaceholderShape( this, aHeaderClassName );
}

}; // end MasterPage prototype

function PlaceholderShape( aMasterPage, sClassName )
{
this.masterPage = aMasterPage;
this.className = sClassName;

this.element = null;
this.textElement = null;
this.init();
}

PlaceholderShape.prototype.isValid = function()
{
return ( this.element && this.textElement );
};


PlaceholderShape.prototype.init = function()
{

var aTextFieldElement = getElementByClassName( this.masterPage.backgroundObjects, this.className );
if( aTextFieldElement )
{
var aPlaceholderElement = getElementByClassName( aTextFieldElement, 'PlaceholderText' );
if( aPlaceholderElement )
{
var aSVGRectElem = getElementByClassName( aTextFieldElement, 'BoundingBox' );
if( aSVGRectElem )
{
var aRect = new Rectangle( aSVGRectElem );
var sTextAdjust = getOOOAttribute( aTextFieldElement, aOOOAttrTextAdjust ) || 'left';
var sTextAnchor, sX;
if( sTextAdjust == 'left' )
{
sTextAnchor = 'start';
sX = String( aRect.left );
}
else if( sTextAdjust == 'right' )
{
sTextAnchor = 'end';
sX = String( aRect.right );
}
else if( sTextAdjust == 'center' )
{
sTextAnchor = 'middle';
var nMiddle = ( aRect.left + aRect.right ) / 2;
sX = String( parseInt( String( nMiddle ) ) );
}
if( sTextAnchor )
aPlaceholderElement.setAttribute( 'text-anchor', sTextAnchor );
if( sX )
aPlaceholderElement.setAttribute( 'x', sX );
}

if( this.masterPage.metaSlide.theMetaDoc.bIsUsePositionedChars )
{
var aTextLineGroupElem = aPlaceholderElement.parentNode.parentNode;
if( aTextLineGroupElem )
{
var sFontFamilyAttr = aTextLineGroupElem.getAttribute( 'font-family' );
if( sFontFamilyAttr )
{
var aChildSet = getElementChildren( aTextLineGroupElem );
if( aChildSet.length > 1  )
var i = 1;
for( ; i < aChildSet.length; ++i )
{
aTextLineGroupElem.removeChild( aChildSet[i] );
}
}
}
}
this.element = aTextFieldElement;
this.textElement = aPlaceholderElement;
}
}
};

function MasterPageView( aMetaSlide )
{
this.aMetaSlide = aMetaSlide;
this.aSlideElement = aMetaSlide.slideElement;
this.aPageElement = aMetaSlide.pageElement;
this.aMasterPage = aMetaSlide.masterPage;
this.aMPVElement = this.createElement();
this.bIsAttached = false;
}


MasterPageView.prototype.attachToSlide = function()
{
if( !this.bIsAttached )
{
var aInsertedElement = this.aSlideElement.insertBefore( this.aMPVElement, this.aPageElement );
assert( aInsertedElement === this.aMPVElement,
'MasterPageView.attachToSlide: aInsertedElement != this.aMPVElement' );

this.bIsAttached = true;
}
};

MasterPageView.prototype.detachFromSlide = function()
{
if( this.bIsAttached )
{
this.aSlideElement.removeChild( this.aMPVElement );
this.bIsAttached = false;
}
};

MasterPageView.prototype.update = function()
{
if( this.aDateTimeFieldHandler && this.aMetaSlide.bIsDateTimeVariable )
this.aDateTimeFieldHandler.update();
};


MasterPageView.prototype.createElement = function()
{
var theDocument = document;
var aMasterPageViewElement = theDocument.createElementNS( NSS['svg'], 'g' );
assert( aMasterPageViewElement,
'MasterPageView.createElement: failed to create a master page view element.' );
aMasterPageViewElement.setAttribute( 'class', 'MasterPageView' );

var aWhiteRect = theDocument.createElementNS( NSS['svg'], 'rect' );
var nWidthExt = WIDTH / 1000;
var nHeightExt = HEIGHT / 1000;
aWhiteRect.setAttribute( 'x', String( -nWidthExt / 2 ) );
aWhiteRect.setAttribute( 'y', String( -nHeightExt / 2 ) );
aWhiteRect.setAttribute( 'width', String( WIDTH + nWidthExt ) );
aWhiteRect.setAttribute( 'height', String( HEIGHT + nHeightExt ) );
aWhiteRect.setAttribute( 'fill', '#FFFFFF' );
aMasterPageViewElement.appendChild( aWhiteRect );

if( this.aMetaSlide.nIsBackgroundVisible )
{
this.aBackgroundElement = theDocument.createElementNS( NSS['svg'], 'use' );
this.aBackgroundElement.setAttribute( 'class', 'Background' );
setNSAttribute( 'xlink', this.aBackgroundElement,
'href', '#' + this.aMasterPage.backgroundId );

aMasterPageViewElement.appendChild( this.aBackgroundElement );
}

if( this.aMetaSlide.nAreMasterObjectsVisible )
{
this.aBackgroundObjectsElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aBackgroundObjectsElement.setAttribute( 'class', 'BackgroundObjects' );

var aBackgroundObjectSubGroupIdList = this.aMasterPage.aBackgroundObjectSubGroupIdList;
this.aBackgroundSubGroupElementSet = [];
var aPlaceholderShapeSet = this.aMasterPage.aPlaceholderShapeSet;
var aTextFieldContentProviderSet = this.aMetaSlide.aTextFieldContentProviderSet;
var aDefsElement = this.aMetaSlide.element.parentNode;
var aTextFieldHandlerSet = this.aMetaSlide.theMetaDoc.aTextFieldHandlerSet;
var sMasterSlideId = this.aMasterPage.id;

var i = 0;
var sId;
for( ; i < aBackgroundObjectSubGroupIdList.length; ++i )
{
sId = aBackgroundObjectSubGroupIdList[i];
if( sId === aSlideNumberClassName )
{
if( aPlaceholderShapeSet[aSlideNumberClassName] &&
aPlaceholderShapeSet[aSlideNumberClassName].isValid() &&
this.aMetaSlide.nIsPageNumberVisible &&
aTextFieldContentProviderSet[aSlideNumberClassName] )
{
this.aSlideNumberFieldHandler =
new SlideNumberFieldHandler( aPlaceholderShapeSet[aSlideNumberClassName],
aTextFieldContentProviderSet[aSlideNumberClassName] );
this.aSlideNumberFieldHandler.update( this.aMetaSlide.nSlideNumber );
this.aSlideNumberFieldHandler.appendTo( this.aBackgroundObjectsElement );
}
}
else if( sId === aDateTimeClassName )
{
if( this.aMetaSlide.nIsDateTimeVisible )
{
this.aDateTimeFieldHandler =
this.initTextFieldHandler( aDateTimeClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aFooterClassName )
{
if( this.aMetaSlide.nIsFooterVisible )
{
this.aFooterFieldHandler =
this.initTextFieldHandler( aFooterClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else if( sId === aHeaderClassName )
{
if( this.aMetaSlide.nIsHeaderVisible )
{
this.aHeaderFieldHandler =
this.initTextFieldHandler( aHeaderClassName, aPlaceholderShapeSet,
aTextFieldContentProviderSet, aDefsElement,
aTextFieldHandlerSet, sMasterSlideId );
}
}
else
{
var aBackgroundSubGroupElement = theDocument.createElementNS( NSS['svg'], 'use' );
aBackgroundSubGroupElement.setAttribute( 'class', 'BackgroundObjectSubGroup' );
setNSAttribute( 'xlink', aBackgroundSubGroupElement,
'href', '#' + sId );
this.aBackgroundSubGroupElementSet.push( aBackgroundSubGroupElement );
this.aBackgroundObjectsElement.appendChild( aBackgroundSubGroupElement );
}

}
aMasterPageViewElement.appendChild( this.aBackgroundObjectsElement );
}

return aMasterPageViewElement;
};

MasterPageView.prototype.initTextFieldHandler =
function( sClassName, aPlaceholderShapeSet, aTextFieldContentProviderSet,
aDefsElement, aTextFieldHandlerSet, sMasterSlideId )
{
var aTextFieldHandler = null;
if( aPlaceholderShapeSet[sClassName] &&
aPlaceholderShapeSet[sClassName].isValid()
&& aTextFieldContentProviderSet[sClassName] )
{
var sTextFieldContentProviderId = aTextFieldContentProviderSet[sClassName].sId;
if ( !aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] )
{
aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ] =
new TextFieldHandler( aPlaceholderShapeSet[sClassName],
aTextFieldContentProviderSet[sClassName] );
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
aTextFieldHandler.update();
aTextFieldHandler.appendTo( aDefsElement );
}
else
{
aTextFieldHandler = aTextFieldHandlerSet[ sMasterSlideId ][ sTextFieldContentProviderId ];
}

var aTextFieldElement = document.createElementNS( NSS['svg'], 'use' );
aTextFieldElement.setAttribute( 'class', sClassName );
setNSAttribute( 'xlink', aTextFieldElement,
'href', '#' + aTextFieldHandler.sId );
this.aBackgroundObjectsElement.appendChild( aTextFieldElement );
}
return aTextFieldHandler;
};

function TextFieldHandler( aPlaceholderShape, aTextContentProvider )
{
this.aPlaceHolderShape = aPlaceholderShape;
this.aTextContentProvider = aTextContentProvider;
assert( this.aTextContentProvider,
'TextFieldHandler: text content provider not defined.' );
this.sId = 'tf' + String( TextFieldHandler.getUniqueId() );
this.aTextFieldElement = null;
this.aTextPlaceholderElement = null;
this.cloneElement();
}


TextFieldHandler.CURR_UNIQUE_ID = 0;

TextFieldHandler.getUniqueId = function()
{
++TextFieldHandler.CURR_UNIQUE_ID;
return TextFieldHandler.CURR_UNIQUE_ID;
};

TextFieldHandler.prototype.cloneElement = function()
{
assert( this.aPlaceHolderShape && this.aPlaceHolderShape.isValid(),
'TextFieldHandler.cloneElement: placeholder shape is not valid.' );
this.aTextFieldElement = this.aPlaceHolderShape.element.cloneNode( true /* deep clone */ );
assert( this.aTextFieldElement,
'TextFieldHandler.cloneElement: aTextFieldElement is not defined' );
this.aTextFieldElement.setAttribute( 'id', this.sId );
this.aTextFieldElement.removeAttribute( 'visibility' );
this.aTextPlaceholderElement = getElementByClassName( this.aTextFieldElement, 'PlaceholderText' );
assert( this.aTextPlaceholderElement,
'TextFieldHandler.cloneElement: aTextPlaceholderElement is not defined' );
};


TextFieldHandler.prototype.appendTo = function( aParentNode )
{
if( !this.aTextFieldElement )
{
log( 'TextFieldHandler.appendTo: aTextFieldElement is not defined' );
return;
}
if( !aParentNode )
{
log( 'TextFieldHandler.appendTo: parent node is not defined' );
return;
}

aParentNode.appendChild( this.aTextFieldElement );
};

TextFieldHandler.prototype.setTextContent = function( sText )
{
if( !this.aTextPlaceholderElement )
{
log( 'PlaceholderShape.setTextContent: text element is not valid in placeholder of type '
+ this.className + ' that belongs to master slide ' + this.masterPage.id );
return;
}
this.aTextPlaceholderElement.textContent = sText;
};

TextFieldHandler.prototype.update = function()
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this );
};

function SlideNumberFieldHandler( aPlaceholderShape, aTextContentProvider )
{
SlideNumberFieldHandler.superclass.constructor.call( this, aPlaceholderShape, aTextContentProvider );
}
extend( SlideNumberFieldHandler, TextFieldHandler );


SlideNumberFieldHandler.prototype.update = function( nPageNumber )
{
if( !this.aTextContentProvider )
log('TextFieldHandler.update: text content provider not defined.');
else
this.aTextContentProvider.update( this, nPageNumber );
};


function TextFieldContentProvider( aTextFieldContentElement )
{
if( aTextFieldContentElement )
this.sId = aTextFieldContentElement.getAttribute( 'id' );
}

function FixedTextProvider( aTextFieldContentElement )
{
FixedTextProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.text = aTextFieldContentElement.textContent;
}
extend( FixedTextProvider, TextFieldContentProvider );


FixedTextProvider.prototype.update = function( aFixedTextField )
{
aFixedTextField.setTextContent( this.text );
};

function CurrentDateTimeProvider( aTextFieldContentElement )
{
CurrentDateTimeProvider.superclass.constructor.call( this, aTextFieldContentElement );
this.dateTimeFormat = getOOOAttribute( aTextFieldContentElement, aOOOAttrDateTimeFormat );
}
extend( CurrentDateTimeProvider, TextFieldContentProvider );


CurrentDateTimeProvider.prototype.update = function( aDateTimeField )
{
var sText = this.createDateTimeText( this.dateTimeFormat );
aDateTimeField.setTextContent( sText );
};


CurrentDateTimeProvider.prototype.createDateTimeText = function( /*sDateTimeFormat*/ )
{
var aDate = new Date();
var sDate = aDate.toLocaleString();
return sDate;
};

function SlideNumberProvider( nInitialSlideNumber, sPageNumberingType )
{
SlideNumberProvider.superclass.constructor.call( this, null );
this.nInitialSlideNumber = nInitialSlideNumber;
this.pageNumberingType = sPageNumberingType;

}
extend( SlideNumberProvider, TextFieldContentProvider );


SlideNumberProvider.prototype.getNumberingType = function()
{
return this.pageNumberingType;
};


SlideNumberProvider.prototype.update = function( aSlideNumberField, nSlideNumber )
{
if( nSlideNumber === undefined )
{
if( nCurSlide === undefined )
nSlideNumber = this.nInitialSlideNumber;
else
nSlideNumber = nCurSlide + 1;
}
var sText = this.createSlideNumberText( nSlideNumber, this.getNumberingType() );
aSlideNumberField.setTextContent( sText );
};


SlideNumberProvider.prototype.createSlideNumberText = function( nSlideNumber /*, sNumberingType*/ )
{
return String( nSlideNumber );
};


function SlideIndexPage()
{
this.pageElementId = 'slide_index';
this.pageBgColor = 'rgb(252,252,252)';
this.pageElement = this.createPageElement();
assert( this.pageElement, 'SlideIndexPage: pageElement is not valid' );
this.indexColumns = INDEX_COLUMNS_DEFAULT;
this.totalThumbnails = this.indexColumns * this.indexColumns;
this.selectedSlideIndex = undefined;

this.xSpacingFactor = 600/28000;
this.ySpacingFactor = 450/21000;
this.xSpacing = WIDTH * this.xSpacingFactor;
this.ySpacing = HEIGHT * this.ySpacingFactor;
this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

this.thumbnailMouseAreaTemplateId = 'thumbnail_mouse_area';
this.thumbnailMouseAreaTemplateElement = null;
this.thumbnailBorderTemplateId = 'thumbnail_border';
this.thumbnailBorderTemplateElement = null;
this.createTemplateElements();

this.aThumbnailSet = new Array( this.totalThumbnails );
for( var i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = 0;
}


SlideIndexPage.prototype.getTotalThumbnails = function()
{
return this.totalThumbnails;
};

SlideIndexPage.prototype.show = function()
{
this.pageElement.setAttribute( 'display', 'inherit' );
};

SlideIndexPage.prototype.hide = function()
{
this.pageElement.setAttribute( 'display', 'none' );
};

SlideIndexPage.prototype.setSelection = function( nIndex )
{
nIndex = getSafeIndex( nIndex, 0, this.getTotalThumbnails() - 1 );
if( this.curThumbnailIndex != nIndex )
{
this.aThumbnailSet[ this.curThumbnailIndex ].unselect();
this.aThumbnailSet[ nIndex ].select();
this.curThumbnailIndex = nIndex;
}
this.selectedSlideIndex = this.aThumbnailSet[ nIndex ].slideIndex;
};

SlideIndexPage.prototype.createPageElement = function()
{
var aPageElement = document.createElementNS( NSS['svg'], 'g' );
aPageElement.setAttribute( 'id', this.pageElementId );
aPageElement.setAttribute( 'display', 'none' );
aPageElement.setAttribute( 'visibility', 'visible' );

var sPageBgColor = this.pageBgColor + ';';
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'style', 'stroke:none;fill:' + sPageBgColor );

aPageElement.appendChild( aRectElement );
ROOT_NODE.appendChild( aPageElement );
return( document.getElementById( this.pageElementId ) );
};

SlideIndexPage.prototype.createTemplateElements = function()
{
var aDefsElement = document.createElementNS( NSS['svg'], 'defs' );
var aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailBorderTemplateId );
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );
aRectElement.setAttribute( 'fill', 'none' );
aDefsElement.appendChild( aRectElement );

aRectElement = document.createElementNS( NSS['svg'], 'rect' );
aRectElement.setAttribute( 'id', this.thumbnailMouseAreaTemplateId );
aRectElement.setAttribute( 'x', 0 );
aRectElement.setAttribute( 'y', 0 );
aRectElement.setAttribute( 'width', WIDTH );
aRectElement.setAttribute( 'height', HEIGHT );
aRectElement.setAttribute( 'fill', this.pageBgColor );
aDefsElement.appendChild( aRectElement );

this.pageElement.appendChild( aDefsElement );

this.thumbnailMouseAreaTemplateElement = document.getElementById( this.thumbnailMouseAreaTemplateId );
this.thumbnailBorderTemplateElement = document.getElementById( this.thumbnailBorderTemplateId );
};

SlideIndexPage.prototype.decreaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns - 1 );
};

SlideIndexPage.prototype.increaseNumberOfColumns  = function()
{
this.setNumberOfColumns( this.indexColumns + 1 );
};

SlideIndexPage.prototype.resetNumberOfColumns  = function()
{
this.setNumberOfColumns( INDEX_COLUMNS_DEFAULT );
};

SlideIndexPage.prototype.setNumberOfColumns  = function( nNumberOfColumns )
{
if( this.indexColumns == nNumberOfColumns )  return;
if( nNumberOfColumns < 2 || nNumberOfColumns > 6 ) return;

var suspendHandle = ROOT_NODE.suspendRedraw(500);

var nOldTotalThumbnails = this.totalThumbnails;
this.indexColumns = nNumberOfColumns;
this.totalThumbnails = nNumberOfColumns * nNumberOfColumns;

this.aThumbnailSet[this.curThumbnailIndex].unselect();

var i;
for( i = this.totalThumbnails; i < nOldTotalThumbnails; ++i )
{
this.aThumbnailSet[i].removeElement();
}

for( i = nOldTotalThumbnails; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i] = new Thumbnail( this, i );
}

this.halfBorderWidthFactor = ( 300/28000 ) * ( this.indexColumns / 3 );
this.halfBorderWidth = WIDTH * this.halfBorderWidthFactor;
this.borderWidth = 2 * this.halfBorderWidth;
this.scaleFactor = ( 1 - ( this.indexColumns + 1 ) * this.xSpacingFactor ) /
( this.indexColumns * ( 1 + 2 * this.halfBorderWidthFactor ) );

var aRectElement = this.thumbnailBorderTemplateElement;
aRectElement.setAttribute( 'x', -this.halfBorderWidth );
aRectElement.setAttribute( 'y', -this.halfBorderWidth );
aRectElement.setAttribute( 'rx', this.halfBorderWidth );
aRectElement.setAttribute( 'ry', this.halfBorderWidth );
aRectElement.setAttribute( 'width', WIDTH + this.halfBorderWidth );
aRectElement.setAttribute( 'height', HEIGHT + this.halfBorderWidth );
aRectElement.setAttribute( 'stroke-width', this.borderWidth );

for( i = 0; i < this.totalThumbnails; ++i )
{
this.aThumbnailSet[i].updateView();
}

this.curThumbnailIndex = this.selectedSlideIndex % this.totalThumbnails;
this.aThumbnailSet[this.curThumbnailIndex].select();

INDEX_OFFSET = -1;
indexSetPageSlide( this.selectedSlideIndex );

ROOT_NODE.unsuspendRedraw( suspendHandle );
ROOT_NODE.forceRedraw();
};


function Thumbnail( aSlideIndexPage, nIndex )
{
this.container = aSlideIndexPage;
this.index = nIndex;//= getSafeIndex( nIndex, 0, this.container.getTotalThumbnails() );
this.pageElement = this.container.pageElement;
this.thumbnailId = 'thumbnail' + this.index;
this.thumbnailElement = this.createThumbnailElement();
this.slideElement = getElementByClassName( this.thumbnailElement, 'Slide' );
this.borderElement = getElementByClassName( this.thumbnailElement, 'Border' );
this.mouseAreaElement = getElementByClassName( this.thumbnailElement, 'MouseArea' );
this.aTransformSet = new Array( 3 );
this.visibility = VISIBLE;
this.isSelected = false;
}

Thumbnail.prototype.sNormalBorderColor = 'rgb(216,216,216)';
Thumbnail.prototype.sSelectionBorderColor = 'rgb(92,92,255)';

Thumbnail.prototype.removeElement = function()
{
if( this.thumbnailElement )
this.container.pageElement.removeChild( this.thumbnailElement );
};

Thumbnail.prototype.show = function()
{
if( this.visibility == HIDDEN )
{
this.thumbnailElement.setAttribute( 'display', 'inherit' );
this.visibility = VISIBLE;
}
};

Thumbnail.prototype.hide = function()
{
if( this.visibility == VISIBLE )
{
this.thumbnailElement.setAttribute( 'display', 'none' );
this.visibility = HIDDEN;
}
};

Thumbnail.prototype.select = function()
{
if( !this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sSelectionBorderColor );
this.isSelected = true;
}
};

Thumbnail.prototype.unselect = function()
{
if( this.isSelected )
{
this.borderElement.setAttribute( 'stroke', this.sNormalBorderColor );
this.isSelected = false;
}
};

Thumbnail.prototype.updateView = function()
{
this.column = this.index % this.container.indexColumns;
this.row = ( this.index - this.column ) / this.container.indexColumns;
this.halfBorderWidth = this.container.halfBorderWidth;
this.borderWidth = this.container.borderWidth;
this.width = ( WIDTH + this.borderWidth ) * this.container.scaleFactor;
this.height = ( HEIGHT + this.borderWidth ) * this.container.scaleFactor;
this.aTransformSet[2] = 'translate(' + this.halfBorderWidth + ' ' + this.halfBorderWidth + ')';
this.aTransformSet[1] = 'scale(' + this.container.scaleFactor + ')';
var sTransformAttrValue = this.computeTransform();
this.thumbnailElement.setAttribute( 'transform', sTransformAttrValue );
this.mouseAreaElement.setAttribute( 'onmouseover', 'theSlideIndexPage.aThumbnailSet[' + this.index  + '].onMouseOver()' );
};

Thumbnail.prototype.update = function( nIndex )
{
if( this.slideIndex == nIndex )  return;

var aMetaSlide = theMetaDoc.aMetaSlideSet[nIndex];
aMetaSlide.updateMasterPageView();
setNSAttribute( 'xlink', this.slideElement, 'href', '#' + aMetaSlide.slideId );
this.slideIndex = nIndex;
};

Thumbnail.prototype.clear = function( )
{
setNSAttribute( 'xlink', this.slideElement, 'href', '' );
};

Thumbnail.prototype.createThumbnailElement = function()
{
var aThumbnailElement = document.createElementNS( NSS['svg'], 'g' );
aThumbnailElement.setAttribute( 'id', this.thumbnailId );
aThumbnailElement.setAttribute( 'display', 'inherit' );

var aSlideElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aSlideElement, 'href', '' );
aSlideElement.setAttribute( 'class', 'Slide' );
aThumbnailElement.appendChild( aSlideElement );

var aMouseAreaElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aMouseAreaElement, 'href', '#' + this.container.thumbnailMouseAreaTemplateId );
aMouseAreaElement.setAttribute( 'class', 'MouseArea' );
aMouseAreaElement.setAttribute( 'opacity', 0.0 );
aThumbnailElement.appendChild( aMouseAreaElement );

var aBorderElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', aBorderElement, 'href', '#' + this.container.thumbnailBorderTemplateId );
aBorderElement.setAttribute( 'stroke', this.sNormalBorderColor );
aBorderElement.setAttribute( 'class', 'Border' );
aThumbnailElement.appendChild( aBorderElement );

this.container.pageElement.appendChild( aThumbnailElement );
return( document.getElementById( this.thumbnailId ) );
};

Thumbnail.prototype.computeTransform = function()
{
var nXSpacing = this.container.xSpacing;
var nYSpacing = this.container.ySpacing;

var nXOffset = nXSpacing + ( this.width + nXSpacing ) * this.column;
var nYOffset = nYSpacing + ( this.height + nYSpacing ) * this.row;

this.aTransformSet[0] = 'translate(' + nXOffset + ' ' + nYOffset + ')';

var sTransform = this.aTransformSet.join( ' ' );

return sTransform;
};

Thumbnail.prototype.onMouseOver = function()
{
if( ( currentMode == INDEX_MODE ) && ( this.container.curThumbnailIndex !=  this.index ) )
{
this.container.setSelection( this.index );
}
};


function init()
{
var VIEWBOX = ROOT_NODE.getAttribute('viewBox');

if( VIEWBOX )
{
WIDTH = ROOT_NODE.viewBox.animVal.width;
HEIGHT = ROOT_NODE.viewBox.animVal.height;
}

aSlideShow = new SlideShow();
theMetaDoc =  new MetaDocument();
aSlideShow.bIsEnabled = theMetaDoc.bIsAnimated;
theSlideIndexPage = new SlideIndexPage();
aSlideShow.displaySlide( theMetaDoc.nStartSlideNumber, false );
}

function presentationEngineStop()
{
alert( 'We are sorry! An unexpected error occurred.\nThe presentation engine will be stopped' );
document.onkeydown = null;
document.onkeypress = null;
document.onclick = null;
window.onmousewheel = null;
}

function assert( condition, message )
{
if (!condition)
{
presentationEngineStop();
if (typeof console == 'object')
console.trace();
throw new Error( message );
}
}

function dispatchEffects(dir)
{

if( dir == 1 )
{
var bRet = aSlideShow.nextEffect();

if( !bRet )
{
switchSlide( 1, false );
}
}
else
{
switchSlide( dir, false );
}
}

function skipAllEffects()
{
var bRet = aSlideShow.skipAllEffects();
if( !bRet )
{
switchSlide( 1, true );
}
}

function skipEffects(dir)
{
if( dir == 1 )
{
var bRet = aSlideShow.skipPlayingOrNextEffect();

if( !bRet )
{
switchSlide( 1, true );
}
}
else
{
switchSlide( dir, true );
}
}

function switchSlide( nOffset, bSkipTransition )
{
var nNextSlide = nCurSlide + nOffset;
aSlideShow.displaySlide( nNextSlide, bSkipTransition );
}

function displayIndex( offsetNumber )
{
var aMetaSlideSet = theMetaDoc.aMetaSlideSet;
offsetNumber = getSafeIndex( offsetNumber, 0, aMetaSlideSet.length - 1 );

var nTotalThumbnails = theSlideIndexPage.getTotalThumbnails();
var nEnd = Math.min( offsetNumber + nTotalThumbnails, aMetaSlideSet.length);

var aThumbnailSet = theSlideIndexPage.aThumbnailSet;
var j = 0;
for( var i = offsetNumber; i < nEnd; ++i, ++j )
{
aThumbnailSet[j].update( i );
aThumbnailSet[j].show();
}
for( ; j < nTotalThumbnails; ++j )
{
aThumbnailSet[j].hide();
}

if (INDEX_OFFSET != offsetNumber)
INDEX_OFFSET = offsetNumber;
}

function toggleSlideIndex()
{
if( currentMode == SLIDE_MODE )
{

theMetaDoc.getCurrentSlide().hide();
INDEX_OFFSET = -1;
indexSetPageSlide( nCurSlide );
theSlideIndexPage.show();
currentMode = INDEX_MODE;
}
else if( currentMode == INDEX_MODE )
{
theSlideIndexPage.hide();
var nNewSlide = theSlideIndexPage.selectedSlideIndex;

aSlideShow.displaySlide( nNewSlide, true );
currentMode = SLIDE_MODE;
}
}

function abandonIndexMode()
{
theSlideIndexPage.selectedSlideIndex = nCurSlide;
toggleSlideIndex();
}


var CURR_UNIQUE_ID = 0;

function getUniqueId()
{
++CURR_UNIQUE_ID;
return CURR_UNIQUE_ID;
}

function mem_fn( sMethodName )
{
return  function( aObject )
{
var aMethod = aObject[ sMethodName ];
if( aMethod )
aMethod.call( aObject );
else
log( 'method sMethodName not found' );
};
}

function bind( aObject, aMethod )
{
return  function()
{
return aMethod.call( aObject, arguments[0] );
};
}

function bind2( aFunction )
{
if( !aFunction  )
log( 'bind2: passed function is not valid.' );

var aBoundArgList = arguments;

var aResultFunction = null;

switch( aBoundArgList.length )
{
case 1: aResultFunction = function()
{
return aFunction.call( arguments[0], arguments[1],
arguments[2], arguments[3],
arguments[4] );
};
break;
case 2: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], arguments[0],
arguments[1], arguments[2],
arguments[3] );
};
break;
case 3: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
arguments[0], arguments[1],
arguments[2] );
};
break;
case 4: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], arguments[0],
arguments[1] );
};
break;
case 5: aResultFunction = function()
{
return aFunction.call( aBoundArgList[1], aBoundArgList[2],
aBoundArgList[3], aBoundArgList[4],
arguments[0] );
};
break;
default:
log( 'bind2: arity not handled.' );
}

return aResultFunction;
}

function getCurrentSystemTime()
{
return ( new Date() ).getTime();
}

function getSlideAnimationsRoot( sSlideId )
{
return theMetaDoc.aSlideAnimationsMap[ sSlideId ];
}

function getElementChildren( aElement )
{
var aChildrenArray = [];

var nSize = aElement.childNodes.length;

for( var i = 0; i < nSize; ++i )
{
if( aElement.childNodes[i].nodeType == 1 )
aChildrenArray.push( aElement.childNodes[i] );
}

return aChildrenArray;
}

function removeWhiteSpaces( str )
{
if( !str )
return '';

var re = / */;
var aSplitString = str.split( re );
return aSplitString.join('');
}

function clamp( nValue, nMinimum, nMaximum )
{
if( nValue < nMinimum )
{
return nMinimum;
}
else if( nValue > nMaximum )
{
return nMaximum;
}
else
{
return nValue;
}
}

function makeMatrixString( a, b, c, d, e, f )
{
var s = 'matrix(';
s += a + ', ';
s += b + ', ';
s += c + ', ';
s += d + ', ';
s += e + ', ';
s += f + ')';

return s;
}

function matrixToString( aSVGMatrix )
{
return makeMatrixString( aSVGMatrix.a, aSVGMatrix.b, aSVGMatrix.c,
aSVGMatrix.d, aSVGMatrix.e, aSVGMatrix.f );
}


function numberParser( sValue )
{
if( sValue === '.' )
return undefined;
var reFloatNumber = /^[+-]?[0-9]*[.]?[0-9]*$/;

if( reFloatNumber.test( sValue ) )
return parseFloat( sValue );
else
return undefined;
}

function booleanParser( sValue )
{
sValue = sValue.toLowerCase();
if( sValue === 'true' )
return true;
else if( sValue === 'false' )
return false;
else
return undefined;
}

function colorParser( sValue )
{

function hsl( nHue, nSaturation, nLuminance )
{
return new HSLColor( nHue, nSaturation / 100, nLuminance / 100 );
}

function rgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 255, nGreen / 255, nBlue / 255 );
}

function prgb( nRed, nGreen, nBlue )
{
return new RGBColor( nRed / 100, nGreen / 100, nBlue / 100 );
}

var sCommaPattern = ' *[,] *';
var sIntegerPattern = '[+-]?[0-9]+';
var sHexDigitPattern = '[0-9A-Fa-f]';

var sHexColorPattern = '#(' + sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})('
+ sHexDigitPattern + '{2})';

var sRGBIntegerPattern = 'rgb[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + sCommaPattern
+ sIntegerPattern + ' *[)]';

var sRGBPercentPattern = 'rgb[(] *' + sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var sHSLPercentPattern = 'hsl[(] *' + sIntegerPattern + sCommaPattern
+ sIntegerPattern + '%' + sCommaPattern
+ sIntegerPattern + '%' + ' *[)]';

var reHexColor = new RegExp( sHexColorPattern );
var reRGBInteger = new RegExp( sRGBIntegerPattern );
var reRGBPercent = new RegExp( sRGBPercentPattern );
var reHSLPercent = new RegExp( sHSLPercentPattern );

if( reHexColor.test( sValue ) )
{
var aRGBTriple = reHexColor.exec( sValue );

var nRed    = parseInt( aRGBTriple[1], 16 ) / 255;
var nGreen  = parseInt( aRGBTriple[2], 16 ) / 255;
var nBlue   = parseInt( aRGBTriple[3], 16 ) / 255;

return new RGBColor( nRed, nGreen, nBlue );
}
else if( reHSLPercent.test( sValue ) )
{
sValue = sValue.replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else if( reRGBInteger.test( sValue ) )
{
return eval( sValue );
}
else if( reRGBPercent.test( sValue ) )
{
sValue = 'p' + sValue.replace( '%', '' ).replace( '%', '' ).replace( '%', '' );
return eval( sValue );
}
else
{
return null;
}
}


function RGBColor( nRed, nGreen, nBlue )
{
this.eColorSpace = COLOR_SPACE_RGB;
this.nRed = nRed;
this.nGreen = nGreen;
this.nBlue = nBlue;
}


RGBColor.prototype.clone = function()
{
return new RGBColor( this.nRed, this.nGreen, this.nBlue );
};

RGBColor.prototype.equal = function( aRGBColor )
{
return ( this.nRed == aRGBColor.nRed ) &&
( this.nGreen == aRGBColor.nGreen ) &&
( this.nBlue == aRGBColor.nBlue );
};

RGBColor.prototype.add = function( aRGBColor )
{
this.nRed += aRGBColor.nRed;
this.nGreen += aRGBColor.nGreen;
this.nBlue += aRGBColor.nBlue;
return this;
};

RGBColor.prototype.scale = function( aT )
{
this.nRed *= aT;
this.nGreen *= aT;
this.nBlue *= aT;
return this;
};

RGBColor.clamp = function( aRGBColor )
{
var aClampedRGBColor = new RGBColor( 0, 0, 0 );

aClampedRGBColor.nRed   = clamp( aRGBColor.nRed, 0.0, 1.0 );
aClampedRGBColor.nGreen = clamp( aRGBColor.nGreen, 0.0, 1.0 );
aClampedRGBColor.nBlue  = clamp( aRGBColor.nBlue, 0.0, 1.0 );

return aClampedRGBColor;
};

RGBColor.prototype.convertToHSL = function()
{
var nRed   = clamp( this.nRed, 0.0, 1.0 );
var nGreen = clamp( this.nGreen, 0.0, 1.0 );
var nBlue  = clamp( this.nBlue, 0.0, 1.0 );

var nMax = Math.max( nRed, nGreen, nBlue );
var nMin = Math.min( nRed, nGreen, nBlue );
var nDelta = nMax - nMin;

var nLuminance  = ( nMax + nMin ) / 2.0;
var nSaturation = 0.0;
var nHue = 0.0;
if( nDelta !== 0 )
{
nSaturation = ( nLuminance > 0.5 ) ?
( nDelta / ( 2.0 - nMax - nMin) ) :
( nDelta / ( nMax + nMin ) );

if( nRed == nMax )
nHue = ( nGreen - nBlue ) / nDelta;
else if( nGreen == nMax )
nHue = 2.0 + ( nBlue - nRed ) / nDelta;
else if( nBlue == nMax )
nHue = 4.0 + ( nRed - nGreen ) / nDelta;

nHue *= 60.0;

if( nHue < 0.0 )
nHue += 360.0;
}

return new HSLColor( nHue, nSaturation, nLuminance );

};

RGBColor.prototype.toString = function( bClamped )
{
var aRGBColor;
if( bClamped )
{
aRGBColor = RGBColor.clamp( this );
}
else
{
aRGBColor = this;
}

var nRed = Math.round( aRGBColor.nRed * 255 );
var nGreen = Math.round( aRGBColor.nGreen * 255 );
var nBlue = Math.round( aRGBColor.nBlue * 255 );

return ( 'rgb(' + nRed + ',' + nGreen + ',' + nBlue + ')' );
};

RGBColor.interpolate = function( aStartRGB , aEndRGB, nT )
{
var aResult = aStartRGB.clone();
var aTEndRGB = aEndRGB.clone();
aResult.scale( 1.0 - nT );
aTEndRGB.scale( nT );
aResult.add( aTEndRGB );

return aResult;
};


function HSLColor( nHue, nSaturation, nLuminance )
{
this.eColorSpace = COLOR_SPACE_HSL;
this.nHue = nHue;
this.nSaturation = nSaturation;
this.nLuminance = nLuminance;

this.normalizeHue();
}


HSLColor.prototype.clone = function()
{
return new HSLColor( this.nHue, this.nSaturation, this.nLuminance );
};

HSLColor.prototype.equal = function( aHSLColor )
{
return ( this.nHue == aHSLColor.nHue ) &&
( this.nSaturation += aHSLColor.nSaturation ) &&
( this.nLuminance += aHSLColor.nLuminance );
};

HSLColor.prototype.add = function( aHSLColor )
{
this.nHue += aHSLColor.nHue;
this.nSaturation += aHSLColor.nSaturation;
this.nLuminance += aHSLColor.nLuminance;
this.normalizeHue();
return this;
};

HSLColor.prototype.scale = function( aT )
{
this.nHue *= aT;
this.nSaturation *= aT;
this.nLuminance *= aT;
this.normalizeHue();
return this;
};

HSLColor.clamp = function( aHSLColor )
{
var aClampedHSLColor = new HSLColor( 0, 0, 0 );

aClampedHSLColor.nHue = aHSLColor.nHue % 360;
if( aClampedHSLColor.nHue < 0 )
aClampedHSLColor.nHue += 360;
aClampedHSLColor.nSaturation = clamp( aHSLColor.nSaturation, 0.0, 1.0 );
aClampedHSLColor.nLuminance = clamp( aHSLColor.nLuminance, 0.0, 1.0 );
};

HSLColor.prototype.normalizeHue = function()
{
this.nHue = this.nHue % 360;
if( this.nHue < 0 ) this.nHue += 360;
};

HSLColor.prototype.toString = function()
{
return 'hsl(' + this.nHue.toFixed( 3 ) + ','
+ this.nSaturation.toFixed( 3 ) + ','
+ this.nLuminance.toFixed( 3 ) + ')';
};

HSLColor.prototype.convertToRGB = function()
{

var nHue = this.nHue % 360;
if( nHue < 0 ) nHue += 360;
var nSaturation =  clamp( this.nSaturation, 0.0, 1.0 );
var nLuminance = clamp( this.nLuminance, 0.0, 1.0 );


if( nSaturation === 0 )
{
return new RGBColor( nLuminance, nLuminance, nLuminance );
}

var nVal1 = ( nLuminance <= 0.5 ) ?
( nLuminance * (1.0 + nSaturation) ) :
( nLuminance + nSaturation - nLuminance * nSaturation );

var nVal2 = 2.0 * nLuminance - nVal1;

var nRed    = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue + 120 );
var nGreen  = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue );
var nBlue   = HSLColor.hsl2rgbHelper( nVal2, nVal1, nHue - 120 );

return new RGBColor( nRed, nGreen, nBlue );
};

HSLColor.hsl2rgbHelper = function( nValue1, nValue2, nHue )
{
nHue = nHue % 360;
if( nHue < 0 )
nHue += 360;

if( nHue < 60.0 )
return nValue1 + ( nValue2 - nValue1 ) * nHue / 60.0;
else if( nHue < 180.0 )
return nValue2;
else if( nHue < 240.0 )
return ( nValue1 + ( nValue2 - nValue1 ) * ( 240.0 - nHue ) / 60.0 );
else
return nValue1;
};

HSLColor.interpolate = function( aFrom, aTo, nT, bCCW )
{
var nS = 1.0 - nT;

var nHue = 0.0;
if( aFrom.nHue <= aTo.nHue && !bCCW )
{
nHue = nS * (aFrom.nHue + 360.0) + nT * aTo.nHue;
}
else if( aFrom.nHue > aTo.nHue && bCCW )
{
nHue = nS * aFrom.nHue + nT * (aTo.nHue + 360.0);
}
else
{
nHue = nS * aFrom.nHue + nT * aTo.nHue;
}

var nSaturation = nS * aFrom.nSaturation + nT * aTo.nSaturation;
var nLuminance = nS * aFrom.nLuminance + nT * aTo.nLuminance;

return new HSLColor( nHue, nSaturation, nLuminance );
};


var SVGIdentityMatrix = document.documentElement.createSVGMatrix();

SVGMatrix.prototype.setToIdentity = function()
{
this.a = this.d = 1;
this.b = this.c = this.d = this.e = 0;
};

SVGMatrix.prototype.setToRotationAroundPoint = function( nX, nY, nAngle )
{
nAngle = Math.PI * nAngle / 180;
var nSin = Math.sin( nAngle );
var nCos = Math.cos( nAngle );

this.a = nCos; this.c = -nSin; this.e = nX * (1 - nCos) + nY * nSin;
this.b = nSin; this.d =  nCos; this.f = nY * (1 - nCos) - nX * nSin;
};


SVGPathElement.prototype.prependPath = function( aPath )
{
var sPathData = aPath.getAttribute( 'd' );
sPathData += ( ' ' + this.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

SVGPathElement.prototype.appendPath = function( aPath )
{
var sPathData = this.getAttribute( 'd' );
sPathData += ( ' ' + aPath.getAttribute( 'd' ) );
this.setAttribute( 'd', sPathData );
};

function flipOnYAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.a = -1;
aTransform.e = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

function flipOnXAxis( aPath )
{
var aPolyPath = aPath.cloneNode(true);
var aTransform = document.documentElement.createSVGMatrix();
aTransform.d = -1;
aTransform.f = 1;
aPolyPath.matrixTransform(aTransform);
return aPolyPath;
}

SVGPathElement.prototype.matrixTransform = function( aSVGMatrix )
{
if( SVGPathSegList.prototype.matrixTransform )
{
this.pathSegList.matrixTransform( aSVGMatrix );
return;
}

var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
var i;
for( i = 0; i < nLength; ++i )
{
aPathSegList.getItem( i ).matrixTransform( aSVGMatrix );
}
};

SVGPathElement.prototype.changeOrientation = function()
{
var aPathSegList = this.pathSegList;
var nLength = aPathSegList.numberOfItems;
if( nLength == 0 ) return;

if( SVGPathSegList.prototype.changeOrientation )
{
aPathSegList.changeOrientation();
return;
}

var nCurrentX = 0;
var nCurrentY = 0;

var aPathSeg = aPathSegList.getItem( 0 );
if( aPathSeg.pathSegTypeAsLetter == 'M' )
{
nCurrentX = aPathSeg.x;
nCurrentY = aPathSeg.y;
aPathSegList.removeItem( 0 );
--nLength;
}

var i;
for( i = 0; i < nLength; ++i )
{
aPathSeg = aPathSegList.getItem( i );
var aPoint = aPathSeg.changeOrientation( nCurrentX, nCurrentY );
nCurrentX = aPoint.x;
nCurrentY = aPoint.y;
}


for( i = nLength - 2; i >= 0; --i )
{
aPathSeg = aPathSegList.removeItem( i );
aPathSegList.appendItem( aPathSeg );
}

var aMovePathSeg = this.createSVGPathSegMovetoAbs( nCurrentX, nCurrentY );
aPathSegList.insertItemBefore( aMovePathSeg, 0 );

};


try
{   // Firefox, Google Chrome, Internet Explorer, Safari.

SVGPathSegMovetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegLinetoAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
};

SVGPathSegCurvetoQuadraticAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
};

SVGPathSegCurvetoCubicAbs.prototype.matrixTransform = function( aSVGMatrix )
{
SVGPathMatrixTransform( this, aSVGMatrix );
var nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
};


SVGPathSegMovetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegLinetoAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoQuadraticAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
};

SVGPathSegCurvetoCubicAbs.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
return aPoint;
};

}
catch( e )
{   // Opera

if( e.name == 'ReferenceError' )
{
SVGPathSeg.prototype.matrixTransform = function( aSVGMatrix )
{
var nX;
switch( this.pathSegTypeAsLetter )
{
case 'C':
nX = this.x2;
this.x2 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y2 + aSVGMatrix.e;
this.y2 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y2 + aSVGMatrix.f;
case 'Q':
nX = this.x1;
this.x1 = aSVGMatrix.a * nX + aSVGMatrix.c * this.y1 + aSVGMatrix.e;
this.y1 = aSVGMatrix.b * nX + aSVGMatrix.d * this.y1 + aSVGMatrix.f;
case 'M':
case 'L':
SVGPathMatrixTransform( this, aSVGMatrix );
break;
default:
log( 'SVGPathSeg.matrixTransform: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
}
};

SVGPathSeg.prototype.changeOrientation = function( nCurrentX, nCurrentY )
{
switch( this.pathSegTypeAsLetter )
{
case 'C':
var nX = this.x1;
this.x1 = this.x2;
this.x2 = nX;
var nY = this.y1;
this.y1 = this.y2;
this.y2 = nY;
case 'M':
case 'L':
case 'Q':
var aPoint = { x: this.x, y: this.y };
this.x = nCurrentX;
this.y = nCurrentY;
return aPoint;
default:
log( 'SVGPathSeg.changeOrientation: unexpected path segment type: '
+ this.pathSegTypeAsLetter );
return null;
}
}
}
else throw e;
}

function SVGPathMatrixTransform( aPath, aSVGMatrix )
{
var nX = aPath.x;
aPath.x = aSVGMatrix.a * nX + aSVGMatrix.c * aPath.y + aSVGMatrix.e;
aPath.y = aSVGMatrix.b * nX + aSVGMatrix.d * aPath.y + aSVGMatrix.f;
}


function PriorityQueue( aCompareFunc )
{
this.aSequence = [];
this.aCompareFunc = aCompareFunc;
}

PriorityQueue.prototype.clone = function()
{
var aCopy = new PriorityQueue( this.aCompareFunc );
var src = this.aSequence;
var dest = [];
var i, l;
for( i = 0, l = src.length; i < l; ++i )
{
if( i in src )
{
dest.push( src[i] );
}
}
aCopy.aSequence = dest;
return aCopy;
};

PriorityQueue.prototype.top = function()
{
return this.aSequence[this.aSequence.length - 1];
};

PriorityQueue.prototype.isEmpty = function()
{
return ( this.aSequence.length === 0 );
};

PriorityQueue.prototype.push = function( aValue )
{
this.aSequence.unshift( aValue );
this.aSequence.sort(this.aCompareFunc);
};

PriorityQueue.prototype.clear = function()
{
this.aSequence = [];
};

PriorityQueue.prototype.pop = function()
{
return this.aSequence.pop();
};


var ANIMATION_NODE_CUSTOM               = 0;
var ANIMATION_NODE_PAR                  = 1;
var ANIMATION_NODE_SEQ                  = 2;
var ANIMATION_NODE_ITERATE              = 3;
var ANIMATION_NODE_ANIMATE              = 4;
var ANIMATION_NODE_SET                  = 5;
var ANIMATION_NODE_ANIMATEMOTION        = 6;
var ANIMATION_NODE_ANIMATECOLOR         = 7;
var ANIMATION_NODE_ANIMATETRANSFORM     = 8;
var ANIMATION_NODE_TRANSITIONFILTER     = 9;
var ANIMATION_NODE_AUDIO                = 10;
var ANIMATION_NODE_COMMAND              = 11;

var aAnimationNodeTypeInMap = {
'par'               : ANIMATION_NODE_PAR,
'seq'               : ANIMATION_NODE_SEQ,
'iterate'           : ANIMATION_NODE_ITERATE,
'animate'           : ANIMATION_NODE_ANIMATE,
'set'               : ANIMATION_NODE_SET,
'animatemotion'     : ANIMATION_NODE_ANIMATEMOTION,
'animatecolor'      : ANIMATION_NODE_ANIMATECOLOR,
'animatetransform'  : ANIMATION_NODE_ANIMATETRANSFORM,
'transitionfilter'  : ANIMATION_NODE_TRANSITIONFILTER,
'audio'             : ANIMATION_NODE_AUDIO,
'command'           : ANIMATION_NODE_COMMAND
};


function getAnimationElementType( aElement )
{
var sName = aElement.localName.toLowerCase();

if( sName && aAnimationNodeTypeInMap[ sName ] )
return aAnimationNodeTypeInMap[ sName ];
else
return ANIMATION_NODE_CUSTOM;
}


var INVALID_NODE                = 0;
var UNRESOLVED_NODE             = 1;
var RESOLVED_NODE               = 2;
var ACTIVE_NODE                 = 4;
var FROZEN_NODE                 = 8;
var ENDED_NODE                  = 16;

function getNodeStateName( eNodeState )
{
switch( eNodeState )
{
case INVALID_NODE:
return 'INVALID';
case UNRESOLVED_NODE:
return 'UNRESOLVED';
case RESOLVED_NODE:
return 'RESOLVED';
case ACTIVE_NODE:
return 'ACTIVE';
case FROZEN_NODE:
return 'FROZEN';
case ENDED_NODE:
return 'ENDED';
default:
return 'UNKNOWN';
}
}


var IMPRESS_DEFAULT_NODE                    = 0;
var IMPRESS_ON_CLICK_NODE                   = 1;
var IMPRESS_WITH_PREVIOUS_NODE              = 2;
var IMPRESS_AFTER_PREVIOUS_NODE             = 3;
var IMPRESS_MAIN_SEQUENCE_NODE              = 4;
var IMPRESS_TIMING_ROOT_NODE                = 5;
var IMPRESS_INTERACTIVE_SEQUENCE_NODE       = 6;

var aImpressNodeTypeInMap = {
'on-click'                  : IMPRESS_ON_CLICK_NODE,
'with-previous'             : IMPRESS_WITH_PREVIOUS_NODE,
'after-previous'            : IMPRESS_AFTER_PREVIOUS_NODE,
'main-sequence'             : IMPRESS_MAIN_SEQUENCE_NODE,
'timing-root'               : IMPRESS_TIMING_ROOT_NODE,
'interactive-sequence'      : IMPRESS_INTERACTIVE_SEQUENCE_NODE
};

var aImpressNodeTypeOutMap = [ 'default', 'on-click', 'with-previous', 'after-previous',
'main-sequence', 'timing-root', 'interactive-sequence' ];


var aPresetClassInMap = {};


var aPresetIdInMap = {};


var RESTART_MODE_DEFAULT            = 0;
var RESTART_MODE_INHERIT            = 0; // eslint-disable-line no-unused-vars
var RESTART_MODE_ALWAYS             = 1;
var RESTART_MODE_WHEN_NOT_ACTIVE    = 2;
var RESTART_MODE_NEVER              = 3;

var aRestartModeInMap = {
'inherit'       : RESTART_MODE_DEFAULT,
'always'        : RESTART_MODE_ALWAYS,
'whenNotActive' : RESTART_MODE_WHEN_NOT_ACTIVE,
'never'         : RESTART_MODE_NEVER
};

var aRestartModeOutMap = [ 'inherit','always', 'whenNotActive', 'never' ];


var FILL_MODE_DEFAULT           = 0;
var FILL_MODE_INHERIT           = 0; // eslint-disable-line no-unused-vars
var FILL_MODE_REMOVE            = 1;
var FILL_MODE_FREEZE            = 2;
var FILL_MODE_HOLD              = 3;
var FILL_MODE_TRANSITION        = 4;
var FILL_MODE_AUTO              = 5;

var aFillModeInMap = {
'inherit'       : FILL_MODE_DEFAULT,
'remove'        : FILL_MODE_REMOVE,
'freeze'        : FILL_MODE_FREEZE,
'hold'          : FILL_MODE_HOLD,
'transition'    : FILL_MODE_TRANSITION,
'auto'          : FILL_MODE_AUTO
};

var aFillModeOutMap = [ 'inherit', 'remove', 'freeze', 'hold', 'transition', 'auto' ];


var ADDITIVE_MODE_UNKNOWN       = 0; // eslint-disable-line no-unused-vars
var ADDITIVE_MODE_BASE          = 1;
var ADDITIVE_MODE_SUM           = 2;
var ADDITIVE_MODE_REPLACE       = 3;
var ADDITIVE_MODE_MULTIPLY      = 4;
var ADDITIVE_MODE_NONE          = 5;

var aAddittiveModeInMap = {
'base'          : ADDITIVE_MODE_BASE,
'sum'           : ADDITIVE_MODE_SUM,
'replace'       : ADDITIVE_MODE_REPLACE,
'multiply'      : ADDITIVE_MODE_MULTIPLY,
'none'          : ADDITIVE_MODE_NONE
};

var aAddittiveModeOutMap = [ 'unknown', 'base', 'sum', 'replace', 'multiply', 'none' ];


var ACCUMULATE_MODE_NONE        = 0;
var ACCUMULATE_MODE_SUM         = 1;

var aAccumulateModeOutMap = [ 'none', 'sum' ];

var CALC_MODE_DISCRETE          = 1;
var CALC_MODE_LINEAR            = 2;
var CALC_MODE_PACED             = 3;
var CALC_MODE_SPLINE            = 4;

var aCalcModeInMap = {
'discrete'      : CALC_MODE_DISCRETE,
'linear'        : CALC_MODE_LINEAR,
'paced'         : CALC_MODE_PACED,
'spline'        : CALC_MODE_SPLINE
};

var aCalcModeOutMap = [ 'unknown', 'discrete', 'linear', 'paced', 'spline' ];


var COLOR_SPACE_RGB = 0;
var COLOR_SPACE_HSL = 1;

var aColorSpaceInMap = { 'rgb': COLOR_SPACE_RGB, 'hsl': COLOR_SPACE_HSL };

var aColorSpaceOutMap = [ 'rgb', 'hsl' ];


var CLOCKWISE               = 0;
var COUNTERCLOCKWISE        = 1;

var aClockDirectionInMap = { 'clockwise': CLOCKWISE, 'counter-clockwise': COUNTERCLOCKWISE };

var aClockDirectionOutMap = [ 'clockwise', 'counter-clockwise' ];


var UNKNOWN_PROPERTY        = 0; // eslint-disable-line no-unused-vars
var NUMBER_PROPERTY         = 1;
var ENUM_PROPERTY           = 2;
var COLOR_PROPERTY          = 3;
var STRING_PROPERTY         = 4;
var BOOL_PROPERTY           = 5;

var aValueTypeOutMap = [ 'unknown', 'number', 'enum', 'color', 'string', 'boolean' ];


var aAttributeMap =
{
'height':           {   'type':         NUMBER_PROPERTY,
'get':          'getHeight',
'set':          'setHeight',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'opacity':          {   'type':         NUMBER_PROPERTY,
'get':          'getOpacity',
'set':          'setOpacity'                    },

'rotate':           {   'type':         NUMBER_PROPERTY,
'get':          'getRotationAngle',
'set':          'setRotationAngle'              },

'width':            {   'type':         NUMBER_PROPERTY,
'get':          'getWidth',
'set':          'setWidth',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'x':                {   'type':         NUMBER_PROPERTY,
'get':          'getX',
'set':          'setX',
'getmod':       'makeScaler( 1/nWidth )',
'setmod':       'makeScaler( nWidth)'           },

'y':                {   'type':         NUMBER_PROPERTY,
'get':          'getY',
'set':          'setY',
'getmod':       'makeScaler( 1/nHeight )',
'setmod':       'makeScaler( nHeight)'          },

'fill':             {   'type':         ENUM_PROPERTY,
'get':          'getFillStyle',
'set':          'setFillStyle'                  },

'stroke':           {   'type':         ENUM_PROPERTY,
'get':          'getStrokeStyle',
'set':          'setStrokeStyle'                },

'visibility':       {   'type':         ENUM_PROPERTY,
'get':          'getVisibility',
'set':          'setVisibility'                 },

'fill-color':       {   'type':         COLOR_PROPERTY,
'get':          'getFillColor',
'set':          'setFillColor'                  },

'stroke-color':     {   'type':         COLOR_PROPERTY,
'get':          'getStrokeColor',
'set':          'setStrokeColor'                },

'color':            {   'type':         COLOR_PROPERTY,
'get':          'getFontColor',
'set':          'setFontColor'                  }

};


var TRANSITION_INVALID              = 0;    // Invalid type
var TRANSITION_CLIP_POLYPOLYGON     = 1;    // Transition expressed by parametric clip polygon
var TRANSITION_SPECIAL              = 2;    // Transition expressed by hand-crafted function


var BARWIPE_TRANSITION              = 1;
var BOXWIPE_TRANSITION              = 2;
var FOURBOXWIPE_TRANSITION          = 3;
var ELLIPSEWIPE_TRANSITION          = 4; // 17
var CLOCKWIPE_TRANSITION            = 5; // 22
var PINWHEELWIPE_TRANSITION         = 6; // 23
var PUSHWIPE_TRANSITION             = 7; // 35
var SLIDEWIPE_TRANSITION            = 8; // 36
var FADE_TRANSITION                 = 9; // 37
var RANDOMBARWIPE_TRANSITION        = 10; // 38
var CHECKERBOARDWIPE_TRANSITION     = 11; // 39
var DISSOLVE_TRANSITION             = 12; // 40
var SNAKEWIPE_TRANSITION            = 13; // 30
var PARALLELSNAKESWIPE_TRANSITION   = 14; // 32
var IRISWIPE_TRANSITION             = 15; // 12
var BARNDOORWIPE_TRANSITION         = 16; // 4
var VEEWIPE_TRANSITION              = 17; // 8
var ZIGZAGWIPE_TRANSITION           = 18; // 10
var BARNZIGZAGWIPE_TRANSITION       = 19; // 11
var FANWIPE_TRANSITION              = 20; // 25
var SINGLESWEEPWIPE_TRANSITION      = 21; // 24
var WATERFALLWIPE_TRANSITION        = 22; // 34
var SPIRALWIPE_TRANSITION           = 23; // 31
var MISCDIAGONALWIPE_TRANSITION     = 24; // 7
var BOXSNAKESWIPE_TRANSITION        = 25; // 33

var aTransitionTypeInMap = {
'barWipe'           : BARWIPE_TRANSITION,
'boxWipe'           : BOXWIPE_TRANSITION,
'barnDoorWipe'      : BARNDOORWIPE_TRANSITION,
'fourBoxWipe'       : FOURBOXWIPE_TRANSITION,
'ellipseWipe'       : ELLIPSEWIPE_TRANSITION,
'clockWipe'         : CLOCKWIPE_TRANSITION,
'pinWheelWipe'      : PINWHEELWIPE_TRANSITION,
'miscDiagonalWipe'  : MISCDIAGONALWIPE_TRANSITION,
'pushWipe'          : PUSHWIPE_TRANSITION,
'slideWipe'         : SLIDEWIPE_TRANSITION,
'fade'              : FADE_TRANSITION,
'fanWipe'           : FANWIPE_TRANSITION,
'randomBarWipe'     : RANDOMBARWIPE_TRANSITION,
'checkerBoardWipe'  : CHECKERBOARDWIPE_TRANSITION,
'dissolve'          : DISSOLVE_TRANSITION,
'singleSweepWipe'   : SINGLESWEEPWIPE_TRANSITION,
'snakeWipe'         : SNAKEWIPE_TRANSITION,
'parallelSnakesWipe': PARALLELSNAKESWIPE_TRANSITION,
'spiralWipe'        : SPIRALWIPE_TRANSITION,
'boxSnakesWipe'     : BOXSNAKESWIPE_TRANSITION,
'irisWipe'          : IRISWIPE_TRANSITION,
'veeWipe'           : VEEWIPE_TRANSITION,
'zigZagWipe'        : ZIGZAGWIPE_TRANSITION,
'barnZigZagWipe'    : BARNZIGZAGWIPE_TRANSITION,
'waterfallWipe'     : WATERFALLWIPE_TRANSITION
};

var DEFAULT_TRANS_SUBTYPE                       = 0;
var LEFTTORIGHT_TRANS_SUBTYPE                   = 1;
var TOPTOBOTTOM_TRANS_SUBTYPE                   = 2;
var CORNERSIN_TRANS_SUBTYPE                     = 3; // 11
var CORNERSOUT_TRANS_SUBTYPE                    = 4;
var VERTICAL_TRANS_SUBTYPE                      = 5;
var HORIZONTAL_TRANS_SUBTYPE                    = 6; // 14
var DOWN_TRANS_SUBTYPE                          = 7; // 19
var CIRCLE_TRANS_SUBTYPE                        = 8; // 27
var CLOCKWISETWELVE_TRANS_SUBTYPE               = 9; // 33
var CLOCKWISETHREE_TRANS_SUBTYPE                = 10;
var CLOCKWISESIX_TRANS_SUBTYPE                  = 11;
var CLOCKWISENINE_TRANS_SUBTYPE                 = 12;
var TWOBLADEVERTICAL_TRANS_SUBTYPE              = 13;
var TWOBLADEHORIZONTAL_TRANS_SUBTYPE            = 14;
var FOURBLADE_TRANS_SUBTYPE                     = 15; // 39
var FROMLEFT_TRANS_SUBTYPE                      = 16; // 97
var FROMTOP_TRANS_SUBTYPE                       = 17;
var FROMRIGHT_TRANS_SUBTYPE                     = 18;
var FROMBOTTOM_TRANS_SUBTYPE                    = 19;
var CROSSFADE_TRANS_SUBTYPE                     = 20;
var FADETOCOLOR_TRANS_SUBTYPE                   = 21;
var FADEFROMCOLOR_TRANS_SUBTYPE                 = 22;
var FADEOVERCOLOR_TRANS_SUBTYPE                 = 23;
var THREEBLADE_TRANS_SUBTYPE                    = 24;
var EIGHTBLADE_TRANS_SUBTYPE                    = 25;
var ONEBLADE_TRANS_SUBTYPE                      = 26; // 107
var ACROSS_TRANS_SUBTYPE                        = 27;
var TOPLEFTVERTICAL_TRANS_SUBTYPE               = 28; // 109
var TOPLEFTHORIZONTAL_TRANS_SUBTYPE             = 29; // 64
var TOPLEFTDIAGONAL_TRANS_SUBTYPE               = 30; // 65
var TOPRIGHTDIAGONAL_TRANS_SUBTYPE              = 31; // 66
var BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE           = 32; // 67
var BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE            = 33; // 68
var RECTANGLE_TRANS_SUBTYPE                     = 34; // 101
var DIAMOND_TRANS_SUBTYPE                       = 35; // 102
var TOPLEFT_TRANS_SUBTYPE                       = 36; // 3
var TOPRIGHT_TRANS_SUBTYPE                      = 37; // 4
var BOTTOMRIGHT_TRANS_SUBTYPE                   = 38; // 5
var BOTTOMLEFT_TRANS_SUBTYPE                    = 39; // 6
var TOPCENTER_TRANS_SUBTYPE                     = 40; // 7
var RIGHTCENTER_TRANS_SUBTYPE                   = 41; // 8
var BOTTOMCENTER_TRANS_SUBTYPE                  = 42; // 9
var LEFTCENTER_TRANS_SUBTYPE                    = 43; // 10
var LEFT_TRANS_SUBTYPE                          = 44; // 20
var UP_TRANS_SUBTYPE                            = 45; // 21
var RIGHT_TRANS_SUBTYPE                         = 46; // 22
var DIAGONALBOTTOMLEFT_TRANS_SUBTYPE            = 47; // 15
var DIAGONALTOPLEFT_TRANS_SUBTYPE               = 48; // 16
var CENTERTOP_TRANS_SUBTYPE                     = 49; // 48
var CENTERRIGHT_TRANS_SUBTYPE                   = 50; // 49
var TOP_TRANS_SUBTYPE                           = 51; // 50
var BOTTOM_TRANS_SUBTYPE                        = 52; // 52
var CLOCKWISETOP_TRANS_SUBTYPE                  = 53; // 40
var CLOCKWISERIGHT_TRANS_SUBTYPE                = 54; // 41
var CLOCKWISEBOTTOM_TRANS_SUBTYPE               = 55; // 42
var CLOCKWISELEFT_TRANS_SUBTYPE                 = 56; // 43
var CLOCKWISETOPLEFT_TRANS_SUBTYPE              = 57; // 44
var COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE    = 58; // 45
var CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE          = 59; // 46
var COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE      = 60; // 47
var VERTICALLEFT_TRANS_SUBTYPE                  = 61; // 93
var VERTICALRIGHT_TRANS_SUBTYPE                 = 62; // 94
var HORIZONTALLEFT_TRANS_SUBTYPE                = 63; // 95
var HORIZONTALRIGHT_TRANS_SUBTYPE               = 64; // 96
var TOPLEFTCLOCKWISE_TRANS_SUBTYPE              = 65; // 69
var TOPRIGHTCLOCKWISE_TRANS_SUBTYPE             = 66; // 70
var BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE          = 67; // 71
var BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE           = 68; // 72
var TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE       = 69; // 73
var TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE      = 70; // 74
var BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE   = 71; // 75
var BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE    = 72; // 76
var DOUBLEBARNDOOR_TRANS_SUBTYPE                = 73; // 17
var DOUBLEDIAMOND_TRANS_SUBTYPE                 = 74; // 18
var VERTICALTOPSAME_TRANS_SUBTYPE               = 75; // 77
var VERTICALBOTTOMSAME_TRANS_SUBTYPE            = 76; // 78
var VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 77; // 79
var VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 78; // 80
var HORIZONTALLEFTSAME_TRANS_SUBTYPE            = 79; // 81
var HORIZONTALRIGHTSAME_TRANS_SUBTYPE           = 80; // 82
var HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE     = 81; // 83
var HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE    = 82; // 84
var DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE    = 83; // 85
var DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE       = 84; // 86
var TWOBOXTOP_TRANS_SUBTYPE                     = 85; // 87
var TWOBOXBOTTOM_TRANS_SUBTYPE                  = 86; // 88
var TWOBOXLEFT_TRANS_SUBTYPE                    = 87; // 89
var TWOBOXRIGHT_TRANS_SUBTYPE                   = 88; // 90
var FOURBOXVERTICAL_TRANS_SUBTYPE               = 89; // 91
var FOURBOXHORIZONTAL_TRANS_SUBTYPE             = 90; // 92

var aTransitionSubtypeInMap = {
'default'                       : DEFAULT_TRANS_SUBTYPE,
'leftToRight'                   : LEFTTORIGHT_TRANS_SUBTYPE,
'topToBottom'                   : TOPTOBOTTOM_TRANS_SUBTYPE,
'cornersIn'                     : CORNERSIN_TRANS_SUBTYPE,
'cornersOut'                    : CORNERSOUT_TRANS_SUBTYPE,
'vertical'                      : VERTICAL_TRANS_SUBTYPE,
'centerTop'                     : CENTERTOP_TRANS_SUBTYPE,
'centerRight'                   : CENTERRIGHT_TRANS_SUBTYPE,
'top'                           : TOP_TRANS_SUBTYPE,
'right'                         : RIGHT_TRANS_SUBTYPE,
'bottom'                        : BOTTOM_TRANS_SUBTYPE,
'left'                          : LEFT_TRANS_SUBTYPE,
'horizontal'                    : HORIZONTAL_TRANS_SUBTYPE,
'down'                          : DOWN_TRANS_SUBTYPE,
'circle'                        : CIRCLE_TRANS_SUBTYPE,
'clockwiseTwelve'               : CLOCKWISETWELVE_TRANS_SUBTYPE,
'clockwiseThree'                : CLOCKWISETHREE_TRANS_SUBTYPE,
'clockwiseSix'                  : CLOCKWISESIX_TRANS_SUBTYPE,
'clockwiseNine'                 : CLOCKWISENINE_TRANS_SUBTYPE,
'clockwiseRight'                : CLOCKWISERIGHT_TRANS_SUBTYPE,
'clockwiseTop'                  : CLOCKWISETOP_TRANS_SUBTYPE,
'clockwiseBottom'               : CLOCKWISEBOTTOM_TRANS_SUBTYPE,
'clockwiseLeft'                 : CLOCKWISELEFT_TRANS_SUBTYPE,
'clockwiseTopLeft'              : CLOCKWISETOPLEFT_TRANS_SUBTYPE,
'counterClockwiseBottomLeft'    : COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE,
'clockwiseBottomRight'          : CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE,
'counterClockwiseTopRight'      : COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE,
'twoBladeVertical'              : TWOBLADEVERTICAL_TRANS_SUBTYPE,
'twoBladeHorizontal'            : TWOBLADEHORIZONTAL_TRANS_SUBTYPE,
'fourBlade'                     : FOURBLADE_TRANS_SUBTYPE,
'fromLeft'                      : FROMLEFT_TRANS_SUBTYPE,
'fromTop'                       : FROMTOP_TRANS_SUBTYPE,
'fromRight'                     : FROMRIGHT_TRANS_SUBTYPE,
'fromBottom'                    : FROMBOTTOM_TRANS_SUBTYPE,
'crossfade'                     : CROSSFADE_TRANS_SUBTYPE,
'fadeToColor'                   : FADETOCOLOR_TRANS_SUBTYPE,
'fadeFromColor'                 : FADEFROMCOLOR_TRANS_SUBTYPE,
'fadeOverColor'                 : FADEOVERCOLOR_TRANS_SUBTYPE,
'threeBlade'                    : THREEBLADE_TRANS_SUBTYPE,
'eightBlade'                    : EIGHTBLADE_TRANS_SUBTYPE,
'oneBlade'                      : ONEBLADE_TRANS_SUBTYPE,
'across'                        : ACROSS_TRANS_SUBTYPE,
'topLeftVertical'               : TOPLEFTVERTICAL_TRANS_SUBTYPE,
'topLeftHorizontal'             : TOPLEFTHORIZONTAL_TRANS_SUBTYPE,
'topLeftDiagonal'               : TOPLEFTDIAGONAL_TRANS_SUBTYPE,
'topRightDiagonal'              : TOPRIGHTDIAGONAL_TRANS_SUBTYPE,
'bottomRightDiagonal'           : BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE,
'topLeftClockwise'              : TOPLEFTCLOCKWISE_TRANS_SUBTYPE,
'topRightClockwise'             : TOPRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomRightClockwise'          : BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftClockwise'           : BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE,
'topLeftCounterClockwise'       : TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'topRightCounterClockwise'      : TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomRightCounterClockwise'   : BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftCounterClockwise'    : BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE,
'bottomLeftDiagonal'            : BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE,
'rectangle'                     : RECTANGLE_TRANS_SUBTYPE,
'diamond'                       : DIAMOND_TRANS_SUBTYPE,
'topLeft'                       : TOPLEFT_TRANS_SUBTYPE,
'topRight'                      : TOPRIGHT_TRANS_SUBTYPE,
'bottomRight'                   : BOTTOMRIGHT_TRANS_SUBTYPE,
'bottomLeft'                    : BOTTOMLEFT_TRANS_SUBTYPE,
'topCenter'                     : TOPCENTER_TRANS_SUBTYPE,
'rightCenter'                   : RIGHTCENTER_TRANS_SUBTYPE,
'bottomCenter'                  : BOTTOMCENTER_TRANS_SUBTYPE,
'leftCenter'                    : LEFTCENTER_TRANS_SUBTYPE,
'up'                            : UP_TRANS_SUBTYPE,
'diagonalBottomLeft'            : DIAGONALBOTTOMLEFT_TRANS_SUBTYPE,
'diagonalTopLeft'               : DIAGONALTOPLEFT_TRANS_SUBTYPE,
'verticalLeft'                  : VERTICALLEFT_TRANS_SUBTYPE,
'verticalRight'                 : VERTICALRIGHT_TRANS_SUBTYPE,
'horizontalLeft'                : HORIZONTALLEFT_TRANS_SUBTYPE,
'horizontalRight'               : HORIZONTALRIGHT_TRANS_SUBTYPE,
'doubleBarnDoor'                : DOUBLEBARNDOOR_TRANS_SUBTYPE,
'doubleDiamond'                 : DOUBLEDIAMOND_TRANS_SUBTYPE,
'verticalTopSame'               : VERTICALTOPSAME_TRANS_SUBTYPE,
'verticalBottomSame'            : VERTICALBOTTOMSAME_TRANS_SUBTYPE,
'verticalTopLeftOpposite'       : VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'verticalBottomLeftOpposite'    : VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalLeftSame'            : HORIZONTALLEFTSAME_TRANS_SUBTYPE,
'horizontalRightSame'           : HORIZONTALRIGHTSAME_TRANS_SUBTYPE,
'horizontalTopLeftOpposite'     : HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'horizontalTopRightOpposite'    : HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE,
'diagonalBottomLeftOpposite'    : DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE,
'diagonalTopLeftOpposite'       : DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
'twoBoxTop'                     : TWOBOXTOP_TRANS_SUBTYPE,
'twoBoxBottom'                  : TWOBOXBOTTOM_TRANS_SUBTYPE,
'twoBoxLeft'                    : TWOBOXLEFT_TRANS_SUBTYPE,
'twoBoxRight'                   : TWOBOXRIGHT_TRANS_SUBTYPE,
'fourBoxVertical'               : FOURBOXVERTICAL_TRANS_SUBTYPE,
'fourBoxHorizontal'             : FOURBOXHORIZONTAL_TRANS_SUBTYPE
};

var TRANSITION_MODE_IN  = 1;
var TRANSITION_MODE_OUT = 0;

var aTransitionModeOutMap = [ 'out', 'in' ];


var REVERSEMETHOD_IGNORE                    = 0;
var REVERSEMETHOD_INVERT_SWEEP              = 1;
var REVERSEMETHOD_SUBTRACT_POLYGON          = 2;
var REVERSEMETHOD_SUBTRACT_AND_INVERT       = 3;
var REVERSEMETHOD_ROTATE_180                = 4;
var REVERSEMETHOD_FLIP_X                    = 5;
var REVERSEMETHOD_FLIP_Y                    = 6;

var aReverseMethodOutMap = ['ignore', 'invert sweep', 'subtract polygon',
'subtract and invert', 'rotate 180', 'flip x', 'flip y'];


var aTransitionInfoTable = {};

aTransitionInfoTable[0] = {};
aTransitionInfoTable[0][0] =
{
'class' : TRANSITION_INVALID,
'rotationAngle' : 0.0,
'scaleX' : 0.0,
'scaleY' : 0.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[SNAKEWIPE_TRANSITION] = {};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][TOPRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SNAKEWIPE_TRANSITION][BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertSweep' : true,
'scaleIsotropically' : false
}

aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALLEFTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALRIGHTSAME_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[PARALLELSNAKESWIPE_TRANSITION][DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SPIRALWIPE_TRANSITION] = {};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SPIRALWIPE_TRANSITION][BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][TWOBOXRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXVERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXSNAKESWIPE_TRANSITION][FOURBOXHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNDOORWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 90.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[BARNDOORWIPE_TRANSITION][DIAGONALTOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': -45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION] = {};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEBARNDOOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};
aTransitionInfoTable[MISCDIAGONALWIPE_TRANSITION][DOUBLEDIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1,
'scaleY': 1,
'reverseMethod': REVERSEMETHOD_IGNORE,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION] = {};
aTransitionInfoTable[IRISWIPE_TRANSITION][RECTANGLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 0.0,
'scaleX': 1.0,
'scaleY': 1.0,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[IRISWIPE_TRANSITION][DIAMOND_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle': 45.0,
'scaleX': Math.SQRT2,
'scaleY': Math.SQRT2,
'reverseMethod': REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep': true,
'scaleIsotropically': false
};

aTransitionInfoTable[ZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ZIGZAGWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION] = {};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARNZIGZAGWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BARWIPE_TRANSITION] = {};
aTransitionInfoTable[BARWIPE_TRANSITION][LEFTTORIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};
aTransitionInfoTable[BARWIPE_TRANSITION][TOPTOBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : false,
'scaleIsotropically' : false
};

aTransitionInfoTable[WATERFALLWIPE_TRANSITION] = {};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][VERTICALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[WATERFALLWIPE_TRANSITION][HORIZONTALRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_ROTATE_180,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[BOXWIPE_TRANSITION] = {};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][TOPCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][RIGHTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][BOTTOMCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[BOXWIPE_TRANSITION][LEFTCENTER_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FOURBOXWIPE_TRANSITION] = {};
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSIN_TRANS_SUBTYPE] =
aTransitionInfoTable[FOURBOXWIPE_TRANSITION][CORNERSOUT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[ELLIPSEWIPE_TRANSITION] = {};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][CIRCLE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[ELLIPSEWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CLOCKWIPE_TRANSITION] = {};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETWELVE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISETHREE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISESIX_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CLOCKWIPE_TRANSITION][CLOCKWISENINE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[VEEWIPE_TRANSITION] = {};
aTransitionInfoTable[VEEWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][UP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[VEEWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FANWIPE_TRANSITION] = {};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERTOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][CENTERRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][TOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][RIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][BOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[FANWIPE_TRANSITION][LEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[PINWHEELWIPE_TRANSITION] = {};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][ONEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEVERTICAL_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][THREEBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][FOURBLADE_TRANS_SUBTYPE] =
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][EIGHTBLADE_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};
aTransitionInfoTable[PINWHEELWIPE_TRANSITION][TWOBLADEHORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : -90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};

aTransitionInfoTable[PUSHWIPE_TRANSITION] = {};
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[PUSHWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION] = {};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOP_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISERIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISELEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 270.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISETOPLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][CLOCKWISEBOTTOMRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 180.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[SINGLESWEEPWIPE_TRANSITION][COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_SUBTRACT_AND_INVERT,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[SLIDEWIPE_TRANSITION] = {};
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMLEFT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMTOP_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMRIGHT_TRANS_SUBTYPE] =
aTransitionInfoTable[SLIDEWIPE_TRANSITION][FROMBOTTOM_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[FADE_TRANSITION] = {};
aTransitionInfoTable[FADE_TRANSITION][CROSSFADE_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADETOCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEFROMCOLOR_TRANS_SUBTYPE] =
aTransitionInfoTable[FADE_TRANSITION][FADEOVERCOLOR_TRANS_SUBTYPE] =
{
'class' : TRANSITION_SPECIAL,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};


aTransitionInfoTable[RANDOMBARWIPE_TRANSITION] = {};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][VERTICAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[RANDOMBARWIPE_TRANSITION][HORIZONTAL_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION] = {};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][DOWN_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 90.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_Y,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};
aTransitionInfoTable[CHECKERBOARDWIPE_TRANSITION][ACROSS_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_FLIP_X,
'outInvertsSweep' : true,
'scaleIsotropically' : false
};

aTransitionInfoTable[DISSOLVE_TRANSITION] = {};
aTransitionInfoTable[DISSOLVE_TRANSITION][DEFAULT_TRANS_SUBTYPE] =
{
'class' : TRANSITION_CLIP_POLYPOLYGON,
'rotationAngle' : 0.0,
'scaleX' : 1.0,
'scaleY' : 1.0,
'reverseMethod' : REVERSEMETHOD_IGNORE,
'outInvertsSweep' : true,
'scaleIsotropically' : true
};


function createStateTransitionTable()
{
var aSTT = {};

aSTT[RESTART_MODE_NEVER] = {};
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE] = {};
aSTT[RESTART_MODE_ALWAYS] = {};

var aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = ENDED_NODE;    // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_NEVER][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_NEVER][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = ENDED_NODE;
aTable[ENDED_NODE]          = ENDED_NODE;   // this state is a sink here (cannot restart)

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = ENDED_NODE;
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_WHEN_NOT_ACTIVE][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_REMOVE] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[FROZEN_NODE]         = INVALID_NODE;  // this state is unreachable here
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

aTable =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_FREEZE] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_HOLD] =
aSTT[RESTART_MODE_ALWAYS][FILL_MODE_TRANSITION] = {};
aTable[INVALID_NODE]        = INVALID_NODE;
aTable[UNRESOLVED_NODE]     = RESOLVED_NODE | ENDED_NODE;
aTable[RESOLVED_NODE]       = ACTIVE_NODE | ENDED_NODE;
aTable[ACTIVE_NODE]         = RESOLVED_NODE | ACTIVE_NODE | FROZEN_NODE | ENDED_NODE;
aTable[FROZEN_NODE]         = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible
aTable[ENDED_NODE]          = RESOLVED_NODE | ACTIVE_NODE | ENDED_NODE;  // restart is possible

return aSTT;
}

var aStateTransitionTable = createStateTransitionTable();


function getTransitionTable( eRestartMode, eFillMode )
{
if( eRestartMode == RESTART_MODE_DEFAULT )
{
log( 'getTransitionTable: unexpected restart mode: ' + eRestartMode
+ '. Used NEVER instead.');
eRestartMode = RESTART_MODE_NEVER;
}

if( eFillMode == FILL_MODE_DEFAULT ||
eFillMode == FILL_MODE_AUTO )
{
eFillMode = FILL_MODE_REMOVE;
}

return aStateTransitionTable[eRestartMode][eFillMode];
}


var EVENT_TRIGGER_UNKNOWN               = 0;
var EVENT_TRIGGER_ON_SLIDE_BEGIN        = 1; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_SLIDE_END          = 2; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_BEGIN_EVENT           = 3;
var EVENT_TRIGGER_END_EVENT             = 4;
var EVENT_TRIGGER_ON_CLICK              = 5;
var EVENT_TRIGGER_ON_DBL_CLICK          = 6; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_ENTER        = 7; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_MOUSE_LEAVE        = 8; // eslint-disable-line no-unused-vars
var EVENT_TRIGGER_ON_NEXT_EFFECT        = 9;
var EVENT_TRIGGER_ON_PREV_EFFECT        = 10;
var EVENT_TRIGGER_REPEAT                = 11; // eslint-disable-line no-unused-vars

var aEventTriggerOutMap = [ 'unknown', 'slideBegin', 'slideEnd', 'begin', 'end', 'click',
'doubleClick', 'mouseEnter', 'mouseLeave', 'next', 'previous', 'repeat' ];


function getEventTriggerType( sEventTrigger )
{
if( sEventTrigger == 'begin' )
return EVENT_TRIGGER_BEGIN_EVENT;
else if( sEventTrigger == 'end' )
return EVENT_TRIGGER_END_EVENT;
else if( sEventTrigger == 'next' )
return EVENT_TRIGGER_ON_NEXT_EFFECT;
else if( sEventTrigger == 'prev' )
return EVENT_TRIGGER_ON_PREV_EFFECT;
else if( sEventTrigger == 'click' )
return EVENT_TRIGGER_ON_CLICK;
else
return EVENT_TRIGGER_UNKNOWN;
}


var UNKNOWN_TIMING          = 0;
var OFFSET_TIMING           = 1;
var WALLCLOCK_TIMING        = 2; // eslint-disable-line no-unused-vars
var INDEFINITE_TIMING       = 3;
var EVENT_TIMING            = 4;
var SYNCBASE_TIMING         = 5;
var MEDIA_TIMING            = 6; // eslint-disable-line no-unused-vars

var aTimingTypeOutMap = [ 'unknown', 'offset', 'wallclock', 'indefinite', 'event', 'syncbase', 'media' ];


var CHARCODE_PLUS       = '+'.charCodeAt(0);
var CHARCODE_MINUS      = '-'.charCodeAt(0);
var CHARCODE_0          = '0'.charCodeAt(0);
var CHARCODE_9          = '9'.charCodeAt(0);


function Timing( aAnimationNode, sTimingAttribute )
{
this.aAnimationNode = aAnimationNode;     // the node, the timing attribute belongs to
this.sTimingDescription = removeWhiteSpaces( sTimingAttribute );
this.eTimingType = UNKNOWN_TIMING;
this.nOffset = 0.0;                       // in seconds
this.sEventBaseElementId = '';            // the element id for event based timing
this.eEventType = EVENT_TRIGGER_UNKNOWN;  // the event type
}

Timing.prototype.getAnimationNode = function()
{
return this.aAnimationNode;
};

Timing.prototype.getType = function()
{
return this.eTimingType;
};

Timing.prototype.getOffset = function()
{
return this.nOffset;
};

Timing.prototype.getEventBaseElementId = function()
{
return this.sEventBaseElementId;
};

Timing.prototype.getEventType = function()
{
return this.eEventType;
};

Timing.prototype.parse = function()
{
if( !this.sTimingDescription )
{
this.eTimingType = OFFSET_TIMING;
return;
}

if( this.sTimingDescription == 'indefinite' )
this.eTimingType = INDEFINITE_TIMING;
else
{
var nFirstCharCode = this.sTimingDescription.charCodeAt(0);
var bPositiveOffset = !( nFirstCharCode == CHARCODE_MINUS );
if ( ( nFirstCharCode == CHARCODE_PLUS ) ||
( nFirstCharCode == CHARCODE_MINUS ) ||
( ( nFirstCharCode >= CHARCODE_0 ) && ( nFirstCharCode <= CHARCODE_9 ) ) )
{
var sClockValue
= ( ( nFirstCharCode == CHARCODE_PLUS ) || ( nFirstCharCode == CHARCODE_MINUS ) )
? this.sTimingDescription.substr( 1 )
: this.sTimingDescription;

var TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.eTimingType = OFFSET_TIMING;
this.nOffset = bPositiveOffset ? TimeInSec : -TimeInSec;
}
}
else
{
var aTimingSplit = [];
bPositiveOffset = true;
if( this.sTimingDescription.indexOf( '+' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '+' );
}
else if( this.sTimingDescription.indexOf( '-' ) != -1 )
{
aTimingSplit = this.sTimingDescription.split( '-' );
bPositiveOffset = false;
}
else
{
aTimingSplit[0] = this.sTimingDescription;
aTimingSplit[1] = '';
}

if( aTimingSplit[0].indexOf( '.' ) != -1 )
{
var aEventSplit = aTimingSplit[0].split( '.' );
this.sEventBaseElementId = aEventSplit[0];
this.eEventType = getEventTriggerType( aEventSplit[1] );
}
else
{
this.eEventType = getEventTriggerType( aTimingSplit[0] );
}

if( this.eEventType == EVENT_TRIGGER_UNKNOWN )
return;

if( ( this.eEventType == EVENT_TRIGGER_BEGIN_EVENT ) ||
( this.eEventType == EVENT_TRIGGER_END_EVENT ) )
{
this.eTimingType = SYNCBASE_TIMING;
}
else
{
this.eTimingType = EVENT_TIMING;
}

if( aTimingSplit[1] )
{
sClockValue = aTimingSplit[1];
TimeInSec = Timing.parseClockValue( sClockValue );
if( TimeInSec != undefined )
{
this.nOffset = ( bPositiveOffset ) ? TimeInSec : -TimeInSec;
}
else
{
this.eTimingType = UNKNOWN_TIMING;
}

}
}
}

};

Timing.parseClockValue = function( sClockValue )
{
if( !sClockValue )
return 0.0;

var nTimeInSec = undefined;

var reFullClockValue = /^([0-9]+):([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var rePartialClockValue = /^([0-5][0-9]):([0-5][0-9])(.[0-9]+)?$/;
var reTimeCountValue = /^([0-9]+)(.[0-9]+)?(h|min|s|ms)?$/;

if( reFullClockValue.test( sClockValue ) )
{
var aClockTimeParts = reFullClockValue.exec( sClockValue );

var nHours = parseInt( aClockTimeParts[1] );
var nMinutes = parseInt( aClockTimeParts[2] );
var nSeconds = parseInt( aClockTimeParts[3] );
if( aClockTimeParts[4] )
nSeconds += parseFloat( aClockTimeParts[4] );

nTimeInSec = ( ( nHours * 60 ) +  nMinutes ) * 60 + nSeconds;

}
else if( rePartialClockValue.test( sClockValue ) )
{
aClockTimeParts = rePartialClockValue.exec( sClockValue );

nMinutes = parseInt( aClockTimeParts[1] );
nSeconds = parseInt( aClockTimeParts[2] );
if( aClockTimeParts[3] )
nSeconds += parseFloat( aClockTimeParts[3] );

nTimeInSec = nMinutes * 60 + nSeconds;
}
else if( reTimeCountValue.test( sClockValue ) )
{
aClockTimeParts = reTimeCountValue.exec( sClockValue );

var nTimeCount = parseInt( aClockTimeParts[1] );
if( aClockTimeParts[2] )
nTimeCount += parseFloat( aClockTimeParts[2] );

if( aClockTimeParts[3] )
{
if( aClockTimeParts[3] == 'h' )
{
nTimeInSec = nTimeCount * 3600;
}
else if( aClockTimeParts[3] == 'min' )
{
nTimeInSec = nTimeCount * 60;
}
else if( aClockTimeParts[3] == 's' )
{
nTimeInSec = nTimeCount;
}
else if( aClockTimeParts[3] == 'ms' )
{
nTimeInSec = nTimeCount / 1000;
}
}
else
{
nTimeInSec = nTimeCount;
}

}

if( nTimeInSec )
nTimeInSec = parseFloat( nTimeInSec.toFixed( 3 ) );
return nTimeInSec;
};

Timing.prototype.info = function( bVerbose )
{

var sInfo = '';

if( bVerbose )
{
sInfo = 'description: ' + this.sTimingDescription + ', ';

sInfo += ', type: ' +  aTimingTypeOutMap[ this.getType() ];
sInfo += ', offset: ' + this.getOffset();
sInfo += ', event base element id: ' + this.getEventBaseElementId();
sInfo += ', timing event type: ' + aEventTriggerOutMap[ this.getEventType() ];
}
else
{
switch( this.getType() )
{
case INDEFINITE_TIMING:
sInfo += 'indefinite';
break;
case OFFSET_TIMING:
sInfo += this.getOffset();
break;
case EVENT_TIMING:
case SYNCBASE_TIMING:
if( this.getEventBaseElementId() )
sInfo += this.getEventBaseElementId() + '.';
sInfo += aEventTriggerOutMap[ this.getEventType() ];
if( this.getOffset() )
{
if( this.getOffset() > 0 )
sInfo += '+';
sInfo += this.getOffset();
}
}
}

return sInfo;
};


function Duration( sDurationAttribute )
{
this.bIndefinite = false;
this.bMedia = false;
this.nValue = undefined;
this.bDefined = false;

if( !sDurationAttribute )
return;

if( sDurationAttribute == 'indefinite' )
this.bIndefinite = true;
else if( sDurationAttribute == 'media' )
this.bMedia = true;
else
{
this.nValue = Timing.parseClockValue( sDurationAttribute );
if( this.nValue <= 0.0 )
this.nValue = 0.001;  // duration must be always greater than 0
}
this.bDefined = true;
}


Duration.prototype.isSet = function()
{
return this.bDefined;
};

Duration.prototype.isIndefinite = function()
{
return this.bIndefinite;
};

Duration.prototype.isMedia = function()
{
return this.bMedia;
};

Duration.prototype.isValue = function()
{
return this.nValue != undefined;
};

Duration.prototype.getValue= function()
{
return this.nValue;
};

Duration.prototype.info= function()
{
var sInfo;

if( this.isIndefinite() )
sInfo = 'indefinite';
else if( this.isMedia() )
sInfo = 'media';
else if( this.getValue() )
sInfo = this.getValue();

return sInfo;
};


function AnimationNode()
{
}

AnimationNode.prototype.init = function() {};
AnimationNode.prototype.resolve = function() {};
AnimationNode.prototype.activate = function() {};
AnimationNode.prototype.deactivate = function() {};
AnimationNode.prototype.end = function() {};
AnimationNode.prototype.getState = function() {};
AnimationNode.prototype.registerDeactivatingListener = function() {};
AnimationNode.prototype.notifyDeactivating = function() {};


function NodeContext( aSlideShowContext )
{
this.aContext = aSlideShowContext;
this.aAnimationNodeMap = null;
this.aAnimatedElementMap = null;
this.aSourceEventElementMap = null;
this.nStartDelay = 0.0;
this.bFirstRun = undefined;
this.aSlideHeight = HEIGHT;
this.aSlideWidth = WIDTH;
}


NodeContext.prototype.makeSourceEventElement = function( sId, aEventBaseElem )
{
if( !aEventBaseElem )
{
log( 'NodeContext.makeSourceEventElement: event base element is not valid' );
return null;
}

if( !this.aContext.aEventMultiplexer )
{
log( 'NodeContext.makeSourceEventElement: event multiplexer not initialized' );
return null;
}

if( !this.aSourceEventElementMap[ sId ] )
{
this.aSourceEventElementMap[ sId ] = new SourceEventElement( sId, aEventBaseElem, this.aContext.aEventMultiplexer );
}
return this.aSourceEventElementMap[ sId ];
};


function StateTransition( aBaseNode )
{
this.aNode = aBaseNode;
this.eToState = INVALID_NODE;
}

StateTransition.prototype.enter = function( eNodeState, bForce )
{
if( !bForce ) bForce = false;

if( this.eToState != INVALID_NODE )
{
log( 'StateTransition.enter: commit() before enter()ing again!' );
return false;
}
if( !bForce && !this.aNode.isTransition( this.aNode.getState(), eNodeState  ) )
return false;

if( ( this.aNode.nCurrentStateTransition & eNodeState ) != 0 )
return false; // already in wanted transition

this.aNode.nCurrentStateTransition |= eNodeState;
this.eToState = eNodeState;
return true;
};

StateTransition.prototype.commit = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.eCurrentState = this.eToState;
this.clear();
}
};

StateTransition.prototype.clear = function()
{
if( this.eToState != INVALID_NODE )
{
this.aNode.nCurrentStateTransition &= ~this.eToState;
this.eToState = INVALID_NODE;
}
};


function BaseNode( aAnimElem, aParentNode, aNodeContext )
{
this.nId = getUniqueId();
this.sClassName = 'BaseNode';

if( !aAnimElem )
log( 'BaseNode(id:' + this.nId + ') constructor: aAnimElem is not valid' );

if( !aNodeContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext is not valid' );

if( !aNodeContext.aContext )
log( 'BaseNode(id:' + this.nId + ') constructor: aNodeContext.aContext is not valid' );


this.bIsContainer = false;
this.aElement = aAnimElem;
this.aParentNode = aParentNode;
this.aNodeContext = aNodeContext;
this.aContext = aNodeContext.aContext;
this.nStartDelay = aNodeContext.nStartDelay;
this.eCurrentState = UNRESOLVED_NODE;
this.nCurrentStateTransition = 0;
this.aDeactivatingListenerArray = [];
this.aActivationEvent = null;
this.aDeactivationEvent = null;

this.aBegin = null;
this.aDuration = null;
this.aEnd = null;
this.bMainSequenceRootNode = false;
this.bInteractiveSequenceRootNode = false;
this.eFillMode = FILL_MODE_FREEZE;
this.eRestartMode = RESTART_MODE_NEVER;
this.nReapeatCount = undefined;
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
this.bAutoReverse = false;

}
extend( BaseNode, AnimationNode );


BaseNode.prototype.getId = function()
{
return this.nId;
};

BaseNode.prototype.parseElement = function()
{
var aAnimElem = this.aElement;

var sIdAttr = aAnimElem.getAttributeNS( NSS['xml'], 'id' );
if( sIdAttr )
this.aNodeContext.aAnimationNodeMap[ sIdAttr ] = this;

this.aBegin = null;
var sBeginAttr = aAnimElem.getAttributeNS( NSS['smil'], 'begin' );
this.aBegin = new Timing( this, sBeginAttr );
this.aBegin.parse();

this.aEnd = null;
var sEndAttr = aAnimElem.getAttributeNS( NSS['smil'], 'end' );
if( sEndAttr )
{
this.aEnd = new Timing( this, sEndAttr );
this.aEnd.parse();
}

this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
if( this.isContainer() )
this.aDuration = null;
else
this.aDuration = new Duration( 'indefinite' );
}

var sFillAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fill' );
if( sFillAttr && aFillModeInMap[ sFillAttr ])
this.eFillMode = aFillModeInMap[ sFillAttr ];
else
this.eFillMode = FILL_MODE_DEFAULT;

var sRestartAttr = aAnimElem.getAttributeNS( NSS['smil'], 'restart' );
if( sRestartAttr && aRestartModeInMap[ sRestartAttr ] )
this.eRestartMode = aRestartModeInMap[ sRestartAttr ];
else
this.eRestartMode = RESTART_MODE_DEFAULT;

var sRepeatCount = aAnimElem.getAttributeNS( NSS['smil'], 'repeatCount' );
if( !sRepeatCount )
this.nReapeatCount = 1;
else
this.nReapeatCount = parseFloat( sRepeatCount );
if( ( isNaN(this.nReapeatCount) ) && ( sRepeatCount != 'indefinite' ) )
this.nReapeatCount = 1;

this.nAccelerate = 0.0;
var sAccelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accelerate' );
if( sAccelerateAttr )
this.nAccelerate = parseFloat( sAccelerateAttr );
if( isNaN(this.nAccelerate) )
this.nAccelerate = 0.0;

this.nDecelerate = 0.0;
var sDecelerateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'decelerate' );
if( sDecelerateAttr )
this.nDecelerate = parseFloat( sDecelerateAttr );
if( isNaN(this.nDecelerate) )
this.nDecelerate = 0.0;

this.bAutoreverse = false;
var sAutoReverseAttr = aAnimElem.getAttributeNS( NSS['smil'], 'autoReverse' );
if( sAutoReverseAttr == 'true' )
this.bAutoreverse = true;


if( this.eFillMode == FILL_MODE_DEFAULT )
if( this.getParentNode() )
this.eFillMode = this.getParentNode().getFillMode();
else
this.eFillMode = FILL_MODE_AUTO;

if( this.eFillMode ==  FILL_MODE_AUTO ) // see SMIL recommendation document
{
this.eFillMode = ( this.aEnd ||
( this.nReapeatCount != 1) ||
( this.aDuration && !this.aDuration.isIndefinite() ) )
? FILL_MODE_REMOVE
: FILL_MODE_FREEZE;
}

if( this.eRestartMode == RESTART_MODE_DEFAULT )
if( this.getParentNode() )
this.eRestartMode = this.getParentNode().getRestartMode();
else
this.eRestartMode = RESTART_MODE_ALWAYS;

if( ( this.nAccelerate + this.nDecelerate ) > 1.0 )
{
this.nAccelerate = 0.0;
this.nDecelerate = 0.0;
}

this.aStateTransTable = getTransitionTable( this.getRestartMode(), this.getFillMode() );

return true;
};

BaseNode.prototype.getParentNode = function()
{
return this.aParentNode;
};

BaseNode.prototype.init = function()
{
this.DBG( this.callInfo( 'init' ) );
if( ! this.checkValidNode() )
return false;
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();

this.eCurrentState = UNRESOLVED_NODE;

return this.init_st();
};

BaseNode.prototype.resolve = function()
{
if( ! this.checkValidNode() )
return false;

this.DBG( this.callInfo( 'resolve' ) );

if( this.eCurrentState == RESOLVED_NODE )
log( 'BaseNode.resolve: already in RESOLVED state' );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( RESOLVED_NODE ) &&
this.isTransition( RESOLVED_NODE, ACTIVE_NODE ) &&
this.resolve_st() )
{
aStateTrans.commit();

if( this.aActivationEvent )
{
this.aActivationEvent.charge();
}
else
{
this.aActivationEvent = makeDelay( bind( this, this.activate ), this.getBegin().getOffset() + this.nStartDelay );
}
registerEvent( this.getId(), this.getBegin(), this.aActivationEvent, this.aNodeContext );

return true;
}

return false;
};

BaseNode.prototype.activate = function()
{
if( ! this.checkValidNode() )
return false;

if( this.eCurrentState == ACTIVE_NODE )
log( 'BaseNode.activate: already in ACTIVE state' );

this.DBG( this.callInfo( 'activate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );

if( aStateTrans.enter( ACTIVE_NODE ) )
{
this.activate_st();
aStateTrans.commit();
if( !this.aContext.aEventMultiplexer )
log( 'BaseNode.activate: this.aContext.aEventMultiplexer is not valid' );
this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_BEGIN_EVENT, this.getId() );
return true;
}
return false;
};

BaseNode.prototype.deactivate = function()
{
if( this.inStateOrTransition( ENDED_NODE | FROZEN_NODE ) || !this.checkValidNode() )
return;

if( this.isTransition( this.eCurrentState, FROZEN_NODE ) )
{
this.DBG( this.callInfo( 'deactivate' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( FROZEN_NODE, true /* FORCE */ ) )
{
this.deactivate_st( FROZEN_NODE );
aStateTrans.commit();

this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
}
else
{
this.end();
}
};

BaseNode.prototype.end = function()
{
var bIsFrozenOrInTransitionToFrozen = this.inStateOrTransition( FROZEN_NODE );
if( this.inStateOrTransition( ENDED_NODE ) || !this.checkValidNode() )
return;

if( !(this.isTransition( this.eCurrentState, ENDED_NODE ) ) )
log( 'BaseNode.end: end state not reachable in transition table' );

this.DBG( this.callInfo( 'end' ), getCurrentSystemTime() );

var aStateTrans = new StateTransition( this );
if( aStateTrans.enter( ENDED_NODE, true /* FORCE */ ) )
{
this.deactivate_st( ENDED_NODE );
aStateTrans.commit();

if( !bIsFrozenOrInTransitionToFrozen )
this.notifyEndListeners();

if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
}
};

BaseNode.prototype.dispose = function()
{
if( this.aActivationEvent )
this.aActivationEvent.dispose();
if( this.aDeactivationEvent )
this.aDeactivationEvent.dispose();
this.aDeactivatingListenerArray = [];
};

BaseNode.prototype.getState = function()
{
return this.eCurrentState;
};

BaseNode.prototype.registerDeactivatingListener = function( aNotifiee )
{
if (! this.checkValidNode())
return false;

if( !aNotifiee )
{
log( 'BaseNode.registerDeactivatingListener(): invalid notifee' );
return false;
}
this.aDeactivatingListenerArray.push( aNotifiee );

return true;
};

BaseNode.prototype.notifyDeactivating = function( aNotifier )
{
assert( ( aNotifier.getState() == FROZEN_NODE ) || ( aNotifier.getState() == ENDED_NODE ),
'BaseNode.notifyDeactivating: Notifier node is neither in FROZEN nor in ENDED state' );
};

BaseNode.prototype.isMainSequenceRootNode = function()
{
return this.bMainSequenceRootNode;
};

BaseNode.prototype.isInteractiveSequenceRootNode = function()
{
return this.bInteractiveSequenceRootNode;
};

BaseNode.prototype.makeDeactivationEvent = function( nDelay )
{
if( this.aDeactivationEvent )
{
this.aDeactivationEvent.charge();
}
else
{
if( typeof( nDelay ) == typeof(0) )
this.aDeactivationEvent = makeDelay( bind( this, this.deactivate ), nDelay );
else
this.aDeactivationEvent = null;
}
return this.aDeactivationEvent;
};

BaseNode.prototype.scheduleDeactivationEvent = function( aEvent )
{
this.DBG( this.callInfo( 'scheduleDeactivationEvent' ) );

if( !aEvent )
{
if( this.getDuration() && this.getDuration().isValue() )
aEvent = this.makeDeactivationEvent( this.getDuration().getValue() );
}
if( aEvent )
{
this.aContext.aTimerEventQueue.addEvent( aEvent );
}
};

BaseNode.prototype.checkValidNode = function()
{
return ( this.eCurrentState != INVALID_NODE );
};

BaseNode.prototype.init_st = function()
{
return true;
};

BaseNode.prototype.resolve_st = function()
{
return true;
};

BaseNode.prototype.activate_st = function()
{
this.scheduleDeactivationEvent();
};

BaseNode.prototype.deactivate_st = function( /*aNodeState*/ )
{
};

BaseNode.prototype.notifyEndListeners = function()
{
var nDeactivatingListenerCount = this.aDeactivatingListenerArray.length;

for( var i = 0; i < nDeactivatingListenerCount; ++i )
{
this.aDeactivatingListenerArray[i].notifyDeactivating( this );
}

this.aContext.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_END_EVENT, this.getId() );
if( this.getParentNode() && this.getParentNode().isMainSequenceRootNode() )
this.aContext.aEventMultiplexer.notifyNextEffectEndEvent();
};

BaseNode.prototype.getContext = function()
{
return this.aContext;
};

BaseNode.prototype.isTransition = function( eFromState, eToState )
{
return ( ( this.aStateTransTable[ eFromState ] & eToState ) != 0 );
};

BaseNode.prototype.inStateOrTransition = function( nMask )
{
return ( ( ( this.eCurrentState & nMask ) != 0 ) || ( ( this.nCurrentStateTransition & nMask ) != 0 ) );
};

BaseNode.prototype.isContainer = function()
{
return this.bIsContainer;
};

BaseNode.prototype.getBegin = function()
{
return this.aBegin;
};

BaseNode.prototype.getDuration = function()
{
return this.aDuration;
};

BaseNode.prototype.getEnd = function()
{
return this.aEnd;
};

BaseNode.prototype.getFillMode = function()
{
return this.eFillMode;
};

BaseNode.prototype.getRestartMode = function()
{
return this.eRestartMode;
};

BaseNode.prototype.getRepeatCount = function()
{
return this.nReapeatCount;
};

BaseNode.prototype.getAccelerateValue = function()
{
return this.nAccelerate;
};

BaseNode.prototype.getDecelerateValue = function()
{
return this.nDecelerate;
};

BaseNode.prototype.isAutoReverseEnabled = function()
{
return this.bAutoreverse;
};

BaseNode.prototype.info = function( bVerbose )
{
var sInfo = 'class name: ' + this.sClassName;
sInfo += ';  element name: ' + this.aElement.localName;
sInfo += ';  id: ' + this.getId();
sInfo += ';  state: ' + getNodeStateName( this.getState() );

if( bVerbose )
{
sInfo += ';  is container: ' + this.isContainer();

if( this.getBegin() )
sInfo += ';  begin: ' + this.getBegin().info();

if( this.getDuration() )
sInfo += ';  dur: ' + this.getDuration().info();

if( this.getEnd() )
sInfo += ';  end: ' + this.getEnd().info();

if( this.getFillMode() )
sInfo += ';  fill: ' + aFillModeOutMap[ this.getFillMode() ];

if( this.getRestartMode() )
sInfo += ';  restart: ' + aRestartModeOutMap[ this.getRestartMode() ];

if( this.getRepeatCount() && ( this.getRepeatCount() != 1.0 ) )
sInfo += ';  repeatCount: ' + this.getRepeatCount();

if( this.getAccelerateValue() )
sInfo += ';  accelerate: ' + this.getAccelerateValue();

if( this.getDecelerateValue() )
sInfo += ';  decelerate: ' + this.getDecelerateValue();

if( this.isAutoReverseEnabled() )
sInfo += ';  autoReverse: true';

}

return sInfo;
};

BaseNode.prototype.callInfo = function( sMethodName )
{
var sInfo = this.sClassName +
'( ' + this.getId() +
', ' + getNodeStateName( this.getState() ) +
' ).' + sMethodName;
return sInfo;
};

BaseNode.prototype.DBG = function( sMessage, nTime )
{
ANIMDBG.print( sMessage, nTime );
};


function AnimationBaseNode( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationBaseNode';
this.bIsContainer = false;
this.aTargetElement = null;
this.bIsTargetTextElement = false;
this.aAnimatedElement = null;
this.aActivity = null;

this.nMinFrameCount = undefined;
this.eAdditiveMode = undefined;

}
extend( AnimationBaseNode, BaseNode );


AnimationBaseNode.prototype.parseElement = function()
{
var bRet = AnimationBaseNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.aTargetElement = null;
var sTargetElementAttr = aAnimElem.getAttributeNS( NSS['smil'], 'targetElement' );
if( sTargetElementAttr )
this.aTargetElement = document.getElementById( sTargetElementAttr );

if( !this.aTargetElement )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode.parseElement: target element not found: ' + sTargetElementAttr );
}

var sSubItemAttr = aAnimElem.getAttributeNS( NSS['anim'], 'sub-item' );
this.bIsTargetTextElement = ( sSubItemAttr && ( sSubItemAttr === 'text' ) );

var sAdditiveAttr = aAnimElem.getAttributeNS( NSS['smil'], 'additive' );
if( sAdditiveAttr && aAddittiveModeInMap[sAdditiveAttr] )
this.eAdditiveMode = aAddittiveModeInMap[sAdditiveAttr];
else
this.eAdditiveMode = ADDITIVE_MODE_REPLACE;

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;


if( this.aTargetElement )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' ) === 'visibility' )
{
if( aAnimElem.getAttributeNS( NSS['smil'], 'to' ) === 'visible' )
this.aTargetElement.setAttribute( 'visibility', 'hidden' );
}

if( !this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ] )
{
if( this.bIsTargetTextElement )
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedTextElement( this.aTargetElement );
}
else
{
this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ]
= new AnimatedElement( this.aTargetElement );
}
}
this.aAnimatedElement = this.aNodeContext.aAnimatedElementMap[ sTargetElementAttr ];

this.aAnimatedElement.setAdditiveMode( this.eAdditiveMode );
}


return bRet;
};

AnimationBaseNode.prototype.init_st = function()
{
if( this.aActivity )
this.aActivity.activate( makeEvent( bind( this, this.deactivate ) ) );
else
this.aActivity = this.createActivity();
return true;
};

AnimationBaseNode.prototype.resolve_st = function()
{
return true;
};

AnimationBaseNode.prototype.activate_st = function()
{
if( this.aActivity )
{
this.saveStateOfAnimatedElement();
this.aActivity.setTargets( this.getAnimatedElement() );
if( this.getContext().bIsSkipping  )
{
this.aActivity.end();
}
else
{
this.getContext().aActivityQueue.addActivity( this.aActivity );
}
}
else
{
AnimationBaseNode.superclass.scheduleDeactivationEvent.call( this );
}
};

AnimationBaseNode.prototype.deactivate_st = function( eDestState )
{
if( eDestState == FROZEN_NODE )
{
if( this.aActivity )
this.aActivity.end();
}
if( eDestState == ENDED_NODE )
{
if( this.aActivity )
this.aActivity.dispose();
if( ( this.getFillMode() == FILL_MODE_REMOVE ) && this.getAnimatedElement()  )
this.removeEffect();
}
};

AnimationBaseNode.prototype.createActivity = function()
{
log( 'AnimationBaseNode.createActivity: abstract method called' );
};

AnimationBaseNode.prototype.fillActivityParams = function()
{

var nDuration = 0.001;
if( this.getDuration().isValue() )
{
nDuration = this.getDuration().getValue();
}
else
{
log( 'AnimationBaseNode.fillActivityParams: duration is not a number' );
}

var aActivityParamSet = new ActivityParamSet();

aActivityParamSet.aEndEvent             = makeEvent( bind( this, this.deactivate ) );
aActivityParamSet.aTimerEventQueue      = this.aContext.aTimerEventQueue;
aActivityParamSet.aActivityQueue        = this.aContext.aActivityQueue;
aActivityParamSet.nMinDuration          = nDuration;
aActivityParamSet.nMinNumberOfFrames    = this.getMinFrameCount();
aActivityParamSet.bAutoReverse          = this.isAutoReverseEnabled();
aActivityParamSet.nRepeatCount          = this.getRepeatCount();
aActivityParamSet.nAccelerationFraction = this.getAccelerateValue();
aActivityParamSet.nDecelerationFraction = this.getDecelerateValue();
aActivityParamSet.nSlideWidth           = this.aNodeContext.aSlideWidth;
aActivityParamSet.nSlideHeight          = this.aNodeContext.aSlideHeight;

return aActivityParamSet;
};

AnimationBaseNode.prototype.hasPendingAnimation = function()
{
return true;
};

AnimationBaseNode.prototype.saveStateOfAnimatedElement = function()
{
this.getAnimatedElement().saveState( this.getId() );
};

AnimationBaseNode.prototype.removeEffect = function()
{
this.getAnimatedElement().restoreState( this.getId() );
};

AnimationBaseNode.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

AnimationBaseNode.prototype.getAnimatedElement = function()
{
return this.aAnimatedElement;
};

AnimationBaseNode.prototype.dispose= function()
{
if( this.aActivity )
this.aActivity.dispose();

AnimationBaseNode.superclass.dispose.call( this );
};

AnimationBaseNode.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

AnimationBaseNode.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimationBaseNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getMinFrameCount() )
sInfo += ';  min frame count: ' + this.getMinFrameCount();

sInfo += ';  additive: ' + aAddittiveModeOutMap[ this.getAdditiveMode() ];

if( this.getTargetElement() )
{
var sElemId = this.getTargetElement().getAttribute( 'id' );
sInfo += ';  targetElement: ' +  sElemId;
}
}

return sInfo;
};


function AnimationBaseNode2( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode2.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sAttributeName = '';
this.aToValue = null;

}
extend( AnimationBaseNode2, AnimationBaseNode );


AnimationBaseNode2.prototype.parseElement = function()
{
var bRet = AnimationBaseNode2.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.sAttributeName = aAnimElem.getAttributeNS( NSS['smil'], 'attributeName' );
if( !this.sAttributeName )
{
this.eCurrentState = INVALID_NODE;
log( 'AnimationBaseNode2.parseElement: target attribute name not found: ' + this.sAttributeName );
}

this.aToValue = aAnimElem.getAttributeNS( NSS['smil'], 'to' );

return bRet;
};

AnimationBaseNode2.prototype.getAttributeName = function()
{
return this.sAttributeName;
};

AnimationBaseNode2.prototype.getToValue = function()
{
return this.aToValue;
};

AnimationBaseNode2.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode2.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAttributeName() )
sInfo += ';  attributeName: ' + this.getAttributeName();

if( this.getToValue() )
sInfo += ';  to: ' + this.getToValue();
}

return sInfo;
};


function AnimationBaseNode3( aAnimElem, aParentNode, aNodeContext )
{
AnimationBaseNode3.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.eAccumulate = undefined;
this.eCalcMode = undefined;
this.aFromValue = null;
this.aByValue = null;
this.aKeyTimes = null;
this.aValues = null;
this.aFormula= null;
}
extend( AnimationBaseNode3, AnimationBaseNode2 );


AnimationBaseNode3.prototype.parseElement = function()
{
var bRet = AnimationBaseNode3.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eAccumulate = ACCUMULATE_MODE_NONE;
var sAccumulateAttr = aAnimElem.getAttributeNS( NSS['smil'], 'accumulate' );
if( sAccumulateAttr == 'sum' )
this.eAccumulate = ACCUMULATE_MODE_SUM;

this.eCalcMode = CALC_MODE_LINEAR;
var sCalcModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'calcMode' );
if( sCalcModeAttr && aCalcModeInMap[ sCalcModeAttr ] )
this.eCalcMode = aCalcModeInMap[ sCalcModeAttr ];

this.aFromValue = aAnimElem.getAttributeNS( NSS['smil'], 'from' );

this.aByValue = aAnimElem.getAttributeNS( NSS['smil'], 'by' );

this.aKeyTimes = [];
var sKeyTimesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'keyTimes' );
sKeyTimesAttr = removeWhiteSpaces( sKeyTimesAttr );
if( sKeyTimesAttr )
{
var aKeyTimes = sKeyTimesAttr.split( ';' );
for( var i = 0; i < aKeyTimes.length; ++i )
this.aKeyTimes.push( parseFloat( aKeyTimes[i] ) );
}

var sValuesAttr = aAnimElem.getAttributeNS( NSS['smil'], 'values' );
if( sValuesAttr )
{
this.aValues = sValuesAttr.split( ';' );
}
else
{
this.aValues = [];
}

this.aFormula = aAnimElem.getAttributeNS( NSS['anim'], 'formula' );

return bRet;
};

AnimationBaseNode3.prototype.getAccumulate = function()
{
return this.eAccumulate;
};

AnimationBaseNode3.prototype.getCalcMode = function()
{
return this.eCalcMode;
};

AnimationBaseNode3.prototype.getFromValue = function()
{
return this.aFromValue;
};

AnimationBaseNode3.prototype.getByValue = function()
{
return this.aByValue;
};

AnimationBaseNode3.prototype.getKeyTimes = function()
{
return this.aKeyTimes;
};

AnimationBaseNode3.prototype.getValues = function()
{
return this.aValues;
};

AnimationBaseNode3.prototype.getFormula = function()
{
return this.aFormula;
};

AnimationBaseNode3.prototype.info = function( bVerbose )
{
var sInfo = AnimationBaseNode3.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getAccumulate() )
sInfo += ';  accumulate: ' + aAccumulateModeOutMap[ this.getAccumulate() ];

sInfo += ';  calcMode: ' + aCalcModeOutMap[ this.getCalcMode() ];

if( this.getFromValue() )
sInfo += ';  from: ' + this.getFromValue();

if( this.getByValue() )
sInfo += ';  by: ' + this.getByValue();

if( this.getKeyTimes().length )
sInfo += ';  keyTimes: ' + this.getKeyTimes().join( ',' );

if( this.getKeyTimes().length )
sInfo += ';  values: ' + this.getValues().join( ',' );

if( this.getFormula() )
sInfo += ';  formula: ' + this.getFormula();
}

return sInfo;
};


function BaseContainerNode( aAnimElem, aParentNode, aNodeContext )
{
BaseContainerNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'BaseContainerNode';
this.bIsContainer = true;
this.aChildrenArray = [];
this.nFinishedChildren = 0;
this.bDurationIndefinite = false;
this.nLeftIterations = 1;

this.eImpressNodeType = undefined;
this.ePresetClass =  undefined;
this.ePresetId =  undefined;
}
extend( BaseContainerNode, BaseNode );


BaseContainerNode.prototype.parseElement= function()
{
var bRet = BaseContainerNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eImpressNodeType = IMPRESS_DEFAULT_NODE;
var sNodeTypeAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'node-type' );
if( sNodeTypeAttr && aImpressNodeTypeInMap[ sNodeTypeAttr ] )
this.eImpressNodeType = aImpressNodeTypeInMap[ sNodeTypeAttr ];
this.bMainSequenceRootNode = ( this.eImpressNodeType == IMPRESS_MAIN_SEQUENCE_NODE );
this.bInteractiveSequenceRootNode = ( this.eImpressNodeType == IMPRESS_INTERACTIVE_SEQUENCE_NODE );

this.ePresetClass =  undefined;
var sPresetClassAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-class' );
if( sPresetClassAttr && aPresetClassInMap[ sPresetClassAttr ] )
this.ePresetClass = aPresetClassInMap[ sPresetClassAttr ];

this.ePresetId =  undefined;
var sPresetIdAttr = aAnimElem.getAttributeNS( NSS['presentation'], 'preset-id' );
if( sPresetIdAttr && aPresetIdInMap[ sPresetIdAttr ] )
this.ePresetId = aPresetIdInMap[ sPresetIdAttr ];


var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].parseElement();
}


this.bDurationIndefinite
= ( !this.getDuration() || this.getDuration().isIndefinite()  ) &&
( !this.getEnd() || ( this.getEnd().getType() != OFFSET_TIMING ) );

return bRet;
};

BaseContainerNode.prototype.appendChildNode = function( aAnimationNode )
{
if( ! this.checkValidNode() )
return ;

if( aAnimationNode.registerDeactivatingListener( this ) )
this.aChildrenArray.push( aAnimationNode );
};

BaseContainerNode.prototype.removeAllChildrenNodes = function()
{
this.aChildrenArray = [];
};

BaseContainerNode.prototype.init_st = function()
{
this.nLeftIterations = this.getRepeatCount();

return this.init_children();
};

BaseContainerNode.prototype.init_children = function()
{
this.nFinishedChildren = 0;
var nChildrenCount = this.aChildrenArray.length;
var nInitChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].init() )
{
++nInitChildren;
}
}
return ( nChildrenCount == nInitChildren );
};


BaseContainerNode.prototype.deactivate_st = function( eDestState )
{
this.nLeftIterations = 0;
if( eDestState == FROZEN_NODE )
{
this.forEachChildNode( mem_fn( 'deactivate' ), ~( FROZEN_NODE | ENDED_NODE ) );
}
else
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
if( this.getFillMode() == FILL_MODE_REMOVE )
this.removeEffect();
}
};

BaseContainerNode.prototype.hasPendingAnimation = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].hasPendingAnimation() )
return true;
}
return false;
};

BaseContainerNode.prototype.activate_st = function()
{
log( 'BaseContainerNode.activate_st: abstract method called' );
};

BaseContainerNode.prototype.notifyDeactivating = function( /*aAnimationNode*/ )
{
log( 'BaseContainerNode.notifyDeactivating: abstract method called' );
};

BaseContainerNode.prototype.isDurationIndefinite = function()
{
return this.bDurationIndefinite;
};

BaseContainerNode.prototype.isChildNode = function( aAnimationNode )
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].getId() == aAnimationNode.getId() )
return true;
}
return false;
};

BaseContainerNode.prototype.notifyDeactivatedChild = function( aChildNode )
{
assert( ( aChildNode.getState() == FROZEN_NODE ) || ( aChildNode.getState() == ENDED_NODE ),
'BaseContainerNode.notifyDeactivatedChild: passed child node is neither in FROZEN nor in ENDED state' );

assert( this.getState() != INVALID_NODE,
'BaseContainerNode.notifyDeactivatedChild: this node is invalid' );

if( !this.isChildNode( aChildNode ) )
{
log( 'BaseContainerNode.notifyDeactivatedChild: unknown child notifier!' );
return false;
}

var nChildrenCount = this.aChildrenArray.length;

assert( ( this.nFinishedChildren < nChildrenCount ),
'BaseContainerNode.notifyDeactivatedChild: assert(this.nFinishedChildren < nChildrenCount) failed' );

++this.nFinishedChildren;
var bFinished = ( this.nFinishedChildren >= nChildrenCount );

if( bFinished && this.isDurationIndefinite() )
{
if( this.nLeftIterations >= 1.0 )
{
this.nLeftIterations -= 1.0;
}
if( this.nLeftIterations >= 1.0 )
{
bFinished = false;
var aRepetitionEvent = makeDelay( bind( this, this.repeat ), 0.0 );
this.aContext.aTimerEventQueue.addEvent( aRepetitionEvent );
}
else
{
this.deactivate();
}
}

return bFinished;
};

BaseContainerNode.prototype.repeat = function()
{
this.forEachChildNode( mem_fn( 'end' ), ~ENDED_NODE );
this.removeEffect();
var bInitialized = this.init_children();
if( bInitialized )
this.activate_st();
return bInitialized;
};

BaseContainerNode.prototype.removeEffect = function()
{
var nChildrenCount = this.aChildrenArray.length;
if( nChildrenCount == 0 )
return;
for( var i = nChildrenCount - 1; i >= 0; --i )
{
if( ( this.aChildrenArray[i].getState() & ( FROZEN_NODE | ENDED_NODE ) ) == 0 )
{
log( 'BaseContainerNode.removeEffect: child(id:'
+ this.aChildrenArray[i].getId() + ') is neither frozen nor ended;'
+ ' state: '
+ aTransitionModeOutMap[ this.aChildrenArray[i].getState() ] );
continue;
}
this.aChildrenArray[i].removeEffect();
}
};

BaseContainerNode.prototype.saveStateOfAnimatedElement = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].saveStateOfAnimatedElement();
}
};

BaseContainerNode.prototype.forEachChildNode = function( aFunction, eNodeStateMask )
{
if( !eNodeStateMask )
eNodeStateMask = -1;

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
if( ( eNodeStateMask != -1 ) && ( ( this.aChildrenArray[i].getState() & eNodeStateMask ) == 0 ) )
continue;
aFunction( this.aChildrenArray[i] );
}
};

BaseContainerNode.prototype.dispose = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
this.aChildrenArray[i].dispose();
}

BaseContainerNode.superclass.dispose.call( this );
};

BaseContainerNode.prototype.getImpressNodeType = function()
{
return this.eImpressNodeType;
};

BaseContainerNode.prototype.info = function( bVerbose )
{
var sInfo = BaseContainerNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
if( this.getImpressNodeType() )
sInfo += ';  node-type: ' + aImpressNodeTypeOutMap[ this.getImpressNodeType() ];
}

var nChildrenCount = this.aChildrenArray.length;
for( var i = 0; i < nChildrenCount; ++i )
{
sInfo += '\n';
sInfo += this.aChildrenArray[i].info( bVerbose );
}

return sInfo;
};


function ParallelTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
ParallelTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'ParallelTimeContainer';
}
extend( ParallelTimeContainer, BaseContainerNode );


ParallelTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
var nResolvedChildren = 0;
for( var i = 0; i < nChildrenCount; ++i )
{
if( this.aChildrenArray[i].resolve() )
{
++nResolvedChildren;
}
}

if( nChildrenCount != nResolvedChildren )
{
log( 'ParallelTimeContainer.activate_st: resolving all children failed' );
return;
}


if( this.isDurationIndefinite() && ( nChildrenCount == 0  ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

ParallelTimeContainer.prototype.notifyDeactivating = function( aAnimationNode )
{
this.notifyDeactivatedChild( aAnimationNode );
};


function SequentialTimeContainer( aAnimElem, aParentNode, aNodeContext )
{
SequentialTimeContainer.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'SequentialTimeContainer';
this.bIsRewinding = false;
this.aCurrentSkipEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
}
extend( SequentialTimeContainer, BaseContainerNode );


SequentialTimeContainer.prototype.activate_st = function()
{
var nChildrenCount = this.aChildrenArray.length;
for( ; this.nFinishedChildren < nChildrenCount; ++this.nFinishedChildren )
{
if( this.resolveChild( this.aChildrenArray[ this.nFinishedChildren ] ) )
break;
else
log( 'SequentialTimeContainer.activate_st: resolving child failed!' );
}

if( this.isDurationIndefinite() && ( ( nChildrenCount == 0 ) || ( this.nFinishedChildren >= nChildrenCount ) ) )
{
this.scheduleDeactivationEvent( this.makeDeactivationEvent( 0.0 ) );
}
else
{
this.scheduleDeactivationEvent();
}
};

SequentialTimeContainer.prototype.notifyDeactivating = function( aNotifier )
{
if( this.bIsRewinding )
return;

if( this.notifyDeactivatedChild( aNotifier ) )
return;

assert( this.nFinishedChildren < this.aChildrenArray.length,
'SequentialTimeContainer.notifyDeactivating: assertion (this.nFinishedChildren < this.aChildrenArray.length) failed' );

var aNextChild = this.aChildrenArray[ this.nFinishedChildren ];

assert( aNextChild.getState() == UNRESOLVED_NODE,
'SequentialTimeContainer.notifyDeactivating: assertion (aNextChild.getState == UNRESOLVED_NODE) failed' );

if( !this.resolveChild( aNextChild ) )
{
this.deactivate();
}
};

SequentialTimeContainer.prototype.skipEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
var aEvent = makeEvent( bind2( aChildNode.deactivate, aChildNode ) );
this.getContext().aTimerEventQueue.addEvent( aEvent );
}
else
{
log( 'SequentialTimeContainer.skipEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindCurrentEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindCurrentEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aActivityQueue.endAll();
this.getContext().bIsSkipping = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().bIsSkipping = false;
this.getContext().aActivityQueue.endAll();

aChildNode.end();
aChildNode.removeEffect();
aChildNode.init();
this.resolveChild( aChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindCurrentEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.rewindLastEffect = function( aChildNode )
{
if( this.isChildNode( aChildNode ) )
{
assert( !this.bIsRewinding,
'SequentialTimeContainer.rewindLastEffect: is already rewinding.' );

this.bIsRewinding = true;
this.getContext().aTimerEventQueue.forceEmpty();
this.getContext().aActivityQueue.clear();
aChildNode.end();

--this.nFinishedChildren;
var aPreviousChildNode = this.aChildrenArray[ this.nFinishedChildren ];

aPreviousChildNode.removeEffect();
aPreviousChildNode.init();
aChildNode.init();
this.resolveChild( aPreviousChildNode );
this.notifyRewindedEvent( aChildNode );
this.bIsRewinding = false;
}
else
{
log( 'SequentialTimeContainer.rewindLastEffect: unknown child: '
+ aChildNode.getId() );
}
};

SequentialTimeContainer.prototype.resolveChild = function( aChildNode )
{
var bResolved = aChildNode.resolve();

if( bResolved && ( this.isMainSequenceRootNode() || this.isInteractiveSequenceRootNode() ) )
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();
this.aCurrentSkipEvent = makeEvent( bind2( SequentialTimeContainer.prototype.skipEffect, this, aChildNode ) );

if( this.aRewindCurrentEffectEvent )
this.aRewindCurrentEffectEvent.dispose();
this.aRewindCurrentEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindCurrentEffect, this, aChildNode ) );

if( this.aRewindLastEffectEvent )
this.aRewindLastEffectEvent.dispose();
this.aRewindLastEffectEvent = makeEvent( bind2( SequentialTimeContainer.prototype.rewindLastEffect, this, aChildNode ) );

if( this.isMainSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipEffectEvent( this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindCurrentEffectEvent( this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindLastEffectEvent( this.aRewindLastEffectEvent );
}
else if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.registerSkipInteractiveEffectEvent( aChildNode.getId(), this.aCurrentSkipEvent );
this.aContext.aEventMultiplexer.registerRewindRunningInteractiveEffectEvent( aChildNode.getId(), this.aRewindCurrentEffectEvent );
this.aContext.aEventMultiplexer.registerRewindEndedInteractiveEffectEvent( aChildNode.getId(), this.aRewindLastEffectEvent );
}
}
return bResolved;
};

SequentialTimeContainer.prototype.notifyRewindedEvent = function( aChildNode )
{
if( this.isInteractiveSequenceRootNode() )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( aChildNode.getId() );

var sId = aChildNode.getBegin().getEventBaseElementId();
if( sId )
{
this.aContext.aEventMultiplexer.notifyRewindedEffectEvent( sId );
}
}
};

SequentialTimeContainer.prototype.dispose = function()
{
if( this.aCurrentSkipEvent )
this.aCurrentSkipEvent.dispose();

SequentialTimeContainer.superclass.dispose.call( this );
};


function PropertyAnimationNode(  aAnimElem, aParentNode, aNodeContext )
{
PropertyAnimationNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'PropertyAnimationNode';
}
extend( PropertyAnimationNode, AnimationBaseNode3 );


PropertyAnimationNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aInterpolator = null;  // createActivity will compute it;
return createActivity( aActivityParamSet, this, aAnimation, aInterpolator );
};


function AnimationSetNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationSetNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationSetNode';
}
extend( AnimationSetNode, AnimationBaseNode2 );


AnimationSetNode.prototype.createActivity = function()
{
var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aActivityParamSet = this.fillActivityParams();

return new SetActivity( aActivityParamSet, aAnimation, this.getToValue() );
};


function AnimationColorNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationColorNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationColorNode';

this.eColorInterpolation = undefined;
this.eColorInterpolationDirection = undefined;
}
extend( AnimationColorNode, AnimationBaseNode3 );


AnimationColorNode.prototype.parseElement = function()
{
var bRet = AnimationColorNode.superclass.parseElement.call( this );

var aAnimElem = this.aElement;

this.eColorInterpolation = COLOR_SPACE_RGB;
var sColorInterpolationAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation' );
if( sColorInterpolationAttr && aColorSpaceInMap[ sColorInterpolationAttr ] )
this.eColorInterpolation = aColorSpaceInMap[ sColorInterpolationAttr ];

this.eColorInterpolationDirection = CLOCKWISE;
var sColorInterpolationDirectionAttr = aAnimElem.getAttributeNS( NSS['anim'], 'color-interpolation-direction' );
if( sColorInterpolationDirectionAttr && aClockDirectionInMap[ sColorInterpolationDirectionAttr ] )
this.eColorInterpolationDirection = aClockDirectionInMap[ sColorInterpolationDirectionAttr ];

return bRet;
};

AnimationColorNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

var aAnimation = createPropertyAnimation( this.getAttributeName(),
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight );

var aColorAnimation;
var aInterpolator;
if( this.getColorInterpolation() === COLOR_SPACE_HSL )
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space hsl'  );
aColorAnimation = new HSLAnimationWrapper( aAnimation );
var aInterpolatorMaker = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_HSL );
aInterpolator = aInterpolatorMaker( this.getColorInterpolationDirection() );
}
else
{
ANIMDBG.print( 'AnimationColorNode.createActivity: color space rgb'  );
aColorAnimation = aAnimation;
aInterpolator = aInterpolatorHandler.getInterpolator( this.getCalcMode(),
COLOR_PROPERTY,
COLOR_SPACE_RGB );
}

return createActivity( aActivityParamSet, this, aColorAnimation, aInterpolator );
};

AnimationColorNode.prototype.getColorInterpolation = function()
{
return this.eColorInterpolation;
};

AnimationColorNode.prototype.getColorInterpolationDirection = function()
{
return this.eColorInterpolationDirection;
};

AnimationColorNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationColorNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  color-interpolation: ' + aColorSpaceOutMap[ this.getColorInterpolation() ];

sInfo += ';  color-interpolation-direction: ' + aClockDirectionOutMap[ this.getColorInterpolationDirection() ];
}
return sInfo;
};


function AnimationTransitionFilterNode(  aAnimElem, aParentNode, aNodeContext )
{
AnimationTransitionFilterNode.superclass.constructor.call( this, aAnimElem, aParentNode, aNodeContext );

this.sClassName = 'AnimationTransitionFilterNode';

this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = undefined;
this.eTransitionMode = undefined;
}
extend( AnimationTransitionFilterNode, AnimationBaseNode );


AnimationTransitionFilterNode.prototype.createActivity = function()
{
var aActivityParamSet = this.fillActivityParams();

return createShapeTransition( aActivityParamSet,
this.getAnimatedElement(),
this.aNodeContext.aSlideWidth,
this.aNodeContext.aSlideHeight,
this );
};

AnimationTransitionFilterNode.prototype.parseElement = function()
{
var bRet = AnimationTransitionFilterNode.superclass.parseElement.call( this );
var bIsValidTransition = true;

var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined  ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
bIsValidTransition = false;
log( 'AnimationTransitionFilterNode.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( !bIsValidTransition )
{
this.eTransitionType = FADE_TRANSITION;
this.eTransitionSubType = CROSSFADE_TRANS_SUBTYPE;
log( 'AnimationTransitionFilterNode.parseElement: in place of the invalid transition a crossfade transition is used' );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.eTransitionMode = TRANSITION_MODE_IN;
var sModeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'mode' );
if( sModeAttr === 'out' )
this.eTransitionMode = TRANSITION_MODE_OUT;

return bRet;
};

AnimationTransitionFilterNode.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

AnimationTransitionFilterNode.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

AnimationTransitionFilterNode.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

AnimationTransitionFilterNode.prototype.getReverseDirection = function()
{
return this.bReverseDirection;
};

AnimationTransitionFilterNode.prototype.info = function( bVerbose )
{
var sInfo = AnimationTransitionFilterNode.superclass.info.call( this, bVerbose );

if( bVerbose )
{
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( this.getReverseDirection() )
sInfo += ';  direction: reverse';
}

return sInfo;
};


function createAnimationTree( aRootElement, aNodeContext )
{
return createAnimationNode( aRootElement, null, aNodeContext );
}


function createAnimationNode( aElement, aParentNode, aNodeContext )
{
assert( aElement, 'createAnimationNode: invalid animation element' );

var eAnimationNodeType = getAnimationElementType( aElement );

var aCreatedNode = null;
var aCreatedContainer = null;

switch( eAnimationNodeType )
{
case ANIMATION_NODE_PAR:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ITERATE:
aCreatedNode = aCreatedContainer =
new ParallelTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SEQ:
aCreatedNode = aCreatedContainer =
new SequentialTimeContainer( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATE:
aCreatedNode = new PropertyAnimationNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_SET:
aCreatedNode = new AnimationSetNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATEMOTION:
log( 'createAnimationNode: ANIMATEMOTION not implemented' );
return null;
case ANIMATION_NODE_ANIMATECOLOR:
aCreatedNode = new AnimationColorNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_ANIMATETRANSFORM:
log( 'createAnimationNode: ANIMATETRANSFORM not implemented' );
return null;
case ANIMATION_NODE_TRANSITIONFILTER:
aCreatedNode = new AnimationTransitionFilterNode( aElement, aParentNode, aNodeContext );
break;
case ANIMATION_NODE_AUDIO:
log( 'createAnimationNode: AUDIO not implemented' );
return null;
case ANIMATION_NODE_COMMAND:
log( 'createAnimationNode: COMMAND not implemented' );
return null;
default:
log( 'createAnimationNode: invalid Animation Node Type: ' + eAnimationNodeType );
return null;
}

if( aCreatedContainer )
{
if( eAnimationNodeType == ANIMATION_NODE_ITERATE )
{
createIteratedNodes( aElement, aCreatedContainer, aNodeContext );
}
else
{
var aChildrenArray = getElementChildren( aElement );
for( var i = 0; i < aChildrenArray.length; ++i )
{
if( !createChildNode( aChildrenArray[i], aCreatedContainer, aNodeContext ) )
{
aCreatedContainer.removeAllChildrenNodes();
break;
}
}
}
}

return aCreatedNode;
}


function createChildNode( aElement, aParentNode, aNodeContext )
{
var aChildNode = createAnimationNode( aElement, aParentNode, aNodeContext );

if( !aChildNode )
{
log( 'createChildNode: child node creation failed' );
return false;
}
else
{
aParentNode.appendChildNode( aChildNode );
return true;
}
}


function createIteratedNodes( /*aElement, aContainerNode, aNodeContext*/ )
{
}


function makeScaler( nScale )
{
if( ( typeof( nScale ) !== typeof( 0 ) ) || !isFinite( nScale ) )
{
log( 'makeScaler: not valid param passed: ' + nScale );
return null;
}

return  function( nValue )
{
return ( nScale * nValue );
};
}


function createPropertyAnimation( sAttrName, aAnimatedElement, nWidth, nHeight )
{
if( !aAttributeMap[ sAttrName ] )
{
log( 'createPropertyAnimation: attribute is unknown' );
return null;
}


var aFunctorSet = aAttributeMap[ sAttrName ];

var sGetValueMethod =   aFunctorSet.get;
var sSetValueMethod =   aFunctorSet.set;

if( !sGetValueMethod || !sSetValueMethod  )
{
log( 'createPropertyAnimation: attribute is not handled' );
return null;
}

var aGetModifier =  eval( aFunctorSet.getmod );
var aSetModifier =  eval( aFunctorSet.setmod );


return new GenericAnimation( bind( aAnimatedElement, aAnimatedElement[ sGetValueMethod ] ),
bind( aAnimatedElement, aAnimatedElement[ sSetValueMethod ] ),
aGetModifier,
aSetModifier);
}


function createShapeTransition( aActivityParamSet, aAnimatedElement,
nSlideWidth, nSlideHeight,
aAnimatedTransitionFilterNode )
{
if( !aAnimatedTransitionFilterNode )
{
log( 'createShapeTransition: the animated transition filter node is not valid.' );
return null;
}
var eTransitionType = aAnimatedTransitionFilterNode.getTransitionType();
var eTransitionSubType = aAnimatedTransitionFilterNode.getTransitionSubType();
var bDirectionForward = ! aAnimatedTransitionFilterNode.getReverseDirection();
var bModeIn = ( aAnimatedTransitionFilterNode.getTransitionMode() == FORWARD );

var aTransitionInfo = aTransitionInfoTable[eTransitionType][eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'createShapeTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( eTransitionType, eTransitionSubType );
var aClippingAnimation
= new ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn );
return new SimpleActivity( aActivityParamSet, aClippingAnimation, true );

case TRANSITION_SPECIAL:
switch( eTransitionType )
{
default:
var aAnimation
= createPropertyAnimation( 'opacity',
aAnimatedElement,
nSlideWidth,
nSlideHeight );
return new SimpleActivity( aActivityParamSet, aAnimation, bModeIn );
}
}

}


function ClippingAnimation( aParametricPolyPolygon, aTransitionInfo,
bDirectionForward, bModeIn )
{
this.aClippingFunctor = new ClippingFunctor( aParametricPolyPolygon,
aTransitionInfo,
bDirectionForward, bModeIn );
this.bAnimationStarted = false;
}

ClippingAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement,
'ClippingAnimation.start: animatable element is not valid' );
this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.initClipPath();
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;

};

ClippingAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.aAnimatableElement.cleanClipPath();
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

ClippingAnimation.prototype.perform = function( nValue )
{
var nWidth = this.aAnimatableElement.aClippingBBox.width;
var nHeight = this.aAnimatableElement.aClippingBBox.height;
var aPolyPolygonElement = this.aClippingFunctor.perform( nValue, nWidth, nHeight );
this.aAnimatableElement.setClipPath( aPolyPolygonElement );
};

ClippingAnimation.prototype.getUnderlyingValue = function()
{
return 0.0;
};


function GenericAnimation( aGetValueFunc, aSetValueFunc, aGetModifier, aSetModifier )
{
assert( aGetValueFunc && aSetValueFunc,
'GenericAnimation constructor: get value functor and/or set value functor are not valid' );

this.aGetValueFunc = aGetValueFunc;
this.aSetValueFunc = aSetValueFunc;
this.aGetModifier = aGetModifier;
this.aSetModifier = aSetModifier;
this.aAnimatableElement = null;
this.bAnimationStarted = false;
}


GenericAnimation.prototype.start = function( aAnimatableElement )
{
assert( aAnimatableElement, 'GenericAnimation.start: animatable element is not valid' );

this.aAnimatableElement = aAnimatableElement;
this.aAnimatableElement.notifyAnimationStart();

if( !this.bAnimationStarted )
this.bAnimationStarted = true;
};

GenericAnimation.prototype.end = function()
{
if( this.bAnimationStarted )
{
this.bAnimationStarted = false;
this.aAnimatableElement.notifyAnimationEnd();
}
};

GenericAnimation.prototype.perform = function( aValue )
{
if( this.aSetModifier )
aValue = this.aSetModifier( aValue );

this.aSetValueFunc( aValue );
};

GenericAnimation.prototype.getUnderlyingValue = function()
{
var aValue = this.aGetValueFunc();
if( this.aGetModifier )
aValue = this.aGetModifier( aValue );
return aValue;
};


function HSLAnimationWrapper( aColorAnimation )
{
assert( aColorAnimation,
'HSLAnimationWrapper constructor: invalid color animation delegate' );

this.aAnimation = aColorAnimation;
}


HSLAnimationWrapper.prototype.start = function( aAnimatableElement )
{
this.aAnimation.start( aAnimatableElement );
};

HSLAnimationWrapper.prototype.end = function()
{
this.aAnimation.end();
};
HSLAnimationWrapper.prototype.perform = function( aHSLValue )
{
this.aAnimation.perform( aHSLValue.convertToRGB() );
};

HSLAnimationWrapper.prototype.getUnderlyingValue = function()
{
return this.aAnimation.getUnderlyingValue().convertToHSL();
};


function SlideChangeBase(aLeavingSlide, aEnteringSlide)
{
this.aLeavingSlide = aLeavingSlide;
this.aEnteringSlide = aEnteringSlide;
this.bIsFinished = false;
}

SlideChangeBase.prototype.start = function()
{
};

SlideChangeBase.prototype.end = function()
{
if( this.bIsFinished )
return;

this.aLeavingSlide.hide();
this.aEnteringSlide.reset();
this.aLeavingSlide.reset();

this.bIsFinished = true;
};

SlideChangeBase.prototype.perform = function( nValue )
{
if( this.bIsFinished ) return false;

if( this.aLeavingSlide )
this.performOut( nValue );

if( this.aEnteringSlide )
this.performIn( nValue );

return true;
};

SlideChangeBase.prototype.getUnderlyingValue = function()
{
return 0.0;
};

SlideChangeBase.prototype.performIn = function( )
{
log( 'SlideChangeBase.performIn: abstract method called' );
};

SlideChangeBase.prototype.performOut = function( )
{
log( 'SlideChangeBase.performOut: abstract method called' );
};


function FadingSlideChange( aLeavingSlide, aEnteringSlide )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.bFirstRun = true;
}
extend( FadingSlideChange, SlideChangeBase );

FadingSlideChange.prototype.start = function()
{
FadingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( nT );
};

FadingSlideChange.prototype.performOut = function( nT )
{

this.aLeavingSlide.setOpacity( 1 - nT );
};


function FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, sFadeColor )
{
FadingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.sFadeColor = sFadeColor;
if( !this.sFadeColor )
{
log( 'FadingOverColorSlideChange: sFadeColor not valid.' );
this.sFadeColor = '#000000';
}
this.aColorPlaneElement = this.createColorPlaneElement();
}
extend( FadingOverColorSlideChange, SlideChangeBase );

FadingOverColorSlideChange.prototype.start = function()
{
FadingOverColorSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.notifyUsedAttribute( 'opacity' );
this.aLeavingSlide.insertBefore( this.aColorPlaneElement );
this.aEnteringSlide.setOpacity( 0.0 );
this.aEnteringSlide.show();
};

FadingOverColorSlideChange.prototype.end = function()
{
FadingOverColorSlideChange.superclass.end.call( this );
this.aLeavingSlide.removeElement( this.aColorPlaneElement );
};

FadingOverColorSlideChange.prototype.performIn = function( nT )
{
this.aEnteringSlide.setOpacity( (nT > 0.55) ? 2.0*(nT-0.55) : 0.0 );
};

FadingOverColorSlideChange.prototype.performOut = function( nT )
{
this.aLeavingSlide.setOpacity( (nT > 0.45) ? 0.0 : 2.0*(0.45-nT) );
};

FadingOverColorSlideChange.prototype.createColorPlaneElement = function()
{
var aColorPlaneElement = document.createElementNS( NSS['svg'], 'rect' );
aColorPlaneElement.setAttribute( 'width', String( this.aLeavingSlide.getWidth() ) );
aColorPlaneElement.setAttribute( 'height', String( this.aLeavingSlide.getHeight() ) );
aColorPlaneElement.setAttribute( 'fill', this.sFadeColor );
return aColorPlaneElement;
};


function MovingSlideChange( aLeavingSlide, aEnteringSlide,
aLeavingDirection, aEnteringDirection )
{
MovingSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );
this.aLeavingDirection = aLeavingDirection;
this.aEnteringDirection = aEnteringDirection;
}
extend( MovingSlideChange, SlideChangeBase );

MovingSlideChange.prototype.start = function()
{
MovingSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'transform' );
this.aLeavingSlide.notifyUsedAttribute( 'transform' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

MovingSlideChange.prototype.performIn = function( nT )
{
var nS = nT - 1;
var dx = nS * this.aEnteringDirection.x * this.aEnteringSlide.getWidth();
var dy = nS * this.aEnteringDirection.y * this.aEnteringSlide.getHeight();
this.aEnteringSlide.translate( dx, dy );
};

MovingSlideChange.prototype.performOut = function( nT )
{
var dx = nT * this.aLeavingDirection.x * this.aLeavingSlide.getWidth();
var dy = nT * this.aLeavingDirection.y * this.aLeavingSlide.getHeight();
this.aLeavingSlide.translate( dx, dy );
};


function ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, bIsDirectionForward )
{
ClippedSlideChange.superclass.constructor.call( this, aLeavingSlide, aEnteringSlide );

var bIsModeIn = true;
this.aClippingFunctor= new ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn );
}
extend( ClippedSlideChange, SlideChangeBase );

ClippedSlideChange.prototype.start = function()
{
ClippedSlideChange.superclass.start.call( this );
this.aEnteringSlide.notifyUsedAttribute( 'clip-path' );
this.performIn( 0 );
this.aEnteringSlide.show();
};

ClippedSlideChange.prototype.performIn = function( nT )
{
var nWidth = this.aEnteringSlide.getWidth();
var nHeight = this.aEnteringSlide.getHeight();
var aPolyPolygonElement = this.aClippingFunctor.perform( nT, nWidth, nHeight );
this.aEnteringSlide.setClipPath( aPolyPolygonElement );
};

ClippedSlideChange.prototype.performOut = function( )
{
};


function ClippingFunctor( aParametricPolyPolygon, aTransitionInfo,
bIsDirectionForward, bIsModeIn)
{
this.aParametricPolyPolygon = aParametricPolyPolygon;
this.aStaticTransformation = null;
this.bForwardParameterSweep = true;
this.bSubtractPolygon = false;
this.bScaleIsotropically = aTransitionInfo.scaleIsotropically;
this.bFlip = false;

assert( this.aParametricPolyPolygon,
'ClippingFunctor: parametric polygon is not valid' );

if( aTransitionInfo.rotationAngle != 0.0 ||
aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
{
this.aStaticTransformation = SVGIdentityMatrix.translate( 0.5, 0.5 );
if( aTransitionInfo.scaleX != 1.0 ||  aTransitionInfo.scaleY != 1.0 )
this.aStaticTransformation
= this.aStaticTransformation.scaleNonUniform( aTransitionInfo.scaleX,
aTransitionInfo.scaleY );
if( aTransitionInfo.rotationAngle != 0.0 )
this.aStaticTransformation
= this.aStaticTransformation.rotate( aTransitionInfo.rotationAngle );
this.aStaticTransformation = this.aStaticTransformation.translate( -0.5, -0.5 );
}
else
{
this.aStaticTransformation = document.documentElement.createSVGMatrix();
}

if( !bIsDirectionForward )
{
var aMatrix = null;
switch( aTransitionInfo.reverseMethod )
{
default:
log( 'ClippingFunctor: unexpected reverse method.' );
break;
case REVERSEMETHOD_IGNORE:
break;
case REVERSEMETHOD_INVERT_SWEEP:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
break;
case REVERSEMETHOD_SUBTRACT_POLYGON:
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_SUBTRACT_AND_INVERT:
this.bForwardParameterSweep = !this.bForwardParameterSweep;
this.bSubtractPolygon = !this.bSubtractPolygon;
break;
case REVERSEMETHOD_ROTATE_180:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.setToRotationAroundPoint( 0.5, 0.5, 180 );
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
break;
case REVERSEMETHOD_FLIP_X:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.a = -1; aMatrix.e = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
case REVERSEMETHOD_FLIP_Y:
aMatrix = document.documentElement.createSVGMatrix();
aMatrix.d = -1; aMatrix.f = 1.0;
this.aStaticTransformation = aMatrix.multiply( this.aStaticTransformation );
this.bFlip = true;
break;
}
}

if( !bIsModeIn )
{
if( aTransitionInfo.outInvertsSweep )
{
this.bForwardParameterSweep = !this.bForwardParameterSweep;
}
else
{
this.bSubtractPolygon = !this.bSubtractPolygon;
}
}
}

ClippingFunctor.aBoundingPath = document.createElementNS( NSS['svg'], 'path' );
ClippingFunctor.aBoundingPath.setAttribute( 'd', 'M -1 -1 L 2 -1 L 2 2 L -1 2 L -1 -1' );

ClippingFunctor.prototype.perform = function( nT, nWidth, nHeight )
{
var aClipPoly = this.aParametricPolyPolygon.perform( this.bForwardParameterSweep ? nT : (1 - nT) );


if( this.bSubtractPolygon )
{
aClipPoly.changeOrientation();
aClipPoly.prependPath( ClippingFunctor.aBoundingPath );
}

var aMatrix;
if( this.bScaleIsotropically )
{
var nScaleFactor = Math.max( nWidth, nHeight );
aMatrix = SVGIdentityMatrix.translate( -( nScaleFactor - nWidth ) / 2.0,
-( nScaleFactor - nHeight ) / 2.0 );
aMatrix = aMatrix.scale( nScaleFactor );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}
else
{
aMatrix = SVGIdentityMatrix.scaleNonUniform( nWidth, nHeight );
aMatrix = aMatrix.multiply( this.aStaticTransformation );
}

aClipPoly.matrixTransform( aMatrix );

return aClipPoly;
};


function createClipPolyPolygon( nType, nSubtype )
{
switch( nType )
{
default:
log( 'createClipPolyPolygon: unknown transition type: ' + nType );
return null;
case BARWIPE_TRANSITION:
return new BarWipePath( 1 );
case FOURBOXWIPE_TRANSITION:
return new FourBoxWipePath( nSubtype === CORNERSOUT_TRANS_SUBTYPE );
case BOXWIPE_TRANSITION:
return new BoxWipePath( nSubtype == LEFTCENTER_TRANS_SUBTYPE ||
nSubtype == TOPCENTER_TRANS_SUBTYPE ||
nSubtype == RIGHTCENTER_TRANS_SUBTYPE ||
nSubtype == BOTTOMCENTER_TRANS_SUBTYPE );
case ELLIPSEWIPE_TRANSITION:
return new EllipseWipePath( nSubtype );
case FANWIPE_TRANSITION:
return new FanWipePath(nSubtype == CENTERTOP_TRANS_SUBTYPE ||
nSubtype == CENTERRIGHT_TRANS_SUBTYPE, true, false);
case PINWHEELWIPE_TRANSITION:
var nBlades;
switch( nSubtype )
{
case ONEBLADE_TRANS_SUBTYPE:
nBlades = 1;
break;
case DEFAULT_TRANS_SUBTYPE:
case TWOBLADEVERTICAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case TWOBLADEHORIZONTAL_TRANS_SUBTYPE:
nBlades = 2;
break;
case THREEBLADE_TRANS_SUBTYPE:
nBlades = 3;
break;
case FOURBLADE_TRANS_SUBTYPE:
nBlades = 4;
break;
case EIGHTBLADE_TRANS_SUBTYPE:
nBlades = 8;
break;
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
return new PinWheelWipePath( nBlades );
case CLOCKWIPE_TRANSITION:
return new ClockWipePath();
case RANDOMBARWIPE_TRANSITION:
return new RandomWipePath( 128, true /* bars */ );
case CHECKERBOARDWIPE_TRANSITION:
return new CheckerBoardWipePath( 10 );
case ZIGZAGWIPE_TRANSITION:
return new ZigZagWipePath( 5 );
case BARNZIGZAGWIPE_TRANSITION:
return new BarnZigZagWipePath( 5 );
case IRISWIPE_TRANSITION:
switch(nSubtype)
{
case RECTANGLE_TRANS_SUBTYPE:
return new IrisWipePath(0);
case DIAMOND_TRANS_SUBTYPE:
return new IrisWipePath(1);
default:
log( 'createClipPolyPolygon: unknown subtype: ' + nSubtype );
return null;
}
case BARNDOORWIPE_TRANSITION:
return new BarnDoorWipePath(false);
case SINGLESWEEPWIPE_TRANSITION:
return new SweepWipePath(
nSubtype == CLOCKWISETOP_TRANS_SUBTYPE ||
nSubtype == CLOCKWISERIGHT_TRANS_SUBTYPE ||
nSubtype == CLOCKWISEBOTTOM_TRANS_SUBTYPE ||
nSubtype == CLOCKWISELEFT_TRANS_SUBTYPE,
true,
false,
nSubtype == COUNTERCLOCKWISEBOTTOMLEFT_TRANS_SUBTYPE ||
nSubtype == COUNTERCLOCKWISETOPRIGHT_TRANS_SUBTYPE );
case WATERFALLWIPE_TRANSITION:
return new WaterfallWipePath(128, // flipOnYAxis
nSubtype == VERTICALRIGHT_TRANS_SUBTYPE ||
nSubtype == HORIZONTALLEFT_TRANS_SUBTYPE);
case MISCDIAGONALWIPE_TRANSITION:
switch(nSubtype) {
case DOUBLEBARNDOOR_TRANS_SUBTYPE:
return new BarnDoorWipePath(true /* Doubled */);
case DOUBLEDIAMOND_TRANS_SUBTYPE:
return new DoubleDiamondWipePath();
default:
log( 'createClipPolyPolygon: unhandled subtype: ' + nSubtype );
return null;
}
case DISSOLVE_TRANSITION:
return new RandomWipePath( 16 * 16, false /* dissolve */ );
case VEEWIPE_TRANSITION:
return new VeeWipePath();
case SNAKEWIPE_TRANSITION:
return new SnakeWipePath( 8 * 8, // diagonal
nSubtype == TOPLEFTDIAGONAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTDIAGONAL_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE   ,
nSubtype == TOPLEFTVERTICAL_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTDIAGONAL_TRANS_SUBTYPE    ||
nSubtype == BOTTOMLEFTDIAGONAL_TRANS_SUBTYPE
);
case PARALLELSNAKESWIPE_TRANSITION:
return new ParallelSnakesWipePath(
8 * 8, // elements
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE,
nSubtype == VERTICALTOPLEFTOPPOSITE_TRANS_SUBTYPE    ||
nSubtype == VERTICALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == HORIZONTALTOPLEFTOPPOSITE_TRANS_SUBTYPE  ||
nSubtype == HORIZONTALTOPRIGHTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALBOTTOMLEFTOPPOSITE_TRANS_SUBTYPE ||
nSubtype == DIAGONALTOPLEFTOPPOSITE_TRANS_SUBTYPE
);

case SPIRALWIPE_TRANSITION:
return new SpiralWipePath(
8 * 8, // elements
nSubtype == TOPLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE     ||
nSubtype == TOPRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE    ||
nSubtype == BOTTOMRIGHTCOUNTERCLOCKWISE_TRANS_SUBTYPE ||
nSubtype == BOTTOMLEFTCOUNTERCLOCKWISE_TRANS_SUBTYPE );

case BOXSNAKESWIPE_TRANSITION:
return new BoxSnakesWipePath(
8 * 8,
nSubtype == FOURBOXVERTICAL_TRANS_SUBTYPE ||
nSubtype == FOURBOXHORIZONTAL_TRANS_SUBTYPE );
}
}


function createUnitSquarePath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 1 0 L 1 1 L 0 1 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function createEmptyPath()
{
var aPath = document.createElementNS( NSS['svg'], 'path' );
var sD = 'M 0 0 L 0 0';
aPath.setAttribute( 'd', sD );
return aPath;
}

function pruneScaleValue( nVal )
{
if( nVal < 0.0 )
return (nVal < -0.00001 ? nVal : -0.00001);
else
return (nVal > 0.00001 ? nVal : 0.00001);
}


function BarWipePath( nBars /* nBars > 1: blinds effect */ )
{
this.nBars = nBars;
if( this.nBars === undefined || this.nBars < 1 )
this.nBars = 1;
this.aBasePath = createUnitSquarePath();
}

BarWipePath.prototype.perform = function( nT )
{

var aMatrix = SVGIdentityMatrix.scaleNonUniform( pruneScaleValue( nT / this.nBars ), 1.0 );

var aPolyPath = this.aBasePath.cloneNode( true );
aPolyPath.matrixTransform( aMatrix );

if( this.nBars > 1 )
{
var i;
var aTransform;
var aPath;
for( i = this.nBars - 1; i > 0; --i )
{
aTransform = SVGIdentityMatrix.translate( i / this.nBars, 0.0 );
aTransform = aTransform.multiply( aMatrix );
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}
}
return aPolyPath;
};


function BoxWipePath(bIsTopCentered) {
this.bIsTopCentered = bIsTopCentered;
this.aBasePath = createUnitSquarePath();
}

BoxWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix;
if(this.bIsTopCentered) {
aTransform = aTransform.translate(-0.5, 0.0).scale(d, d).translate(0.5, 0.0);
}
else {
aTransform = aTransform.scale(d, d);
}
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function SweepWipePath(bCenter, bSingle, bOppositeVertical, bFlipOnYAxis) {
this.bCenter = bCenter;
this.bSingle = bSingle;
this.bOppositeVertical = bOppositeVertical;
this.bFlipOnYAxis = bFlipOnYAxis;
this.aBasePath = createUnitSquarePath();
}

SweepWipePath.prototype.perform = function( nT ) {
nT /= 2.0;
if(!this.bCenter)
nT /= 2.0;
if(!this.bSingle && !this.bOppositeVertical)
nT /= 2.0;

var poly = PinWheelWipePath.calcCenteredClock( nT + 0.25, 1.0 );
var aTransform;

if(this.bCenter) {
aTransform = SVGIdentityMatrix.translate(0.5, 0.0);
poly.matrixTransform(aTransform);
}
var res = poly;

if(!this.bSingle) {
if(this.bOppositeVertical) {
aTransform = SVGIdentityMatrix.scale(1.0, -1.0);
aTransform.translate(0.0, 1.0);
poly.matrixTransform(aTransform);
poly.changeOrientation();
}
else {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
}
res.appendPath(poly);
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function FourBoxWipePath( bCornersOut )
{
this.bCornersOut = bCornersOut;
this.aBasePath = createUnitSquarePath();
}

FourBoxWipePath.prototype.perform = function( nT )
{
var aMatrix;
var d = pruneScaleValue( nT / 2.0 );

if( this.bCornersOut )
{
aMatrix = SVGIdentityMatrix.translate( -0.25, -0.25 ).scale( d ).translate( -0.5, -0.5 );
}
else
{
aMatrix = SVGIdentityMatrix.translate( -0.5, -0.5 ).scale( d );
}


var aTransform = aMatrix;
var aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
var aPolyPath = aSquare;
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipX();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aPolyPath.appendPath( aSquare );
aMatrix = SVGIdentityMatrix.flipY();
aTransform = aMatrix.multiply( aTransform );
aSquare = this.aBasePath.cloneNode( true );
aSquare.matrixTransform( aTransform );
aSquare.changeOrientation();
aPolyPath.appendPath( aSquare );

aMatrix = SVGIdentityMatrix.translate( 0.5, 0.5 );
aMatrix = aMatrix.scale( 1.1 );
aPolyPath.matrixTransform( aMatrix );

return aPolyPath;
};


function EllipseWipePath( eSubtype )
{
this.eSubtype = eSubtype;

var sPathData = 'M 0.5 -0.207107 ' +
'C 0.687536 -0.207107 0.867392 -0.132608 1 0 ' +
'C 1.13261 0.132608 1.20711 0.312464 1.20711 0.5 ' +
'C 1.20711 0.687536 1.13261 0.867392 1 1 ' +
'C 0.867392 1.13261 0.687536 1.20711 0.5 1.20711 ' +
'C 0.312464 1.20711 0.132608 1.13261 0 1 ' +
'C -0.132608 0.867392 -0.207107 0.687536 -0.207107 0.5 ' +
'C -0.207107 0.312464 -0.132608 0.132608 0 0 ' +
'C 0.132608 -0.132608 0.312464 -0.207107 0.5 -0.207107';

this.aBasePath = document.createElementNS( NSS['svg'], 'path' );
this.aBasePath.setAttribute( 'd', sPathData );
}

EllipseWipePath.prototype.perform = function( nT )
{

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( nT ).translate( -0.5, -0.5 );
var aEllipse = this.aBasePath.cloneNode( true );
aEllipse.matrixTransform( aTransform );

return aEllipse;
};

function FanWipePath(bIsCenter, bIsSingle, bIsFanIn) {
this.bCenter = bIsCenter;
this.bSingle = bIsSingle;
this.bFanIn  = bIsFanIn;
this.aBasePath = createUnitSquarePath();
}

FanWipePath.prototype.perform = function( nT ) {
var res = this.aBasePath.cloneNode(true);
var poly = PinWheelWipePath.calcCenteredClock(
nT / ((this.bCenter && this.bSingle) ? 2.0 : 4.0), 1.0);
res.appendPath(poly);
var aTransform = SVGIdentityMatrix.flipY();
aTransform = aTransform.scaleNonUniform(-1.0, 1.0);
poly.matrixTransform(aTransform);
res.appendPath(poly);

if(this.bCenter) {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
res.matrixTransform(aTransform);

if(!this.bSingle)
res.appendPath(flipOnXAxis(res));
}
else {
aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 1.0).translate(0.5, 1.0);
res.matrixTransform(aTransform);
}
return res;
}

function ClockWipePath() { }

ClockWipePath.prototype.perform = function( nT ) {
const aTransform = SVGIdentityMatrix.scaleNonUniform(0.5, 0.5).translate(0.5, 0.5);
var aPolyPath = PinWheelWipePath.calcCenteredClock(nT, 1.0);
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
}

function PinWheelWipePath( nBlades )
{
this.nBlades = nBlades;
if( !this.nBlades || this.nBlades < 1 )
this.nBlades = 1;
}

PinWheelWipePath.calcCenteredClock = function( nT, nE )
{
var nMAX_EDGE = 2;

var aTransform = SVGIdentityMatrix.rotate( nT * 360 );

var aPoint = document.documentElement.createSVGPoint();
aPoint.y = -nMAX_EDGE;
aPoint = aPoint.matrixTransform( aTransform );

var sPathData = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
if( nT >= 0.875 )
sPathData += 'L ' + '-' + nE + ' -' + nE + ' ';
if( nT >= 0.625 )
sPathData += 'L ' + '-' + nE + ' ' + nE + ' ';
if( nT >= 0.375 )
sPathData += 'L ' + nE + ' ' + nE + ' ';
if( nT >= 0.125 )
sPathData += 'L ' + nE + ' -' + nE + ' ';

sPathData += 'L 0 -' + nE + ' ';
sPathData += 'L 0 0 ';
sPathData += 'L '  + aPoint.x + ' ' + aPoint.y;

var aPath = document.createElementNS( NSS['svg'], 'path' );
aPath.setAttribute( 'd', sPathData );
return aPath;
};

PinWheelWipePath.prototype.perform = function( nT )
{
var aBasePath = PinWheelWipePath.calcCenteredClock( nT / this.nBlades,
2.0 /* max edge when rotating */  );

var aPolyPath = aBasePath.cloneNode( true );
var aPath;
var aRotation;
var i;
for( i = this.nBlades - 1; i > 0; --i )
{
aRotation = SVGIdentityMatrix.rotate( (i * 360) / this.nBlades );
aPath = aBasePath.cloneNode( true );
aPath.matrixTransform( aRotation );
aPolyPath.appendPath( aPath );
}

var aTransform = SVGIdentityMatrix.translate( 0.5, 0.5 ).scale( 0.5 );
aPolyPath.matrixTransform( aTransform );

return aPolyPath;
};

function BarnDoorWipePath(doubled) {
this.aBasePath = createUnitSquarePath();
this.doubled   = doubled;
}

BarnDoorWipePath.prototype.perform = function( nT ) {
if(this.doubled)
nT /= 2.0;
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.scaleNonUniform(pruneScaleValue(nT), 1.0).translate(0.5, 0.5);
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
var res = aPath;

if(this.doubled) {
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI / 2).translate(0.5, 0.5);
aPath.matrixTransform(aTransform);
res.appendPath(aPath);
}
return res;
}

function WaterfallWipePath(nElements, bFlipOnYAxis) {
this.bFlipOnYAxis = bFlipOnYAxis;

var sqrtElements = Math.floor(Math.sqrt(nElements));
var elementEdge = 1.0/sqrtElements;

var aPath = 'M '+ 0.0 + ' ' + -1.0 + ' ';
for(var pos = sqrtElements; pos--; ) {
var xPos = sqrtElements - pos - 1;
var yPos = pruneScaleValue( ((pos+1) * elementEdge) - 1.0);

aPath += 'L ' + pruneScaleValue(xPos * elementEdge) + ' ' + yPos + ' ';
aPath += 'L ' + pruneScaleValue((xPos+1)*elementEdge) + ' ' + yPos + ' ';
}
aPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';
this.aBasePath = document.createElementNS( NSS['svg'], 'path');
this.aBasePath.setAttribute('d', aPath);
}

WaterfallWipePath.prototype.perform = function( nT ) {
var poly = this.aBasePath.cloneNode(true);
var aTransform = SVGIdentityMatrix.translate(0.0, pruneScaleValue(2.0 * nT));
poly.matrixTransform(aTransform);
var aHead = 'M ' + 0.0 + ' ' + -1.0 + ' ';
var aHeadPath= document.createElementNS( NSS['svg'], 'path');
aHeadPath.setAttribute('d', aHead);

var aTail = 'M ' + 1.0 + ' ' + -1.0 + ' ';
var aTailPath = document.createElementNS( NSS['svg'], 'path');
aTailPath.setAttribute('d', aTail);

poly.prependPath(aHeadPath);
poly.appendPath(aTailPath);

return this.bFlipOnYAxis ? flipOnYAxis(poly) : poly;
}

function DoubleDiamondWipePath() { }

DoubleDiamondWipePath.prototype.perform = function( nT ) {
var a = pruneScaleValue(0.25 + (nT * 0.75));
var aPath = 'M ' + (0.5 + a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - a) + ' ';
aPath += 'L ' + (0.5 - a) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + a) + ' ';
aPath += 'L ' + (0.5 + a) + ' ' + 0.5 + ' ';
var poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
var res = poly.cloneNode(true);

var b = pruneScaleValue( (1.0 - nT) * 0.25);
aPath = 'M ' + (0.5 + b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 + b) + ' ';
aPath += 'L ' + (0.5 - b) + ' ' + 0.5 + ' ';
aPath += 'L ' + 0.5 + ' ' + (0.5 - b) + ' ';
aPath += 'L ' + (0.5 + b) + ' ' + 0.5 + ' ';
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);

return res;
}

function IrisWipePath(unitRect) {
this.unitRect = unitRect;
this.aBasePath = createUnitSquarePath();
}


IrisWipePath.prototype.perform = function( nT ) {
var d = pruneScaleValue(nT);
var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.multiply(SVGIdentityMatrix.scaleNonUniform(d, d).translate(0.5, 0.5));
var aPath = this.aBasePath.cloneNode(true);
aPath.matrixTransform(aTransform);
return aPath;
}

function ZigZagWipePath(nZigs) {
this.zigEdge = 1.0/nZigs;
const d = this.zigEdge;
const d2 = (d / 2.0);
this.aBasePath = 'M ' + (-1.0 - d) + ' ' + -d + ' ';
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + (1.0 + d) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (1.0 + d) + ' ';

for(var pos = (nZigs + 2); pos--; ) {
this.aBasePath += 'L ' + 0.0 + ' ' + ((pos - 1) * d + d2) + ' ';
this.aBasePath += 'L ' + -d + ' ' + (pos - 1) * d + ' ';
}
this.aBasePath += 'L ' + (-1.0 - d) + ' ' + -d + ' ';
}

ZigZagWipePath.prototype.perform = function( nT ) {
var res = document.createElementNS( NSS['svg'], 'path');
res.setAttribute('d', this.aBasePath);
res.matrixTransform(SVGIdentityMatrix.translate((1.0 + this.zigEdge) * nT, 0.0));
return res;
}

function BarnZigZagWipePath( nZigs ) { ZigZagWipePath.call(this, nZigs); }

BarnZigZagWipePath.prototype = Object.create(ZigZagWipePath);

BarnZigZagWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath();
var poly = document.createElementNS( NSS['svg'], 'path');
var aTransform = SVGIdentityMatrix.translate(
((1.0 + this.zigEdge) * (1.0 - nT)) / 2.0, 0.0);
poly.setAttribute('d', this.aBasePath);
poly.changeOrientation();
poly.matrixTransform(aTransform);
res.appendPath(poly);

aTransform = SVGIdentityMatrix.scale(-1.0, 1.0);
aTransform.translate(1.0, this.zigEdge / 2.0);
poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', this.aBasePath);
poly.matrixTransform(aTransform);
res.appendPath(poly);

return res;
}

function CheckerBoardWipePath( unitsPerEdge )
{
this.unitsPerEdge = unitsPerEdge;
if( this.unitsPerEdge === undefined || this.unitsPerEdge < 1 )
this.unitsPerEdge = 10;
this.aBasePath = createUnitSquarePath();
}

CheckerBoardWipePath.prototype.perform = function( nT )
{
var d = pruneScaleValue(1.0 / this.unitsPerEdge);
var aMatrix = SVGIdentityMatrix.scaleNonUniform(pruneScaleValue( d*2.0*nT ),
pruneScaleValue( d ) );

var aPolyPath = null;
var i, j;
var aTransform;
var aPath;
for ( i = this.unitsPerEdge; i--; )
{
aTransform = SVGIdentityMatrix;

if ((i % 2) == 1) // odd line
aTransform = aTransform.translate( -d, 0.0 );

aTransform = aTransform.multiply( aMatrix );

for ( j = (this.unitsPerEdge / 2) + 1; j--;)
{
aPath = this.aBasePath.cloneNode( true );
aPath.matrixTransform( aTransform );
if (aPolyPath == null) aPolyPath = aPath;
else aPolyPath.appendPath( aPath );
aTransform = SVGIdentityMatrix.translate( d*2.0, 0.0 ).multiply( aTransform );
}

aMatrix = SVGIdentityMatrix.translate( 0.0, d ).multiply( aMatrix ); // next line
}

return aPolyPath;
};


function RandomWipePath( nElements, bRandomBars )
{
this.nElements = nElements;
this.aBasePath = createUnitSquarePath();
this.aPositionArray = new Array( nElements );
this.aClipPath = createEmptyPath();
this.nAlreadyAppendedElements = 0;

var fEdgeLength, nPos, aTransform;

if( bRandomBars ) // random bar wipe
{
fEdgeLength = 1.0 / nElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = { x: 0.0, y: pruneScaleValue( nPos * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scaleNonUniform( 1.0, pruneScaleValue( fEdgeLength ) );
}
else // dissolve wipe
{
var nSqrtElements = Math.round( Math.sqrt( nElements ) );
fEdgeLength = 1.0 / nSqrtElements;
for( nPos = 0; nPos < nElements; ++nPos )
{
this.aPositionArray[nPos] = {
x: pruneScaleValue( ( nPos % nSqrtElements ) * fEdgeLength ),
y: pruneScaleValue( ( nPos / nSqrtElements ) * fEdgeLength ) }
}
aTransform = SVGIdentityMatrix.scale( pruneScaleValue( fEdgeLength ) );
}
this.aBasePath.matrixTransform( aTransform );

var nPos1, nPos2;
var tmp;
for( nPos1 = nElements - 1; nPos1 > 0; --nPos1 )
{
nPos2 = getRandomInt( nPos1 + 1 );
tmp = this.aPositionArray[nPos1];
this.aPositionArray[nPos1] = this.aPositionArray[nPos2];
this.aPositionArray[nPos2] = tmp;
}
}

RandomWipePath.prototype.perform = function( nT )
{
var aPolyPath = createEmptyPath();
var aPoint;
var aPath;
var aTransform;
var nElements = Math.round( nT * this.nElements );
if( nElements === 0 )
{
return aPolyPath;
}
if( this.nAlreadyAppendedElements >= nElements )
{
this.nAlreadyAppendedElements = 0;
this.aClipPath = createEmptyPath();
}
var nPos;
for( nPos = this.nAlreadyAppendedElements; nPos < nElements; ++nPos )
{
aPoint = this.aPositionArray[nPos];
aPath = this.aBasePath.cloneNode( true );
aTransform = SVGIdentityMatrix.translate( aPoint.x, aPoint.y );
aPath.matrixTransform( aTransform );
aPolyPath.appendPath( aPath );
}

this.nAlreadyAppendedElements = nElements;
this.aClipPath.appendPath( aPolyPath );

return this.aClipPath.cloneNode( true );
};

function SnakeWipePath(nElements, bDiagonal, bflipOnYAxis)
{
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.elementEdge  = (1.0 / this.sqrtElements);
this.diagonal     = bDiagonal;
this.flipOnYAxis  = bflipOnYAxis;
this.aBasePath    = createUnitSquarePath();
}

SnakeWipePath.prototype.calcSnake = function(t)
{
var aPolyPath = createEmptyPath();
const area   = (t * this.sqrtElements * this.sqrtElements);
const line_  = Math.floor(area) / this.sqrtElements;
const line   = pruneScaleValue(line_ / this.sqrtElements);
const col    = pruneScaleValue((area - (line_ * this.sqrtElements)) / this.sqrtElements);

if(line != 0) {
let aPath = 'M '+ 0.0 + ' ' + 0.0 + ' ';
aPath += 'L ' + 0.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + line + ' ';
aPath += 'L ' + 1.0 + ' ' + 0.0 + ' ';
aPath += 'L 0 0 ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}
if(col != 0) {
var offset = 0.0;
if((line_ & 1) == 1) {
offset = (1.0 - col);
}
let aPath = 'M ' + offset + ' ' + line + ' ';
aPath += 'L '+ offset + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + (line + this.elementEdge) + ' ';
aPath += 'L ' + (offset+col) + ' ' + line + ' ';
aPath += 'L ' + offset + ' ' + line + ' ';
let poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
aPolyPath.appendPath(poly);
}

return aPolyPath;
}

SnakeWipePath.prototype.calcHalfDiagonalSnake = function(nT, bIn) {
var res = createEmptyPath();

if(bIn) {
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(sqrtArea2 / this.sqrtElements);

var aPath, aPoint = document.documentElement.createSVGPoint();
if(edge) {
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = (nT * Math.SQRT1_2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.rotate((Math.PI)/2 + (Math.PI)/4);
aTransform.translate(edge + this.elementEdge, 0.0);
}
else {
aTransform = SVGIdentityMatrix.translate(-a, 0.0);
aTransform.rotate(-(Math.PI/4));
aTransform.translate(0.0, edge);
}

poly.matrixTransform(aTransform);
res.appendPath(poly);
}
else { //out
const sqrtArea2 = Math.sqrt(nT * this.sqrtElements * this.sqrtElements);
const edge = pruneScaleValue(Math.floor(sqrtArea2)/this.sqrtElements);

let aPath, aPoint = document.documentElement.createSVGPoint();
if(edge != 0) {
aPoint.y = 1.0;
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 1.0;
aPoint.y = edge;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
res.appendPath(poly);
}
const a = (Math.SQRT1_2 / this.sqrtElements);
const d = (sqrtArea2 - Math.floor(sqrtArea2));
const len = ((1.0 - nT) * Math.SQRT2 * d);
const height = pruneScaleValue(Math.SQRT1_2 / this.sqrtElements);
aPath = 'M ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = height;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = len + a;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.y = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
aPoint.x = 0.0;
aPath += 'L ' + aPoint.x + ' ' + aPoint.y + ' ';
const poly = document.createElementNS( NSS['svg'], 'path');
poly.setAttribute('d', aPath);
let aTransform;

if((Math.floor(sqrtArea2) & 1) == 1) {
aTransform = SVGIdentityMatrix.translate(0.0, -height);
aTransform.rotate(Math.PI/2 + Math.PI/4);
aTransform.translate(1.0, edge);
}
else {
aTransform = SVGIdentityMatrix.rotate(-(Math.PI/4));
aTransform = aTransform.translate(edge, 1.0);
}
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
return res;
}

SnakeWipePath.prototype.perform = function(nT) {
var res = createEmptyPath();
if(this.diagonal) {
if(nT >= 0.5) {
res.appendPath(this.calcHalfDiagonalSnake(1.0, true));
res.appendPath(this.calcHalfDiagonalSnake(2.0*(nT-0.5), false));
}
else
res.appendPath(this.calcHalfDiagonalSnake(2.0*nT, true));
}
else
res = this.calcSnake(nT);

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function ParallelSnakesWipePath(nElements, bDiagonal, bFlipOnYAxis, bOpposite) {
SnakeWipePath.call(this, nElements, bDiagonal, bFlipOnYAxis);
this.bOpposite = bOpposite;
}

ParallelSnakesWipePath.prototype = Object.create(SnakeWipePath);

ParallelSnakesWipePath.prototype.perform = function( nT ) {
var res = createEmptyPath(), half, aTransform;
if(this.diagonal) {
assert(this.bOpposite);
half = SnakeWipePath.prototype.calcHalfDiagonalSnake.call(this, nT, false);
aTransform = SVGIdentityMatrix.scale(1, -1);
aTransform.translate(-0.5, 0.5);
aTransform.rotate(Math.PI/2);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
half.changeOrientation();
res.appendPath(half);

aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform.rotate(Math.PI);
aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(half);
}
else {
half = SnakeWipePath.prototype.calcSnake.call(this, nT / 2.0 );
aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
aTransform = aTransform.rotate(Math.PI/2);
aTransform = aTransform.translate(0.5, 0.5);
half.matrixTransform(aTransform);
res.appendPath(flipOnYAxis(half));
res.appendPath(this.bOpposite ? flipOnXAxis(half) : half);
}

return this.flipOnYAxis ? flipOnYAxis(res) : res;
}

function SpiralWipePath(nElements, bFlipOnYAxis) {
this.nElements    = nElements;
this.sqrtElements = Math.floor(Math.sqrt(nElements));
this.bFlipOnYAxis = bFlipOnYAxis;
}

SpiralWipePath.prototype.calcNegSpiral = function( nT ) {
var area  = nT * this.nElements;
var e     = (Math.sqrt(area) / 2.0);
var edge  = Math.floor(e) * 2;

var aTransform = SVGIdentityMatrix.translate(-0.5, -0.5);
var edge_ = pruneScaleValue(edge / this.sqrtElements);

aTransform = aTransform.scale(edge_, edge_);
aTransform = aTransform.translate(0.5, 0.5);
var poly = createUnitSquarePath();
poly.matrixTransform(aTransform);
var res = poly.cloneNode(true);

if(1.0 - nT != 0) {
var edge1 = edge + 1;
var len   = Math.floor( (e - edge/2) * edge1 * 4);
var w     = Math.PI / 2;

while(len > 0) {
var alen = Math.min(len, edge1);
len -= alen;
poly = createUnitSquarePath();
aTransform = SVGIdentityMatrix.scale(
pruneScaleValue( alen / this.sqrtElements ),
pruneScaleValue( 1.0 / this.sqrtElements ));
aTransform = aTransform.translate(
- pruneScaleValue( (edge / 2) / this.sqrtElements ),
pruneScaleValue( (edge / 2) / this.sqrtElements ));
aTransform = aTransform.rotate( w );
w -= Math.PI / 2;
aTransform = aTransform.translate(0.5, 0.5);
poly.matrixTransform(aTransform);
res.appendPath(poly);
}
}

return res;
}

SpiralWipePath.prototype.perform = function( nT ) {
var res         = createUnitSquarePath();
var innerSpiral = this.calcNegSpiral( 1.0 - nT );
innerSpiral.changeOrientation();
res.appendPath(innerSpiral);

return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function BoxSnakesWipePath(nElements, bFourBox) {
SpiralWipePath.call(this, nElements);
this.bFourBox = bFourBox;
}

BoxSnakesWipePath.prototype = Object.create(SpiralWipePath);

BoxSnakesWipePath.prototype.perform = function( nT ) {
var res = createUnitSquarePath(), aTransform;
var innerSpiral = SpiralWipePath.prototype.calcNegSpiral.call(this, 1.0 - nT);
innerSpiral.changeOrientation();

if(this.bFourBox) {
aTransform = SVGIdentityMatrix.scale(0.5, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
innerSpiral = flipOnYAxis(innerSpiral);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
else {
aTransform = SVGIdentityMatrix.scale(1.0, 0.5);
innerSpiral.matrixTransform(aTransform);
res.appendPath(innerSpiral);
res.appendPath(flipOnXAxis(innerSpiral));
}
return this.bFlipOnYAxis ? flipOnYAxis(res) : res;
}

function VeeWipePath() { }

VeeWipePath.prototype.perform = function( nT ) {
const d = pruneScaleValue(2.0 * nT);
var polyPath = 'M ' + 0.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 0.5 + ' ' + d + ' ';
polyPath += 'L ' + 1.0 + ' ' + (d - 1.0) + ' ';
polyPath += 'L ' + 1.0 + ' ' + -1.0 + ' ';
polyPath += 'L ' + 0.0 + ' ' + -1.0 + ' ';

var aPolyPolyPath = document.createElementNS( NSS['svg'], 'path');
aPolyPolyPath.setAttribute('d', polyPath);
return aPolyPolyPath;
}


function AnimatedSlide( aMetaSlide )
{
if( !aMetaSlide )
{
log( 'AnimatedSlide constructor: meta slide is not valid' );
}

this.aMetaSlide = aMetaSlide;
this.aSlideElement = this.aMetaSlide.slideElement;
this.sSlideId = this.aMetaSlide.slideId;

this.aUsedAttributeSet = [];

this.aClipPathElement = null;
this.aClipPathContent = null;
this.bIsClipped = false;
}

AnimatedSlide.prototype.show = function()
{
this.aMetaSlide.show();
};

AnimatedSlide.prototype.hide = function()
{
this.aMetaSlide.hide();
};

AnimatedSlide.prototype.notifyUsedAttribute = function( sName )
{
if( sName == 'clip-path' )
{
this.initClipPath();
this.bIsClipped = true;
}
else
{
this.aUsedAttributeSet.push( sName );
}
};

AnimatedSlide.prototype.reset = function()
{
if( this.bIsClipped )
{
this.cleanClipPath();
this.bIsClipped = false;
}

var i;
for( i = 0; i < this.aUsedAttributeSet.length; ++i )
{
var sAttrName = this.aUsedAttributeSet[i];
this.aSlideElement.removeAttribute( sAttrName );
}
this.aUsedAttributeSet = [];
};

AnimatedSlide.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sSlideId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
var sPathData = 'M 0 0 h ' + WIDTH + ' v ' + HEIGHT + ' h -' + WIDTH + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aSlideElement.parentNode.setAttribute( 'clip-path', sRef );
};

AnimatedSlide.prototype.cleanClipPath = function()
{
this.aSlideElement.parentNode.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedSlide.prototype.insertBefore = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.insertBefore( aElement, this.aSlideElement );
}
};

AnimatedSlide.prototype.appendElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.appendChild( aElement );
}
};

AnimatedSlide.prototype.removeElement = function( aElement )
{
if( aElement )
{
this.aSlideElement.parentNode.removeChild( aElement );
}
};

AnimatedSlide.prototype.getWidth = function()
{
return WIDTH;
};

AnimatedSlide.prototype.getHeight = function()
{
return HEIGHT;
};

AnimatedSlide.prototype.setOpacity = function( nValue )
{
this.aSlideElement.setAttribute( 'opacity', nValue );
};

AnimatedSlide.prototype.translate = function( nDx, nDy )
{
var sTransformAttr = 'translate(' + nDx + ',' + nDy + ')';
this.aSlideElement.setAttribute( 'transform', sTransformAttr );
};

AnimatedSlide.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


function AnimatedElement( aElement )
{
if( !aElement )
{
log( 'AnimatedElement constructor: element is not valid' );
}

this.aSlideShowContext = null;

this.aBaseElement = aElement.cloneNode( true );
this.aActiveElement = aElement;
this.sElementId = this.aActiveElement.getAttribute( 'id' );

this.aBaseBBox = this.aActiveElement.getBBox();
this.nBaseCenterX = this.aBaseBBox.x + this.aBaseBBox.width / 2;
this.nBaseCenterY = this.aBaseBBox.y + this.aBaseBBox.height / 2;


this.aClipPathElement = null;
this.aClipPathContent = null;

this.aPreviousElement = null;
this.aStateSet = {};

this.eAdditiveMode = ADDITIVE_MODE_REPLACE;
this.bIsUpdated = true;

this.aTMatrix = document.documentElement.createSVGMatrix();
this.aCTM = document.documentElement.createSVGMatrix();
this.aICTM = document.documentElement.createSVGMatrix();

this.initElement();
}

AnimatedElement.prototype.initElement = function()
{
this.nCenterX = this.nBaseCenterX;
this.nCenterY = this.nBaseCenterY;
this.nScaleFactorX = 1.0;
this.nScaleFactorY = 1.0;
this.nRotationAngle = 0.0;

this.aActiveElement.setAttribute( 'transform', makeMatrixString( 1, 0, 0, 1, 0, 0 ) );
};

AnimatedElement.prototype.initClipPath = function()
{
this.aClipPathElement = document.createElementNS( NSS['svg'], 'clipPath' );

var sId = 'clip-path-' + this.sElementId;
this.aClipPathElement.setAttribute( 'id', sId );
this.aClipPathElement.setAttribute( 'clipPathUnits', 'userSpaceOnUse' );

this.aClipPathContent = document.createElementNS( NSS['svg'], 'path' );
this.aClippingBBox = this.getBBoxWithStroke();
var nWidth = this.aClippingBBox.width;
var nHeight = this.aClippingBBox.height;
var sPathData = 'M ' + this.aClippingBBox.x + ' ' + this.aClippingBBox.y +
' h ' + nWidth + ' v ' + nHeight + ' h -' + nWidth + ' z';
this.aClipPathContent.setAttribute( 'd', sPathData );
this.aClipPathElement.appendChild( this.aClipPathContent );

var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.appendChild( this.aClipPathElement );

var sRef = 'url(#' + sId + ')';
this.aActiveElement.setAttribute( 'clip-path', sRef );
};

AnimatedElement.prototype.cleanClipPath = function()
{
this.aActiveElement.removeAttribute( 'clip-path' );

if( this.aClipPathElement )
{
var aClipPathGroup = theMetaDoc.aClipPathGroup;
aClipPathGroup.removeChild( this.aClipPathElement );
this.aClipPathElement = null;
this.aClipPathContent = null;
}
};

AnimatedElement.prototype.getId = function()
{
return this.aActiveElement.getAttribute( 'id' );
};

AnimatedElement.prototype.getAdditiveMode = function()
{
return this.eAdditiveMode;
};

AnimatedElement.prototype.setAdditiveMode = function( eAdditiveMode )
{
this.eAdditiveMode = eAdditiveMode;
};

AnimatedElement.prototype.setToElement = function( aElement )
{
if( !aElement )
{
log( 'AnimatedElement(' + this.getId() + ').setToElement: element is not valid' );
return false;
}

var aClone = aElement.cloneNode( true );
this.aPreviousElement = this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

return true;
};

AnimatedElement.prototype.notifySlideStart = function( aSlideShowContext )
{
if( !aSlideShowContext )
{
log( 'AnimatedElement.notifySlideStart: slideshow context is not valid' );
}
this.aSlideShowContext = aSlideShowContext;

var aClone = this.aBaseElement.cloneNode( true );
this.aActiveElement.parentNode.replaceChild( aClone, this.aActiveElement );
this.aActiveElement = aClone;

this.initElement();
this.DBG( '.notifySlideStart invoked' );
};

AnimatedElement.prototype.notifySlideEnd = function()
{
};

AnimatedElement.prototype.notifyAnimationStart = function()
{
};

AnimatedElement.prototype.notifyAnimationEnd = function()
{
};

AnimatedElement.prototype.notifyNextEffectStart = function( /*nEffectIndex*/ )
{
};

AnimatedElement.prototype.saveState = function( nAnimationNodeId )
{
ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').saveState(' + nAnimationNodeId +')' );
if( !this.aStateSet[ nAnimationNodeId ] )
{
this.aStateSet[ nAnimationNodeId ] = {};
}
var aState = this.aStateSet[ nAnimationNodeId ];
aState.aElement = this.aActiveElement.cloneNode( true );
aState.nCenterX = this.nCenterX;
aState.nCenterY = this.nCenterY;
aState.nScaleFactorX = this.nScaleFactorX;
aState.nScaleFactorY = this.nScaleFactorY;
aState.nRotationAngle = this.nRotationAngle;

};

AnimatedElement.prototype.restoreState = function( nAnimationNodeId )
{
if( !this.aStateSet[ nAnimationNodeId ] )
{
log( 'AnimatedElement(' + this.getId() + ').restoreState: state '
+nAnimationNodeId  + ' is not valid' );
return false;
}

ANIMDBG.print( 'AnimatedElement(' + this.getId() + ').restoreState(' + nAnimationNodeId +')' );
var aState = this.aStateSet[ nAnimationNodeId ];
var bRet = this.setToElement( aState.aElement );
if( bRet )
{
this.nCenterX = aState.nCenterX;
this.nCenterY = aState.nCenterY;
this.nScaleFactorX = aState.nScaleFactorX;
this.nScaleFactorY = aState.nScaleFactorY;
this.nRotationAngle = aState.nRotationAngle;
}
return bRet;
};

AnimatedElement.prototype.getBaseBBox = function()
{
return this.aBaseBBox;
};

AnimatedElement.prototype.getBaseCenterX = function()
{
return this.nBaseCenterX;
};

AnimatedElement.prototype.getBaseCenterY = function()
{
return this.nBaseCenterY;
};

AnimatedElement.prototype.getBBox = function()
{
return this.aActiveElement.parentNode.getBBox();
};

AnimatedElement.prototype.getBBoxWithStroke = function()
{
var aBBox = this.aActiveElement.parentNode.getBBox();

var aChildrenSet = this.aActiveElement.childNodes;

var sStroke, sStrokeWidth;
var nStrokeWidth = 0;
var i;
for( i = 0; i < aChildrenSet.length; ++i )
{
if( ! aChildrenSet[i].getAttribute  )
continue;

sStroke = aChildrenSet[i].getAttribute( 'stroke' );
if( sStroke && sStroke != 'none' )
{
sStrokeWidth = aChildrenSet[i].getAttribute( 'stroke-width' );
var nSW = parseFloat( sStrokeWidth );
if( nSW > nStrokeWidth )
nStrokeWidth = nSW;
}
}

if( nStrokeWidth == 0 )
{
sStrokeWidth = ROOT_NODE.getAttribute( 'stroke-width' );
nStrokeWidth = parseFloat( sStrokeWidth );
}
if( nStrokeWidth != 0 )
{
nStrokeWidth *= 1.1;
var nHalfStrokeWidth = nStrokeWidth / 2;
var nDoubleStrokeWidth = nStrokeWidth * 2;

var aEBBox = document.documentElement.createSVGRect();
aEBBox.x = aBBox.x - nHalfStrokeWidth;
aEBBox.y = aBBox.y - nHalfStrokeWidth;
aEBBox.width = aBBox.width + nDoubleStrokeWidth;
aEBBox.height = aBBox.height + nDoubleStrokeWidth;
aBBox = aEBBox;
}
return aBBox;
};

AnimatedElement.prototype.setClipPath = function( aClipPathContent )
{
if( this.aClipPathContent )
{
var aTranslation = SVGIdentityMatrix.translate( this.aClippingBBox.x,
this.aClippingBBox.y);
aClipPathContent.matrixTransform( aTranslation );
var sPathData = aClipPathContent.getAttribute( 'd' );
this.aClipPathContent.setAttribute( 'd', sPathData );
}
};


AnimatedElement.prototype.getX = function()
{
return this.nCenterX;
};

AnimatedElement.prototype.getY = function()
{
return this.nCenterY;
};

AnimatedElement.prototype.getWidth = function()
{
return this.nScaleFactorX * this.getBaseBBox().width;
};

AnimatedElement.prototype.getHeight = function()
{
return this.nScaleFactorY * this.getBaseBBox().height;
};

AnimatedElement.prototype.updateTransformAttribute = function()
{
this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
};

AnimatedElement.prototype.setX = function( nNewCenterX )
{
if( nNewCenterX === this.nCenterX ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( nNewCenterX - this.nCenterX, 0 );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterX = nNewCenterX;
};

AnimatedElement.prototype.setY = function( nNewCenterY )
{
if( nNewCenterY === this.nCenterY ) return;

this.aTransformAttrList = this.aActiveElement.transform.baseVal;
this.aTransformAttr = this.aTransformAttrList.getItem( 0 );
this.aTMatrix = this.aTransformAttr.matrix.translate( 0, nNewCenterY - this.nCenterY );
this.aTransformAttr.setMatrix( this.aTMatrix );
this.nCenterY = nNewCenterY;
};

AnimatedElement.prototype.setWidth = function( nNewWidth )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewWidth = ' + nNewWidth );
if( nNewWidth < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewWidth = 0;
}

var nBaseWidth = this.getBaseBBox().width;
var nScaleFactorX = nNewWidth / nBaseWidth;

if( nScaleFactorX < 1e-5 ) nScaleFactorX = 1e-5;
if( nScaleFactorX == this.nScaleFactorX ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorX = nScaleFactorX;
};

AnimatedElement.prototype.setHeight = function( nNewHeight )
{
ANIMDBG.print( 'AnimatedElement.setWidth: nNewHeight = ' + nNewHeight );
if( nNewHeight < 0 )
{
log('AnimatedElement(' + this.getId() + ').setWidth: negative height!');
nNewHeight = 0;
}

var nBaseHeight = this.getBaseBBox().height;
var nScaleFactorY = nNewHeight / nBaseHeight;

if( nScaleFactorY < 1e-5 ) nScaleFactorY = 1e-5;
if( nScaleFactorY == this.nScaleFactorY ) return;

this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(this.nRotationAngle)
.scaleNonUniform( this.nScaleFactorX, nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nScaleFactorY = nScaleFactorY;
};

AnimatedElement.prototype.getOpacity = function()
{
return this.aActiveElement.getAttribute( 'opacity' );
};

AnimatedElement.prototype.setOpacity = function( nValue )
{
this.aActiveElement.setAttribute( 'opacity', nValue );
};

AnimatedElement.prototype.getRotationAngle = function()
{
return this.nRotationAngle;
};

AnimatedElement.prototype.setRotationAngle = function( nNewRotAngle )
{
this.aTMatrix = document.documentElement.createSVGMatrix()
.translate( this.nCenterX, this.nCenterY )
.rotate(nNewRotAngle)
.scaleNonUniform( this.nScaleFactorX, this.nScaleFactorY )
.translate( -this.nBaseCenterX, -this.nBaseCenterY );
this.updateTransformAttribute();

this.nRotationAngle = nNewRotAngle;
};

AnimatedElement.prototype.getVisibility = function()
{

var sVisibilityValue = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityValue || ( sVisibilityValue === 'inherit' ) )
return 'visible'; // TODO: look for parent visibility!
else
return sVisibilityValue;
};

AnimatedElement.prototype.setVisibility = function( sValue )
{
if( sValue == 'visible' )
sValue = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sValue );
};

AnimatedElement.prototype.getStrokeStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setStrokeStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setStrokeStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillStyle = function()
{
return 'solid';
};

AnimatedElement.prototype.setFillStyle = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFillStyle(' + sValue + ')' );
};

AnimatedElement.prototype.getFillColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
break;
}

return colorParser( sFillColorValue );
};

AnimatedElement.prototype.setFillColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sFillColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sFillColorValue = aChildSet[i].getAttribute( 'fill' );
if( sFillColorValue && ( sFillColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'fill', sValue );
}
}
};

AnimatedElement.prototype.getStrokeColor = function()
{
var aChildSet = getElementChildren( this.aActiveElement );
var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
break;
}

return colorParser( sStrokeColorValue );
};

AnimatedElement.prototype.setStrokeColor = function( aRGBValue )
{
assert( aRGBValue instanceof RGBColor,
'AnimatedElement.setFillColor: value argument is not an instance of RGBColor' );

var sValue = aRGBValue.toString( true /* clamped values */ );
var aChildSet = getElementChildren( this.aActiveElement );

var sStrokeColorValue = '';
for( var i = 0; i <  aChildSet.length; ++i )
{
sStrokeColorValue = aChildSet[i].getAttribute( 'stroke' );
if( sStrokeColorValue && ( sStrokeColorValue !== 'none' ) )
{
aChildSet[i].setAttribute( 'stroke', sValue );
}
}
};

AnimatedElement.prototype.getFontColor = function()
{
return new RGBColor( 0, 0, 0 );
};

AnimatedElement.prototype.setFontColor = function( sValue )
{
ANIMDBG.print( 'AnimatedElement.setFontColor(' + sValue + ')' );
};

AnimatedElement.prototype.DBG = function( sMessage, nTime )
{
aAnimatedElementDebugPrinter.print( 'AnimatedElement(' + this.getId() + ')' + sMessage, nTime );
};


function AnimatedTextElement( aElement, aEventMultiplexer )
{
var theDocument = document;

var sTextType = aElement.getAttribute( 'class' );
var bIsListItem = ( sTextType === 'ListItem' );
if( ( sTextType !== 'TextParagraph' ) && !bIsListItem )
{
log( 'AnimatedTextElement: passed element is not a paragraph.' );
return;
}
var aTextShapeElement = aElement.parentNode;
sTextType = aTextShapeElement.getAttribute( 'class' );
if( sTextType !== 'TextShape' )
{
log( 'AnimatedTextElement: element parent is not a text shape.' );
return;
}
var aTextShapeGroup = aTextShapeElement.parentNode;
var aAnimatedElementGroup = getElementByClassName( aTextShapeGroup, 'AnimatedElements' );
if( !aAnimatedElementGroup )
{
aAnimatedElementGroup = theDocument.createElementNS( NSS['svg'], 'g' );
aAnimatedElementGroup.setAttribute( 'class', 'AnimatedElements' );
aTextShapeGroup.appendChild( aAnimatedElementGroup );
}

var aAnimatableElement = theDocument.createElementNS( NSS['svg'], 'g' );
var aTextElement = theDocument.createElementNS( NSS['svg'], 'text' );
var aParagraphElement = aElement.cloneNode( true );

this.aGraphicGroupElement = theDocument.createElementNS( NSS['svg'], 'g' );
this.aGraphicGroupElement.setAttribute( 'class', 'GraphicGroup' );

var aBulletCharClone = null;
var aBulletCharElem = null;
var bIsBulletCharStyle =
( aElement.getAttributeNS( NSS['ooo'], aOOOAttrListItemNumberingType ) === 'bullet-style' );
if( bIsBulletCharStyle )
{
var aBulletCharGroupElem = getElementByClassName( aTextShapeGroup, 'BulletChars' );
if( aBulletCharGroupElem )
{
var aBulletPlaceholderElem = getElementByClassName( aElement, 'BulletPlaceholder' );
if( aBulletPlaceholderElem )
{
var sId = aBulletPlaceholderElem.getAttribute( 'id' );
sId = 'bullet-char(' + sId + ')';
aBulletCharElem = theDocument.getElementById( sId );
if( aBulletCharElem )
{
aBulletCharClone = aBulletCharElem.cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
else
{
log( 'AnimatedTextElement: no bullet placeholder found' );
}
}
else
{
log( 'AnimatedTextElement: no bullet char group found' );
}
}

var aBitmapElemSet = [];
var aBitmapCloneSet = [];
var aBitmapPlaceholderSet = getElementsByClassName( aElement, 'BitmapPlaceholder' );
var i;
if( aBitmapPlaceholderSet )
{
for( i = 0; i < aBitmapPlaceholderSet.length; ++i )
{
sId = aBitmapPlaceholderSet[i].getAttribute( 'id' );
var sBitmapChecksum = sId.substring( 'bitmap-placeholder'.length + 1, sId.length - 1 );
sId = 'embedded-bitmap(' + sBitmapChecksum + ')';
aBitmapElemSet[i] = theDocument.getElementById( sId );
if( aBitmapElemSet[i] )
{
aBitmapCloneSet[i] = aBitmapElemSet[i].cloneNode( true );
}
else
{
log( 'AnimatedTextElement: ' + sId + ' not found.' );
}
}
}


this.sParagraphId = sId = aParagraphElement.getAttribute( 'id' );
aParagraphElement.removeAttribute( 'id' );
aAnimatableElement.setAttribute( 'id', sId +'.a' );
if( aBulletCharClone )
aBulletCharClone.removeAttribute( 'id' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
aBitmapCloneSet[i].removeAttribute( 'id' );
}

var sVisibilityAttr = aElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
aAnimatableElement.setAttribute( 'visibility', sVisibilityAttr );
aParagraphElement.setAttribute( 'visibility', 'inherit' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
if( aBulletCharElem )
aBulletCharElem.setAttribute( 'visibility', 'hidden' );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapElemSet[i] )
aBitmapElemSet[i].setAttribute( 'visibility', 'hidden' );
}


aTextElement.appendChild( aParagraphElement );
aAnimatableElement.appendChild( aTextElement );

if( aBulletCharClone )
this.aGraphicGroupElement.appendChild( aBulletCharClone );
for( i = 0; i < aBitmapCloneSet.length; ++i )
{
if( aBitmapCloneSet[i] )
this.aGraphicGroupElement.appendChild( aBitmapCloneSet[i] );
}
aAnimatableElement.appendChild( this.aGraphicGroupElement );
aAnimatedElementGroup.appendChild( aAnimatableElement );

this.aParentTextElement = aElement.parentNode;
this.aParagraphElement = aElement;
this.aAnimatedElementGroup = aAnimatedElementGroup;
this.nRunningAnimations = 0;

this.aHyperlinkIdSet = [];
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var sHyperlinkId;
for( i = 0; i < aHyperlinkElementSet.length; ++i )
{
sHyperlinkId = aHyperlinkElementSet[i].getAttribute( 'id' );
if( sHyperlinkId )
this.aHyperlinkIdSet.push( sHyperlinkId );
else
log( 'error: AnimatedTextElement constructor: hyperlink element has no id' );
}

AnimatedTextElement.superclass.constructor.call( this, aAnimatableElement, aEventMultiplexer );

}
extend( AnimatedTextElement, AnimatedElement );


AnimatedTextElement.prototype.setToElement = function( aElement )
{
var bRet = AnimatedTextElement.superclass.setToElement.call( this, aElement );
if( bRet )
{
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
}
return ( bRet && this.aGraphicGroupElement );
};

AnimatedTextElement.prototype.notifySlideStart = function( aSlideShowContext )
{
DBGLOG( 'AnimatedTextElement.notifySlideStart' );
AnimatedTextElement.superclass.notifySlideStart.call( this, aSlideShowContext );
this.aGraphicGroupElement = getElementByClassName( this.aActiveElement, 'GraphicGroup' );
this.restoreBaseTextParagraph();
};

AnimatedTextElement.prototype.notifySlideEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifySlideEnd' );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
};

AnimatedTextElement.prototype.restoreBaseTextParagraph = function()
{
var aActiveParagraphElement = this.aActiveElement.firstElementChild.firstElementChild;
if( aActiveParagraphElement )
{
var sVisibilityAttr = this.aActiveElement.getAttribute( 'visibility' );
if( !sVisibilityAttr || ( sVisibilityAttr === 'visible' ) )
sVisibilityAttr = 'inherit';
if( sVisibilityAttr === 'inherit' )
this.aGraphicGroupElement.setAttribute( 'visibility', 'visible' );
else
this.aGraphicGroupElement.setAttribute( 'visibility', 'hidden' );

var aParagraphClone = aActiveParagraphElement.cloneNode( true );
aParagraphClone.setAttribute( 'id', this.sParagraphId );
aParagraphClone.setAttribute( 'visibility', sVisibilityAttr );
this.aParentTextElement.replaceChild( aParagraphClone, this.aParagraphElement );
this.aParagraphElement = aParagraphClone;


var aEventMultiplexer = this.aSlideShowContext.aEventMultiplexer;
var aHyperlinkIdSet = this.aHyperlinkIdSet;
var aHyperlinkElementSet = getElementsByClassName( this.aParagraphElement, 'UrlField' );
var i = 0;
for( ; i < aHyperlinkIdSet.length; ++i )
{
aEventMultiplexer.notifyElementChangedEvent( aHyperlinkIdSet[i], aHyperlinkElementSet[i] );
}
}
this.aActiveElement.setAttribute( 'visibility', 'hidden' );
};

AnimatedTextElement.prototype.notifyAnimationStart = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationStart' );
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
if( !sVisibilityAttr )
sVisibilityAttr = 'inherit';
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
this.aParagraphElement.setAttribute( 'visibility', 'hidden' );
}
++this.nRunningAnimations;
};

AnimatedTextElement.prototype.notifyAnimationEnd = function()
{
DBGLOG( 'AnimatedTextElement.notifyAnimationEnd' );
--this.nRunningAnimations;
if( this.nRunningAnimations === 0 )
{
this.restoreBaseTextParagraph();
}
};

AnimatedTextElement.prototype.saveState = function( nAnimationNodeId )
{
if( this.nRunningAnimations === 0 )
{
var sVisibilityAttr = this.aParagraphElement.getAttribute( 'visibility' );
this.aActiveElement.setAttribute( 'visibility', sVisibilityAttr );
this.aGraphicGroupElement.setAttribute( 'visibility', 'inherit' );
}
AnimatedTextElement.superclass.saveState.call( this, nAnimationNodeId );
};

AnimatedTextElement.prototype.restoreState = function( nAnimationNodeId )
{
var bRet = AnimatedTextElement.superclass.restoreState.call( this, nAnimationNodeId );
if( bRet )
this.restoreBaseTextParagraph();
return bRet;
};


function SlideTransition( aAnimationsRootElement, aSlideId )
{
this.sSlideId = aSlideId;
this.bIsValid = false;
this.eTransitionType = undefined;
this.eTransitionSubType = undefined;
this.bReverseDirection = false;
this.eTransitionMode = TRANSITION_MODE_IN;
this.sFadeColor = null;
this.aDuration = null;
this.nMinFrameCount = undefined;

if( aAnimationsRootElement )
{
if( aAnimationsRootElement.firstElementChild &&
( aAnimationsRootElement.firstElementChild.getAttributeNS( NSS['smil'], 'begin' ) === (this.sSlideId + '.begin') ) )
{
var aTransitionFilterElement = aAnimationsRootElement.firstElementChild.firstElementChild;
if( aTransitionFilterElement && ( aTransitionFilterElement.localName === 'transitionFilter' ) )
{
this.aElement = aTransitionFilterElement;
this.parseElement();
}
aAnimationsRootElement.removeChild( aAnimationsRootElement.firstElementChild );
}
}
}

SlideTransition.prototype.createSlideTransition = function( aLeavingSlide, aEnteringSlide )
{
if( !this.isValid() )
return null;
if( this.eTransitionType == 0 )
return null;

if( !aEnteringSlide )
{
log( 'SlideTransition.createSlideTransition: invalid entering slide.' );
return null;
}

var aTransitionInfo = aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType];
var eTransitionClass = aTransitionInfo['class'];

switch( eTransitionClass )
{
default:
case TRANSITION_INVALID:
log( 'SlideTransition.createSlideTransition: transition class: TRANSITION_INVALID' );
return null;

case TRANSITION_CLIP_POLYPOLYGON:
var aParametricPolyPolygon
= createClipPolyPolygon( this.eTransitionType, this.eTransitionSubType );
return new ClippedSlideChange( aLeavingSlide, aEnteringSlide, aParametricPolyPolygon,
aTransitionInfo, this.isDirectionForward() );

case TRANSITION_SPECIAL:
switch( this.eTransitionType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition class: TRANSITION_SPECIAL, ' +
'unknown transition type: ' + this.eTransitionType );
return null;

case PUSHWIPE_TRANSITION:
{
var bCombined = false;
var aDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: PUSHWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aDirection = { x: -1.0, y: 0.0 };
break;
}
if( bCombined )
return null;
else
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aDirection, aDirection );
}

case SLIDEWIPE_TRANSITION:
{
var aInDirection = null;
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: SLIDEWIPE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case FROMTOP_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: 1.0 };
break;
case FROMBOTTOM_TRANS_SUBTYPE:
aInDirection = { x: 0.0, y: -1.0 };
break;
case FROMLEFT_TRANS_SUBTYPE:
aInDirection = { x: 1.0, y: 0.0 };
break;
case FROMRIGHT_TRANS_SUBTYPE:
aInDirection = { x: -1.0, y: 0.0 };
break;
}
var aNoDirection = { x: 0.0, y: 0.0 };
if( !this.bReverseDirection )
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aNoDirection, aInDirection );
}
else
{
return new MovingSlideChange( aLeavingSlide, aEnteringSlide, aInDirection, aNoDirection );
}
}

case FADE_TRANSITION:
switch( this.eTransitionSubType )
{
default:
log( 'SlideTransition.createSlideTransition: ' +
'transition type: FADE_TRANSITION, ' +
'unknown transition subtype: ' + this.eTransitionSubType );
return null;
case CROSSFADE_TRANS_SUBTYPE:
return new FadingSlideChange( aLeavingSlide, aEnteringSlide );
case FADEOVERCOLOR_TRANS_SUBTYPE:
return new FadingOverColorSlideChange( aLeavingSlide, aEnteringSlide, this.getFadeColor() );
}
}
}
};

SlideTransition.prototype.parseElement = function()
{
this.bIsValid = true;
var aAnimElem = this.aElement;

this.eTransitionType = undefined;
var sTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'type' );
if( sTypeAttr && aTransitionTypeInMap[ sTypeAttr ] )
{
this.eTransitionType = aTransitionTypeInMap[ sTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition type not valid: ' + sTypeAttr );
}

this.eTransitionSubType = undefined;
var sSubTypeAttr = aAnimElem.getAttributeNS( NSS['smil'], 'subtype' );
if( sSubTypeAttr === null )
sSubTypeAttr = 'default';
if( sSubTypeAttr && ( aTransitionSubtypeInMap[ sSubTypeAttr ] !== undefined ) )
{
this.eTransitionSubType = aTransitionSubtypeInMap[ sSubTypeAttr ];
}
else
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition subtype not valid: ' + sSubTypeAttr );
}

if( this.bIsValid && aTransitionInfoTable[this.eTransitionType][this.eTransitionSubType] === undefined )
{
this.bIsValid = false;
log( 'SlideTransition.parseElement: transition not valid: type: ' + sTypeAttr + ' subtype: ' + sSubTypeAttr );
}

this.bReverseDirection = false;
var sDirectionAttr = aAnimElem.getAttributeNS( NSS['smil'], 'direction' );
if( sDirectionAttr == 'reverse' )
this.bReverseDirection = true;

this.sFadeColor = null;
if( this.eTransitionType == FADE_TRANSITION &&
( this.eTransitionSubType == FADEFROMCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADEOVERCOLOR_TRANS_SUBTYPE ||
this.eTransitionSubType == FADETOCOLOR_TRANS_SUBTYPE ) )
{
var sColorAttr = aAnimElem.getAttributeNS( NSS['smil'], 'fadeColor' );
if( sColorAttr )
this.sFadeColor = sColorAttr;
else
this.sFadeColor='#000000';
}


this.aDuration = null;
var sDurAttr = aAnimElem.getAttributeNS( NSS['smil'], 'dur' );
this.aDuration = new Duration( sDurAttr );
if( !this.aDuration.isSet() )
{
this.aDuration = new Duration( null ); // duration == 0.0
}

this.nMinFrameCount = ( this.getDuration().isValue() )
? ( this.getDuration().getValue() * MINIMUM_FRAMES_PER_SECONDS )
: MINIMUM_FRAMES_PER_SECONDS;
if( this.nMinFrameCount < 1.0 )
this.nMinFrameCount = 1;
else if( this.nMinFrameCount > MINIMUM_FRAMES_PER_SECONDS )
this.nMinFrameCount = MINIMUM_FRAMES_PER_SECONDS;

};

SlideTransition.prototype.isValid = function()
{
return this.bIsValid;
};

SlideTransition.prototype.getTransitionType = function()
{
return this.eTransitionType;
};

SlideTransition.prototype.getTransitionSubType = function()
{
return this.eTransitionSubType;
};

SlideTransition.prototype.getTransitionMode = function()
{
return this.eTransitionMode;
};

SlideTransition.prototype.getFadeColor = function()
{
return this.sFadeColor;
};

SlideTransition.prototype.isDirectionForward = function()
{
return !this.bReverseDirection;
};

SlideTransition.prototype.getDuration = function()
{
return this.aDuration;
};

SlideTransition.prototype.getMinFrameCount = function()
{
return this.nMinFrameCount;
};

SlideTransition.prototype.info = function()
{

var sInfo ='slide transition <' + this.sSlideId + '>: ';
sInfo += ';  type: ' + getKeyByValue(aTransitionTypeInMap, this.getTransitionType());

sInfo += ';  subtype: ' + getKeyByValue(aTransitionSubtypeInMap, this.getTransitionSubType());

if( !this.isDirectionForward() )
sInfo += ';  direction: reverse';

sInfo += '; mode: ' + aTransitionModeOutMap[ this.getTransitionMode() ];

if( this.getDuration() )
sInfo += '; duration: ' + this.getDuration().info();

return sInfo;
};


function SlideAnimations( aSlideShowContext )
{
this.aContext = new NodeContext( aSlideShowContext );
this.aAnimationNodeMap = {};
this.aAnimatedElementMap = {};
this.aSourceEventElementMap = {};
this.aNextEffectEventArray = new NextEffectEventArray();
this.aInteractiveAnimationSequenceMap = {};
this.aEventMultiplexer = new EventMultiplexer( aSlideShowContext.aTimerEventQueue );
this.aRootNode = null;
this.bElementsParsed = false;

this.aContext.aAnimationNodeMap = this.aAnimationNodeMap;
this.aContext.aAnimatedElementMap = this.aAnimatedElementMap;
this.aContext.aSourceEventElementMap = this.aSourceEventElementMap;

this.aEventMultiplexer.registerMouseClickHandler( document, 100 );
}


SlideAnimations.prototype.importAnimations = function( aAnimationRootElement )
{
if( !aAnimationRootElement )
return false;

this.aRootNode = createAnimationTree( aAnimationRootElement, this.aContext );

return ( this.aRootNode ? true : false );
};

SlideAnimations.prototype.parseElements = function()
{
if( !this.aRootNode )
return false;

if( !this.aRootNode.parseElement() )
return false;
else
this.bElementsParsed = true;
};

SlideAnimations.prototype.elementsParsed = function()
{
return this.bElementsParsed;
};

SlideAnimations.prototype.isFirstRun = function()
{
return this.aContext.bFirstRun;
};

SlideAnimations.prototype.isAnimated = function()
{
if( !this.bElementsParsed )
return false;

return this.aRootNode.hasPendingAnimation();
};

SlideAnimations.prototype.start = function()
{
if( !this.bElementsParsed )
return false;

this.chargeSourceEvents();
this.chargeInterAnimEvents();

aSlideShow.setSlideEvents( this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aEventMultiplexer );

if( this.aContext.bFirstRun == undefined )
this.aContext.bFirstRun = true;
else if( this.aContext.bFirstRun )
this.aContext.bFirstRun = false;

if( !this.aRootNode.init() )
return false;

return this.aRootNode.resolve();
};

SlideAnimations.prototype.end = function( bLeftEffectsSkipped )
{
if( !this.bElementsParsed )
return; // no animations there

this.aRootNode.deactivate();
this.aRootNode.end();

if( bLeftEffectsSkipped && this.isFirstRun() )
{
this.aContext.bFirstRun = undefined;
}
else if( this.isFirstRun() )
{
this.aContext.bFirstRun = false;
}

};

SlideAnimations.prototype.dispose = function()
{
if( this.aRootNode )
{
this.aRootNode.dispose();
}
};

SlideAnimations.prototype.clearNextEffectEvents = function()
{
ANIMDBG.print( 'SlideAnimations.clearNextEffectEvents: current slide: ' + nCurSlide );
this.aNextEffectEventArray.clear();
this.aContext.bFirstRun = undefined;
};

SlideAnimations.prototype.chargeSourceEvents = function()
{
for( var id in this.aSourceEventElementMap )
{
this.aSourceEventElementMap[id].charge();
}
};

SlideAnimations.prototype.chargeInterAnimEvents = function()
{
for( var id in this.aInteractiveAnimationSequenceMap )
{
this.aInteractiveAnimationSequenceMap[id].chargeEvents();
}
};


function Event()
{
this.nId = Event.getUniqueId();
}


Event.CURR_UNIQUE_ID = 0;

Event.getUniqueId = function()
{
++Event.CURR_UNIQUE_ID;
return Event.CURR_UNIQUE_ID;
};

Event.prototype.getId = function()
{
return this.nId;
};


function DelayEvent( aFunctor, nTimeout )
{
DelayEvent.superclass.constructor.call( this );

this.aFunctor = aFunctor;
this.nTimeout = nTimeout;
this.bWasFired = false;
}
extend( DelayEvent, Event );


DelayEvent.prototype.fire = function()
{
assert( this.isCharged(), 'DelayEvent.fire: assertion isCharged failed' );

this.bWasFired = true;
this.aFunctor();
return true;
};

DelayEvent.prototype.isCharged = function()
{
return !this.bWasFired;
};

DelayEvent.prototype.getActivationTime = function( nCurrentTime )
{
return ( this.nTimeout + nCurrentTime );
};

DelayEvent.prototype.dispose = function()
{
if( this.isCharged() )
this.bWasFired = true;
};

DelayEvent.prototype.charge = function()
{
if( !this.isCharged() )
this.bWasFired = false;
};


function WakeupEvent( aTimer, aActivityQueue )
{
WakeupEvent.superclass.constructor.call( this );

this.aTimer = new ElapsedTime( aTimer );
this.nNextTime = 0.0;
this.aActivity = null;
this.aActivityQueue = aActivityQueue;
}
extend( WakeupEvent, Event );


WakeupEvent.prototype.clone = function()
{
var aWakeupEvent = new WakeupEvent( this.aTimer.getTimeBase(), this.aActivityQueue );
aWakeupEvent.nNextTime = this.nNextTime;
aWakeupEvent.aActivity = this.aActivity;
return aWakeupEvent;
};

WakeupEvent.prototype.dispose = function()
{
this.aActivity = null;
};

WakeupEvent.prototype.fire = function()
{
if( !this.aActivity )
return false;

return this.aActivityQueue.addActivity( this.aActivity );
};

WakeupEvent.prototype.isCharged = function()
{
return true;
};

WakeupEvent.prototype.getActivationTime = function( nCurrentTime )
{
var nElapsedTime = this.aTimer.getElapsedTime();

return Math.max( nCurrentTime, nCurrentTime - nElapsedTime + this.nNextTime );
};

WakeupEvent.prototype.start = function()
{
this.aTimer.reset();
};

WakeupEvent.prototype.setNextTimeout = function( nNextTime )
{
this.nNextTime = nNextTime;
};

WakeupEvent.prototype.setActivity = function( aActivity )
{
this.aActivity = aActivity;
};


function makeEvent( aFunctor )
{
return new DelayEvent( aFunctor, 0.0 );
}


function makeDelay( aFunctor, nTimeout )
{
return new DelayEvent( aFunctor, nTimeout );
}


function registerEvent( nNodeId, aTiming, aEvent, aNodeContext )
{
var aSlideShowContext = aNodeContext.aContext;
var eTimingType = aTiming.getType();

registerEvent.DBG( aTiming );

if( eTimingType == OFFSET_TIMING )
{
aSlideShowContext.aTimerEventQueue.addEvent( aEvent );
}
else if ( aNodeContext.bFirstRun )
{
var aEventMultiplexer = aSlideShowContext.aEventMultiplexer;
if( !aEventMultiplexer )
{
log( 'registerEvent: event multiplexer not initialized' );
return;
}
var aNextEffectEventArray = aSlideShowContext.aNextEffectEventArray;
if( !aNextEffectEventArray )
{
log( 'registerEvent: next effect event array not initialized' );
return;
}
var aInteractiveAnimationSequenceMap =
aSlideShowContext.aInteractiveAnimationSequenceMap;
if( !aInteractiveAnimationSequenceMap )
{
log( 'registerEvent: interactive animation sequence map not initialized' );
return;
}

switch( eTimingType )
{
case EVENT_TIMING:
var eEventType = aTiming.getEventType();
var sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aEventBaseElem = document.getElementById( sEventBaseElemId );
if( !aEventBaseElem )
{
log( 'generateEvent: EVENT_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
var aSourceEventElement = aNodeContext.makeSourceEventElement( sEventBaseElemId, aEventBaseElem );

if( !aInteractiveAnimationSequenceMap[ nNodeId ] )
{
aInteractiveAnimationSequenceMap[ nNodeId ] = new InteractiveAnimationSequence(nNodeId);
}

var bEventRegistered = false;
switch( eEventType )
{
case EVENT_TRIGGER_ON_CLICK:
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aEvent );
aEventMultiplexer.registerRewindedEffectHandler( aSourceEventElement.getId(),
bind2( aSourceEventElement.charge, aSourceEventElement ) );
bEventRegistered = true;
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
if( bEventRegistered )
{
var aStartEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getStartEvent();
var aEndEvent = aInteractiveAnimationSequenceMap[ nNodeId ].getEndEvent();
aEventMultiplexer.registerEvent( eEventType, aSourceEventElement.getId(), aStartEvent );
aEventMultiplexer.registerEvent( EVENT_TRIGGER_END_EVENT, nNodeId, aEndEvent );
aEventMultiplexer.registerRewindedEffectHandler(
nNodeId,
bind2( InteractiveAnimationSequence.prototype.chargeEvents,
aInteractiveAnimationSequenceMap[ nNodeId ] )
);
}
}
else  // no base event element present
{
switch( eEventType )
{
case EVENT_TRIGGER_ON_NEXT_EFFECT:
aNextEffectEventArray.appendEvent( aEvent );
break;
default:
log( 'generateEvent: not handled event type: ' + eEventType );
}
}
break;
case SYNCBASE_TIMING:
eEventType = aTiming.getEventType();
sEventBaseElemId = aTiming.getEventBaseElementId();
if( sEventBaseElemId )
{
var aAnimationNode = aNodeContext.aAnimationNodeMap[ sEventBaseElemId ];
if( !aAnimationNode )
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not found: ' + sEventBaseElemId );
return;
}
aEventMultiplexer.registerEvent( eEventType, aAnimationNode.getId(), aEvent );
}
else
{
log( 'generateEvent: SYNCBASE_TIMING: event base element not specified' );
}
break;
default:
log( 'generateEvent: not handled timing type: ' + eTimingType );
}
}
}

registerEvent.DEBUG = aRegisterEventDebugPrinter.isEnabled();

registerEvent.DBG = function( aTiming, nTime )
{
if( registerEvent.DEBUG )
{
aRegisterEventDebugPrinter.print( 'registerEvent( timing: ' + aTiming.info() + ' )', nTime );
}
};


function SourceEventElement( sId, aElement, aEventMultiplexer )
{
this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;

this.aEventMultiplexer.registerMouseClickHandler( this, 1000 );

this.bClickHandled = false;
this.bIsPointerOver = false;
this.aElement.addEventListener( 'mouseover', bind2( SourceEventElement.prototype.onMouseEnter, this), false );
this.aElement.addEventListener( 'mouseout', bind2( SourceEventElement.prototype.onMouseLeave, this), false );
}

SourceEventElement.prototype.getId = function()
{
return this.sId;
};

SourceEventElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

SourceEventElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

SourceEventElement.prototype.charge = function()
{
this.bClickHandled = false;
this.setPointerCursor();
};

SourceEventElement.prototype.handleClick = function( /*aMouseEvent*/ )
{
if( !this.bIsPointerOver ) return false;

if( this.bClickHandled )
return false;

this.aEventMultiplexer.notifyEvent( EVENT_TRIGGER_ON_CLICK, this.getId() );
aSlideShow.update();
this.bClickHandled = true;
this.setDefaultCursor();
return true;
};

SourceEventElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

SourceEventElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function HyperlinkElement( sId, aEventMultiplexer )
{
var aElement = document.getElementById( sId );
if( !aElement )
{
log( 'error: HyperlinkElement: no element with id: <' + sId + '> found' );
return;
}
if( !aEventMultiplexer )
{
log( 'AnimatedElement constructor: event multiplexer is not valid' );
}

this.sId = sId;
this.aElement = aElement;
this.aEventMultiplexer = aEventMultiplexer;
this.nTargetSlideIndex = undefined;

this.sURL = getNSAttribute( 'xlink', this.aElement, 'href' );
if( this.sURL )
{
if( this.sURL[0] === '#' )
{
if( this.sURL.substr(1, 5) === 'Slide' )
{
var sSlideIndex = this.sURL.split( ' ' )[1];
this.nTargetSlideIndex = parseInt( sSlideIndex ) - 1;
}
}

this.aEventMultiplexer.registerElementChangedHandler( this.sId, bind2( HyperlinkElement.prototype.onElementChanged, this) );
this.aEventMultiplexer.registerMouseClickHandler( this, 1100 );

this.bIsPointerOver = false;
this.mouseEnterHandler = bind2( HyperlinkElement.prototype.onMouseEnter, this);
this.mouseLeaveHandler = bind2( HyperlinkElement.prototype.onMouseLeave, this);
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
else
{
log( 'warning: HyperlinkElement(' + this.sId + '): url is empty' );
}
}

HyperlinkElement.prototype.onElementChanged = function( aElement )
{
if( !aElement )
{
log( 'error: HyperlinkElement: passed element is not valid' );
return;
}

if( this.sURL )
{
this.aElement.removeEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.removeEventListener( 'mouseout', this.mouseLeaveHandler, false );
this.aElement = aElement;
this.aElement.addEventListener( 'mouseover', this.mouseEnterHandler, false );
this.aElement.addEventListener( 'mouseout', this.mouseLeaveHandler, false );
}
};

HyperlinkElement.prototype.onMouseEnter = function()
{
this.bIsPointerOver = true;
this.setPointerCursor();
};

HyperlinkElement.prototype.onMouseLeave = function()
{
this.bIsPointerOver = false;
this.setDefaultCursor();
};

HyperlinkElement.prototype.handleClick = function( )
{
if( !this.bIsPointerOver ) return false;

if( this.nTargetSlideIndex !== undefined )
{
aSlideShow.displaySlide( this.nTargetSlideIndex, true );
}
else
{
var aWindowObject = document.defaultView;
if( aWindowObject )
{
aWindowObject.open( this.sURL, this.sId );
}
else
{
log( 'error: HyperlinkElement.handleClick: invalid window object.' );
}
}

return true;
};

HyperlinkElement.prototype.setPointerCursor = function()
{
if( this.bClickHandled )
return;

this.aElement.setAttribute( 'style', 'cursor: pointer' );
};

HyperlinkElement.prototype.setDefaultCursor = function()
{
this.aElement.setAttribute( 'style', 'cursor: default' );
};


function InteractiveAnimationSequence( nId )
{
this.nId = nId;
this.bIsRunning = false;
this.aStartEvent = null;
this.aEndEvent = null;
}

InteractiveAnimationSequence.prototype.getId = function()
{
return this.nId;
};

InteractiveAnimationSequence.prototype.getStartEvent = function()
{
if( !this.aStartEvent )
{
this.aStartEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.start, this ) );
}
return this.aStartEvent;
};

InteractiveAnimationSequence.prototype.getEndEvent = function()
{
if( !this.aEndEvent )
{
this.aEndEvent =
makeEvent( bind2( InteractiveAnimationSequence.prototype.end, this ) );
}
return this.aEndEvent;
};

InteractiveAnimationSequence.prototype.chargeEvents = function()
{
if( this.aStartEvent )      this.aStartEvent.charge();
if( this.aEndEvent )        this.aEndEvent.charge();
};

InteractiveAnimationSequence.prototype.isRunning = function()
{
return this.bIsRunning;
};

InteractiveAnimationSequence.prototype.start = function()
{
aSlideShow.notifyInteractiveAnimationSequenceStart( this.getId() );
this.bIsRunning = true;
};

InteractiveAnimationSequence.prototype.end = function()
{
aSlideShow.notifyInteractiveAnimationSequenceEnd( this.getId() );
this.bIsRunning = false;
};


function PriorityEntry( aValue, nPriority )
{
this.aValue = aValue;
this.nPriority = nPriority;
}

PriorityEntry.compare = function( aLhsEntry, aRhsEntry )
{
if ( aLhsEntry.nPriority < aRhsEntry.nPriority )
{
return -1;
}
else if (aLhsEntry.nPriority > aRhsEntry.nPriority)
{
return 1;
}
else
{
return 0;
}
};


function EventMultiplexer( aTimerEventQueue )
{
this.nId = EventMultiplexer.getUniqueId();
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMap = {};
this.aSkipEffectEndHandlerSet = [];
this.aMouseClickHandlerSet = new PriorityQueue( PriorityEntry.compare );
this.aSkipEffectEvent = null;
this.aRewindCurrentEffectEvent = null;
this.aRewindLastEffectEvent = null;
this.aSkipInteractiveEffectEventSet = {};
this.aRewindRunningInteractiveEffectEventSet = {};
this.aRewindEndedInteractiveEffectEventSet = {};
this.aRewindedEffectHandlerSet = {};
this.aElementChangedHandlerSet = {};
}

EventMultiplexer.CURR_UNIQUE_ID = 0;

EventMultiplexer.getUniqueId = function()
{
++EventMultiplexer.CURR_UNIQUE_ID;
return EventMultiplexer.CURR_UNIQUE_ID;
};

EventMultiplexer.prototype.getId = function()
{
return this.nId;
};

EventMultiplexer.prototype.hasRegisteredMouseClickHandlers = function()
{
return !this.aMouseClickHandlerSet.isEmpty();
};

EventMultiplexer.prototype.registerMouseClickHandler = function( aHandler, nPriority )
{
var aHandlerEntry = new PriorityEntry( aHandler, nPriority );
this.aMouseClickHandlerSet.push( aHandlerEntry );
};

EventMultiplexer.prototype.notifyMouseClick = function( aMouseEvent )
{
var aMouseClickHandlerSet = this.aMouseClickHandlerSet.clone();
while( !aMouseClickHandlerSet.isEmpty() )
{
var aHandlerEntry = aMouseClickHandlerSet.top();
aMouseClickHandlerSet.pop();
if( aHandlerEntry.aValue.handleClick( aMouseEvent ) )
break;
}
};

EventMultiplexer.prototype.registerEvent = function( eEventType, aNotifierId, aEvent )
{
this.DBG( 'registerEvent', eEventType, aNotifierId );
if( !this.aEventMap[ eEventType ] )
{
this.aEventMap[ eEventType ] = {};
}
if( !this.aEventMap[ eEventType ][ aNotifierId ] )
{
this.aEventMap[ eEventType ][ aNotifierId ] = [];
}
this.aEventMap[ eEventType ][ aNotifierId ].push( aEvent );
};


EventMultiplexer.prototype.notifyEvent = function( eEventType, aNotifierId )
{
this.DBG( 'notifyEvent', eEventType, aNotifierId );
if( this.aEventMap[ eEventType ] )
{
if( this.aEventMap[ eEventType ][ aNotifierId ] )
{
var aEventArray = this.aEventMap[ eEventType ][ aNotifierId ];
var nSize = aEventArray.length;
for( var i = 0; i < nSize; ++i )
{
this.aTimerEventQueue.addEvent( aEventArray[i] );
}
}
}
};

EventMultiplexer.prototype.registerNextEffectEndHandler = function( aHandler )
{
this.aSkipEffectEndHandlerSet.push( aHandler );
};

EventMultiplexer.prototype.notifyNextEffectEndEvent = function()
{
var nSize = this.aSkipEffectEndHandlerSet.length;
for( var i = 0; i < nSize; ++i )
{
(this.aSkipEffectEndHandlerSet[i])();
}
this.aSkipEffectEndHandlerSet = [];
};

EventMultiplexer.prototype.registerSkipEffectEvent = function( aEvent )
{
this.aSkipEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifySkipEffectEvent = function()
{
if( this.aSkipEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aSkipEffectEvent );
this.aSkipEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindCurrentEffectEvent = function( aEvent )
{
this.aRewindCurrentEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindCurrentEffectEvent = function()
{
if( this.aRewindCurrentEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindCurrentEffectEvent );
this.aRewindCurrentEffectEvent = null;
}
};

EventMultiplexer.prototype.registerRewindLastEffectEvent = function( aEvent )
{
this.aRewindLastEffectEvent = aEvent;
};

EventMultiplexer.prototype.notifyRewindLastEffectEvent = function()
{
if( this.aRewindLastEffectEvent )
{
this.aTimerEventQueue.addEvent( this.aRewindLastEffectEvent );
this.aRewindLastEffectEvent = null;
}
};

EventMultiplexer.prototype.registerSkipInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aSkipInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifySkipInteractiveEffectEvent = function( nNotifierId )
{
if( this.aSkipInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aSkipInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindRunningInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindRunningInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindRunningInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindEndedInteractiveEffectEvent = function( nNotifierId, aEvent )
{
this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] = aEvent;
};

EventMultiplexer.prototype.notifyRewindEndedInteractiveEffectEvent = function( nNotifierId )
{
if( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] )
{
this.aTimerEventQueue.addEvent( this.aRewindEndedInteractiveEffectEventSet[ nNotifierId ] );
}
};

EventMultiplexer.prototype.registerRewindedEffectHandler = function( aNotifierId, aHandler )
{
this.aRewindedEffectHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyRewindedEffectEvent = function( aNotifierId )
{
if( this.aRewindedEffectHandlerSet[ aNotifierId ] )
{
(this.aRewindedEffectHandlerSet[ aNotifierId ])();
}
};

EventMultiplexer.prototype.registerElementChangedHandler = function( aNotifierId, aHandler )
{
this.aElementChangedHandlerSet[ aNotifierId ] = aHandler;
};

EventMultiplexer.prototype.notifyElementChangedEvent = function( aNotifierId, aElement )
{
if( this.aElementChangedHandlerSet[ aNotifierId ] )
{
(this.aElementChangedHandlerSet[ aNotifierId ])( aElement );
}
};

EventMultiplexer.DEBUG = aEventMultiplexerDebugPrinter.isEnabled();

EventMultiplexer.prototype.DBG = function( sMethodName, eEventType, aNotifierId, nTime )
{
if( EventMultiplexer.DEBUG )
{
var sInfo = 'EventMultiplexer.' + sMethodName;
sInfo += '( type: ' + aEventTriggerOutMap[ eEventType ];
sInfo += ', notifier: ' + aNotifierId + ' )';
aEventMultiplexerDebugPrinter.print( sInfo, nTime );
}
};


var aInterpolatorHandler = {};

aInterpolatorHandler.getInterpolator = function( eCalcMode, eValueType, eValueSubtype )
{
var bHasSubtype = ( typeof( eValueSubtype ) === typeof( 0 ) );

if( !bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ];
}
else if( bHasSubtype && aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ] )
{
return aInterpolatorHandler.aLerpFunctorMap[ eCalcMode ][ eValueType ][ eValueSubtype ];
}
else
{
log( 'aInterpolatorHandler.getInterpolator: not found any valid interpolator for calc mode '
+ aCalcModeOutMap[eCalcMode]  + ' and value type ' + aValueTypeOutMap[eValueType]  );
return null;
}
};

aInterpolatorHandler.aLerpFunctorMap = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_DISCRETE ] = [];
aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ] = [];


aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ NUMBER_PROPERTY ] =
function ( nFrom, nTo, nT )
{
return ( ( 1.0 - nT )* nFrom + nT * nTo );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ] = [];

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_RGB ] =
function ( nFrom, nTo, nT )
{
return RGBColor.interpolate( nFrom, nTo, nT );
};

aInterpolatorHandler.aLerpFunctorMap[ CALC_MODE_LINEAR ][ COLOR_PROPERTY ][ COLOR_SPACE_HSL ] =
function ( bCCW  )
{
return  function ( nFrom, nTo, nT )
{
return HSLColor.interpolate( nFrom, nTo, nT, bCCW );
};
};


function KeyStopLerp( aValueList )
{
KeyStopLerp.validateInput( aValueList );

this.aKeyStopList = [];
this.nLastIndex = 0;
this.nKeyStopDistance = aValueList[1] - aValueList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

for( var i = 0; i < aValueList.length; ++i )
this.aKeyStopList.push( aValueList[i] );

this.nUpperBoundIndex = this.aKeyStopList.length - 2;
}


KeyStopLerp.validateInput = function( aValueList )
{
var nSize = aValueList.length;
assert( nSize > 1, 'KeyStopLerp.validateInput: key stop vector must have two entries or more' );

for( var i = 1; i < nSize; ++i )
{
if( aValueList[i-1] > aValueList[i] )
log( 'KeyStopLerp.validateInput: time vector is not sorted in ascending order!' );
}
};

KeyStopLerp.prototype.reset = function()
{
KeyStopLerp.validateInput( this.aKeyStopList );
this.nLastIndex = 0;
this.nKeyStopDistance = this.aKeyStopList[1] - this.aKeyStopList[0];
if( this.nKeyStopDistance <= 0 )
this.nKeyStopDistance = 0.001;

};

KeyStopLerp.prototype.lerp = function( nAlpha )
{
if( nAlpha > this.aKeyStopList[ this.nLastIndex + 1 ] )
{
do
{
var nIndex = this.nLastIndex + 1;
this.nLastIndex = clamp( nIndex, 0, this.nUpperBoundIndex );
this.nKeyStopDistance = this.aKeyStopList[ this.nLastIndex + 1 ] - this.aKeyStopList[ this.nLastIndex ];
}
while( ( this.nKeyStopDistance <= 0 ) && ( this.nLastIndex < this.nUpperBoundIndex ) );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) / this.nKeyStopDistance;

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};

KeyStopLerp.prototype.lerp_ported = function( nAlpha )
{
if( ( this.aKeyStopList[ this.nLastIndex ] < nAlpha ) ||
( this.aKeyStopList[ this.nLastIndex + 1 ] >= nAlpha ) )
{
var i = 0;
for( ; i < this.aKeyStopList.length; ++i )
{
if( this.aKeyStopList[i] >= nAlpha )
break;
}
if( this.aKeyStopList[i] > nAlpha )
--i;
var nIndex = i - 1;
this.nLastIndex = clamp( nIndex, 0, this.aKeyStopList.length - 2 );
}

var nRawLerp = ( nAlpha - this.aKeyStopList[ this.nLastIndex ] ) /
( this.aKeyStopList[ this.nLastIndex+1 ] - this.aKeyStopList[ this.nLastIndex ] );

nRawLerp = clamp( nRawLerp, 0.0, 1.0 );

var aResult = {};
aResult.nIndex = this.nLastIndex;
aResult.nLerp = nRawLerp;

return aResult;
};


var aOperatorSetMap = [];

aOperatorSetMap[ NUMBER_PROPERTY ] = {};

aOperatorSetMap[ NUMBER_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].add = function( a, b )
{
return ( a + b );
};

aOperatorSetMap[ NUMBER_PROPERTY ].scale = function( k, v )
{
return ( k * v );
};

aOperatorSetMap[ COLOR_PROPERTY ] = {};

aOperatorSetMap[ COLOR_PROPERTY ].equal = function( a, b )
{
return a.equal( b );
};

aOperatorSetMap[ COLOR_PROPERTY ].add = function( a, b )
{
var c = a.clone();
c.add( b );
return c;
};

aOperatorSetMap[ COLOR_PROPERTY ].scale = function( k, v )
{
var r = v.clone();
r.scale( k );
return r;
};

aOperatorSetMap[ ENUM_PROPERTY ] = {};

aOperatorSetMap[ ENUM_PROPERTY ].equal = function( a, b )
{
return ( a === b );
};

aOperatorSetMap[ ENUM_PROPERTY ].add = function( a )
{
return a;
};

aOperatorSetMap[ ENUM_PROPERTY ].scale = function( k, v )
{
return v;
};

aOperatorSetMap[ STRING_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];

aOperatorSetMap[ BOOL_PROPERTY ] = aOperatorSetMap[ ENUM_PROPERTY ];


function ActivityParamSet()
{
this.aEndEvent = null;
this.aWakeupEvent = null;
this.aTimerEventQueue = null;
this.aActivityQueue = null;
this.nMinDuration = undefined;
this.nMinNumberOfFrames = MINIMUM_FRAMES_PER_SECONDS;
this.bAutoReverse = false;
this.nRepeatCount = 1.0;
this.nAccelerationFraction = 0.0;
this.nDecelerationFraction = 0.0;
this.nSlideWidth = undefined;
this.nSlideHeight = undefined;
this.aFormula = null;
this.aDiscreteTimes = [];
}


function AnimationActivity()
{
this.nId = AnimationActivity.getUniqueId();
}


AnimationActivity.CURR_UNIQUE_ID = 0;

AnimationActivity.getUniqueId = function()
{
++AnimationActivity.CURR_UNIQUE_ID;
return AnimationActivity.CURR_UNIQUE_ID;
};

AnimationActivity.prototype.getId = function()
{
return this.nId;
};


function SetActivity( aCommonParamSet, aAnimation, aToAttr  )
{
SetActivity.superclass.constructor.call( this );

this.aAnimation = aAnimation;
this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.aToAttr = aToAttr;
this.bIsActive = true;
}
extend( SetActivity, AnimationActivity );


SetActivity.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bIsActive = true;
};

SetActivity.prototype.dispose = function()
{
this.bIsActive = false;
if( this.aEndEvent && this.aEndEvent.isCharged() )
this.aEndEvent.dispose();
};

SetActivity.prototype.calcTimeLag = function()
{
return 0.0;
};

SetActivity.prototype.perform = function()
{
if( !this.isActive() )
return false;

this.bIsActive = false;

if( this.aAnimation && this.aTargetElement )
{
this.aAnimation.start( this.aTargetElement );
this.aAnimation.perform( this.aToAttr );
this.aAnimation.end();
}

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

};

SetActivity.prototype.isActive = function()
{
return this.bIsActive;
};

SetActivity.prototype.dequeued = function()
{
};

SetActivity.prototype.end = function()
{
this.perform();
};

SetActivity.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'SetActivity.setTargets: target element is not valid' );
this.aTargetElement = aTargetElement;
};


function ActivityBase( aCommonParamSet )
{
ActivityBase.superclass.constructor.call( this );

this.aTargetElement = null;
this.aEndEvent = aCommonParamSet.aEndEvent;
this.aTimerEventQueue = aCommonParamSet.aTimerEventQueue;
this.nRepeats = aCommonParamSet.nRepeatCount;
this.nAccelerationFraction = aCommonParamSet.nAccelerationFraction;
this.nDecelerationFraction = aCommonParamSet.nDecelerationFraction;
this.bAutoReverse = aCommonParamSet.bAutoReverse;

this.bFirstPerformCall = true;
this.bIsActive = true;

}
extend( ActivityBase, AnimationActivity );


ActivityBase.prototype.activate = function( aEndEvent )
{
this.aEndEvent = aEndEvent;
this.bFirstPerformCall = true;
this.bIsActive = true;
};

ActivityBase.prototype.dispose = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aEndEvent.dispose();

this.aEndEvent = null;
};

ActivityBase.prototype.perform = function()
{
if( !this.isActive() )
return false; // no, early exit.

assert( !this.bFirstPerformCall, 'ActivityBase.perform: assertion (!this.FirstPerformCall) failed' );

return true;
};

ActivityBase.prototype.calcTimeLag = function()
{
if( this.isActive() && this.bFirstPerformCall )
{
this.bFirstPerformCall = false;

this.startAnimation();
}
return 0.0;
};

ActivityBase.prototype.isActive = function()
{
return this.bIsActive;
};

ActivityBase.prototype.isDisposed = function()
{
return ( !this.bIsActive && !this.aEndEvent );
};

ActivityBase.prototype.dequeued = function()
{
if( !this.isActive() )
this.endAnimation();
};

ActivityBase.prototype.setTargets = function( aTargetElement )
{
assert( aTargetElement, 'ActivityBase.setTargets: target element is not valid' );

this.aTargetElement = aTargetElement;
};

ActivityBase.prototype.startAnimation = function()
{
throw ( 'ActivityBase.startAnimation: abstract method invoked' );
};

ActivityBase.prototype.endAnimation = function()
{
throw ( 'ActivityBase.endAnimation: abstract method invoked' );
};

ActivityBase.prototype.endActivity = function()
{
this.bIsActive = false;

if( this.aEndEvent )
this.aTimerEventQueue.addEvent( this.aEndEvent );

this.aEndEvent = null;

};

ActivityBase.prototype.calcAcceleratedTime = function( nT )
{


nT = clamp( nT, 0.0, 1.0 );

if( ( this.nAccelerationFraction > 0.0 || this.nDecelerationFraction > 0.0 ) &&
( this.nAccelerationFraction + this.nDecelerationFraction <= 1.0 ) )
{
var nC = 1.0 - 0.5*this.nAccelerationFraction - 0.5*this.nDecelerationFraction;

var nTPrime = 0.0;

if( nT < this.nAccelerationFraction )
{
nTPrime += 0.5 * nT * nT / this.nAccelerationFraction; // partial first interval
}
else
{
nTPrime += 0.5 * this.nAccelerationFraction; // full first interval

if( nT <= ( 1.0 - this.nDecelerationFraction ) )
{
nTPrime += nT - this.nAccelerationFraction; // partial second interval
}
else
{
nTPrime += 1.0 - this.nAccelerationFraction - this.nDecelerationFraction; // full second interval

var nTRelative = nT - 1.0 + this.nDecelerationFraction;

nTPrime += nTRelative - 0.5*nTRelative*nTRelative / this.nDecelerationFraction;
}
}

nT = nTPrime / nC;

}
return nT;
};

ActivityBase.prototype.getEventQueue = function()
{
return this.aTimerEventQueue;
};

ActivityBase.prototype.getTargetElement = function()
{
return this.aTargetElement;
};

ActivityBase.prototype.isRepeatCountValid = function()
{
return !!this.nRepeats; // first ! convert to bool
};

ActivityBase.prototype.getRepeatCount = function()
{
return this.nRepeats;
};

ActivityBase.prototype.isAutoReverse = function()
{
return this.bAutoReverse;
};

ActivityBase.prototype.end = function()
{
if( !this.isActive() || this.isDisposed() )
return;

if( this.bFirstPerformCall )
{
this.bFirstPerformCall = false;
this.startAnimation();
}

this.performEnd();
this.endAnimation();
this.endActivity();
};

ActivityBase.prototype.performEnd = function()
{
throw ( 'ActivityBase.performEnd: abstract method invoked' );
};


function DiscreteActivityBase( aCommonParamSet )
{
DiscreteActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aOriginalWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aOriginalWakeupEvent.setActivity( this );
this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent = aCommonParamSet.aWakeupEvent;
this.aDiscreteTimes = aCommonParamSet.aDiscreteTimes;
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nCurrPerformCalls = 0;
}
extend( DiscreteActivityBase, ActivityBase );


DiscreteActivityBase.prototype.activate = function( aEndElement )
{
DiscreteActivityBase.superclass.activate.call( this, aEndElement );

this.aWakeupEvent = this.aOriginalWakeupEvent;
this.aWakeupEvent.setNextTimeout( 0 );
this.nCurrPerformCalls = 0;
};

DiscreteActivityBase.prototype.startAnimation = function()
{
this.aWakeupEvent.start();
};

DiscreteActivityBase.prototype.calcFrameIndex = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
var nFrameIndex = nCurrCalls % (2 * nVectorSize);

if( nFrameIndex >= nVectorSize )
nFrameIndex = 2*nVectorSize - nFrameIndex; // invert sweep

return nFrameIndex;
}
else
{
return nCurrCalls % nVectorSize;
}
};

DiscreteActivityBase.prototype.calcRepeatCount = function( nCurrCalls, nVectorSize )
{
if( this.isAutoReverse() )
{
return Math.floor( nCurrCalls / (2*nVectorSize) ); // we've got 2 cycles per repeat
}
else
{
return Math.floor( nCurrCalls / nVectorSize );
}
};

DiscreteActivityBase.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
throw ( 'DiscreteActivityBase.performDiscreteHook: abstract method invoked' );
};

DiscreteActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nVectorSize = this.aDiscreteTimes.length;

var nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
this.performDiscreteHook( nFrameIndex, nRepeatCount );

++this.nCurrPerformCalls;

var nCurrRepeat = this.nCurrPerformCalls / nVectorSize;

if( this.isAutoReverse() )
nCurrRepeat /= 2;

if( !this.isRepeatCountValid() || nCurrRepeat < this.getRepeatCount() )
{


nFrameIndex = this.calcFrameIndex(this.nCurrPerformCalls, nVectorSize);
var nCurrentRepeatTime = this.aDiscreteTimes[nFrameIndex];
nRepeatCount = this.calcRepeatCount( this.nCurrPerformCalls, nVectorSize );
var nNextTimeout = this.nMinSimpleDuration * ( nRepeatCount + this.calcAcceleratedTime( nCurrentRepeatTime ) );
this.aWakeupEvent.setNextTimeout( nNextTimeout );

this.getEventQueue().addEvent( this.aWakeupEvent );
}
else
{
this.aWakeupEvent = null;

this.endActivity();
}

return false; // remove from queue, will be added back by the wakeup event.
};

DiscreteActivityBase.prototype.dispose = function()
{
if( this.aWakeupEvent )
this.aWakeupEvent.dispose();

this.aWakeupEvent = null;

DiscreteActivityBase.superclass.dispose.call(this);
};


function SimpleContinuousActivityBase( aCommonParamSet )
{
SimpleContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aTimer = new ElapsedTime( aCommonParamSet.aActivityQueue.getTimer() );
this.nMinSimpleDuration = aCommonParamSet.nMinDuration;
this.nMinNumberOfFrames = aCommonParamSet.nMinNumberOfFrames;
this.nCurrPerformCalls = 0;

}
extend( SimpleContinuousActivityBase, ActivityBase );


SimpleContinuousActivityBase.prototype.startAnimation = function()
{
this.aTimer.reset();
};

SimpleContinuousActivityBase.prototype.calcTimeLag = function()
{
SimpleContinuousActivityBase.superclass.calcTimeLag.call( this );

if( !this.isActive() )
return 0.0;

var nCurrElapsedTime = this.aTimer.getElapsedTime();


var nFractionElapsedTime = nCurrElapsedTime / this.nMinSimpleDuration;

var nFractionRequiredCalls = this.nCurrPerformCalls / this.nMinNumberOfFrames;


if( nFractionElapsedTime < nFractionRequiredCalls )
{
return 0.0;
}
else
{
return ( ( nFractionElapsedTime - nFractionRequiredCalls ) * this.nMinSimpleDuration );
}
};

SimpleContinuousActivityBase.prototype.perform = function()
{
if( !SimpleContinuousActivityBase.superclass.perform.call( this ) )
return false; // done, we're ended

var nCurrElapsedTime = this.aTimer.getElapsedTime();
var nT = nCurrElapsedTime / this.nMinSimpleDuration;


var bActivityEnding = false;

if( this.isRepeatCountValid() )
{

var nRepeatCount = this.getRepeatCount();
var nEffectiveRepeat = this.isAutoReverse() ? 2.0 * nRepeatCount : nRepeatCount;

if( nEffectiveRepeat <= nT )
{
bActivityEnding = true;

nT = nEffectiveRepeat;
}
}


var nRepeats;
var nRelativeSimpleTime;
if( this.isAutoReverse() )
{
nRepeats = Math.floor( nT );
var nFractionalActiveDuration =  nT - nRepeats;

if( nRepeats % 2 )
{
nRelativeSimpleTime = 1.0 - nFractionalActiveDuration;
}
else
{
nRelativeSimpleTime = nFractionalActiveDuration;
}

nRepeats /= 2;
}
else
{

nRepeats = Math.floor( nT );
nRelativeSimpleTime = nT - nRepeats;

if( this.isRepeatCountValid() && ( nRepeats >= this.getRepeatCount() ) )
{

nRelativeSimpleTime = 1.0;
nRepeats -= 1.0;
}
}


this.simplePerform( nRelativeSimpleTime, nRepeats );

if( bActivityEnding )
this.endActivity();

++this.nCurrPerformCalls;

return this.isActive();
};

SimpleContinuousActivityBase.prototype.simplePerform = function( /*nSimpleTime, nRepeatCount*/ )
{
throw ( 'SimpleContinuousActivityBase.simplePerform: abstract method invoked' );
};


function ContinuousKeyTimeActivityBase( aCommonParamSet )
{
var nSize = aCommonParamSet.aDiscreteTimes.length;
assert( nSize > 1,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.length > 1) failed' );

assert( aCommonParamSet.aDiscreteTimes[0] == 0.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.front() == 0.0) failed' );

assert( aCommonParamSet.aDiscreteTimes[ nSize - 1 ] <= 1.0,
'ContinuousKeyTimeActivityBase constructor: assertion (aDiscreteTimes.back() <= 1.0) failed' );

ContinuousKeyTimeActivityBase.superclass.constructor.call( this, aCommonParamSet );

this.aLerper = new KeyStopLerp( aCommonParamSet.aDiscreteTimes );
}
extend( ContinuousKeyTimeActivityBase, SimpleContinuousActivityBase );


ContinuousKeyTimeActivityBase.prototype.activate = function( aEndElement )
{
ContinuousKeyTimeActivityBase.superclass.activate.call( this, aEndElement );

this.aLerper.reset();
};

ContinuousKeyTimeActivityBase.prototype.performContinuousHook = function( /*nIndex, nFractionalIndex, nRepeatCount*/ )
{
throw ( 'ContinuousKeyTimeActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousKeyTimeActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
var nAlpha = this.calcAcceleratedTime( nSimpleTime );

var aLerpResult = this.aLerper.lerp( nAlpha );

this.performContinuousHook( aLerpResult.nIndex, aLerpResult.nLerp, nRepeatCount );
};


function ContinuousActivityBase( aCommonParamSet )
{
ContinuousActivityBase.superclass.constructor.call( this, aCommonParamSet );

}
extend( ContinuousActivityBase, SimpleContinuousActivityBase );


ContinuousActivityBase.prototype.performContinuousHook = function( /*nModifiedTime, nRepeatCount*/ )
{
throw ( 'ContinuousActivityBase.performContinuousHook: abstract method invoked' );
};

ContinuousActivityBase.prototype.simplePerform = function( nSimpleTime, nRepeatCount )
{
this.performContinuousHook( this.calcAcceleratedTime( nSimpleTime ), nRepeatCount );
};


function SimpleActivity( aCommonParamSet, aNumberAnimation, eDirection )
{
assert( ( eDirection == BACKWARD ) || ( eDirection == FORWARD ),
'SimpleActivity constructor: animation direction is not valid' );

assert( aNumberAnimation, 'SimpleActivity constructor: animation object is not valid' );

SimpleActivity.superclass.constructor.call( this, aCommonParamSet );

this.aAnimation = aNumberAnimation;
this.nDirection = ( eDirection == FORWARD ) ? 1.0 : 0.0;
}
extend( SimpleActivity, ContinuousActivityBase );


SimpleActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation )
return;

ANIMDBG.print( 'SimpleActivity.startAnimation invoked' );
SimpleActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

SimpleActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();

};

SimpleActivity.prototype.performContinuousHook = function( nModifiedTime /*, nRepeatCount*/ )
{

if( this.isDisposed() || !this.aAnimation )
return;

var nT = 1.0 - this.nDirection + nModifiedTime * ( 2.0*this.nDirection - 1.0 );
this.aAnimation.perform( nT );
};

SimpleActivity.prototype.performEnd = function()
{
if( this.aAnimation )
this.aAnimation.perform( this.nDirection );
};


function FromToByActivityTemplate( BaseType ) // template parameter
{

function FromToByActivity( aFromValue, aToValue, aByValue,
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate )
{
assert( aAnimation, 'FromToByActivity constructor: invalid animation object' );
assert( ( aToValue != undefined ) || ( aByValue != undefined ),
'FromToByActivity constructor: one of aToValue or aByValue must be valid' );

FromToByActivity.superclass.constructor.call( this, aActivityParamSet );

this.aFrom = aFromValue;
this.aTo = aToValue;
this.aBy = aByValue;
this.aStartValue = null;
this.aEndValue = null;
this.aPreviousValue = null;
this.aStartInterpolationValue = null;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.equal = aOperatorSet.equal;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bDynamicStartValue = false;
this.nIteration = 0;
this.bCumulative = bAccumulate;
this.aFormula = aActivityParamSet.aFormula;
}
extend( FromToByActivity, BaseType );

FromToByActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation && this.aFrom )
{
var aValue = this.aFormula ? this.aFormula( this.aFrom ) : this.aFrom;
this.aAnimation.perform(aValue);
}
};

FromToByActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.startAnimation: activity disposed or not valid animation' );
return;
}

FromToByActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );


var aAnimationStartValue = this.aAnimation.getUnderlyingValue();

if( this.aFrom )
{
if( this.aTo )
{
this.aStartValue = this.aFrom;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = this.aFrom;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}
else
{
this.aStartValue = aAnimationStartValue;
this.aStartInterpolationValue = this.aStartValue;

if( this.aTo )
{

this.bDynamicStartValue = true;
this.aPreviousValue = this.aStartValue;
this.aEndValue = this.aTo;
}
else if( this.aBy )
{
this.aStartValue = aAnimationStartValue;

this.aEndValue = this.add( this.aStartValue, this.aBy );
}
}

ANIMDBG.print( 'FromToByActivity.startAnimation: aStartValue = ' + this.aStartValue + ', aEndValue = ' + this.aEndValue );
};

FromToByActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

FromToByActivity.prototype.performContinuousHook = function( nModifiedTime, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'FromToByActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}


if( this.bDynamicStartValue )
{
if( this.nIteration != nRepeatCount )
{
this.nIteration = nRepeatCount;
this.aStartInterpolationValue =  this.aStartValue;
}
else
{
var aActualValue = this.aAnimation.getUnderlyingValue();
if( !this.equal( aActualValue, this.aPreviousValue ) )
this.aStartInterpolationValue = aActualValue;
}
}

var aValue = this.aInterpolator( this.aStartInterpolationValue,
this.aEndValue, nModifiedTime );

if( this.bCumulative && !this.bDynamicStartValue )
{
aValue = this.add( this.scale( nRepeatCount, this.aEndValue ), aValue );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );

if( this.bDynamicStartValue )
{
this.aPreviousValue = this.aAnimation.getUnderlyingValue();
}

};

FromToByActivity.prototype.performDiscreteHook = function( /*nFrame, nRepeatCount*/ )
{
if (this.isDisposed() || !this.aAnimation) {
log('FromToByActivity.performDiscreteHook: activity disposed or not valid animation');
return;
}
};

FromToByActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.isAutoReverse() ? this.aStartValue : this.aEndValue;
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
}
};

FromToByActivity.prototype.dispose = function()
{
FromToByActivity.superclass.dispose.call( this );
};


return FromToByActivity;
}


var LinearFromToByActivity = instantiate( FromToByActivityTemplate, ContinuousActivityBase );
var DiscreteFromToByActivity = instantiate( FromToByActivityTemplate, DiscreteActivityBase );


function  ValueListActivityTemplate( BaseType ) // template parameter
{

function ValueListActivity( aValueList, aActivityParamSet,
aAnimation, aInterpolator,
aOperatorSet, bAccumulate )
{
assert( aAnimation, 'ValueListActivity constructor: invalid animation object' );
assert( aValueList.length != 0, 'ValueListActivity: value list is empty' );

ValueListActivity.superclass.constructor.call( this, aActivityParamSet );

this.aValueList = aValueList;
this.aAnimation = aAnimation;
this.aInterpolator = aInterpolator;
this.add = aOperatorSet.add;
this.scale = aOperatorSet.scale;
this.bCumulative = bAccumulate;
this.aLastValue = this.aValueList[ this.aValueList.length - 1 ];
this.aFormula = aActivityParamSet.aFormula;
}
extend( ValueListActivity, BaseType );

ValueListActivity.prototype.activate = function( aEndEvent )
{
ValueListActivity.superclass.activate.call( this, aEndEvent );
for( var i = 0; i < this.aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + this.aValueList[i] );
}
};

ValueListActivity.prototype.initAnimatedElement = function()
{
if( this.aAnimation )
{
var aValue = this.aValueList[0];
aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform(aValue);
}
};

ValueListActivity.prototype.startAnimation = function()
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.startAnimation: activity disposed or not valid animation' );
return;
}

ValueListActivity.superclass.startAnimation.call( this );

this.aAnimation.start( this.getTargetElement() );
};

ValueListActivity.prototype.endAnimation = function()
{
if( this.aAnimation )
this.aAnimation.end();
};

ValueListActivity.prototype.performContinuousHook = function( nIndex, nFractionalIndex, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performContinuousHook: activity disposed or not valid animation' );
return;
}

assert( ( nIndex + 1 ) < this.aValueList.length,
'ValueListActivity.performContinuousHook: assertion (nIndex + 1 < this.aValueList.length) failed' );


var aValue = this.aInterpolator( this.aValueList[ nIndex ],
this.aValueList[ nIndex+1 ],
nFractionalIndex );

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performDiscreteHook = function( nFrame, nRepeatCount )
{
if( this.isDisposed() || !this.aAnimation  )
{
log( 'ValueListActivity.performDiscreteHook: activity disposed or not valid animation' );
return;
}

assert( nFrame < this.aValueList.length,
'ValueListActivity.performDiscreteHook: assertion ( nFrame < this.aValueList.length) failed' );

var aValue = this.aValueList[nFrame];

if( this.bCumulative )
{
aValue = this.add( aValue, this.scale( nRepeatCount, this.aLastValue ) );
}

aValue = this.aFormula ? this.aFormula( aValue ) : aValue;
this.aAnimation.perform( aValue );
};

ValueListActivity.prototype.performEnd = function()
{
if( this.aAnimation )
{
var aValue = this.aFormula ? this.aFormula( this.aLastValue ) : this.aLastValue;
this.aAnimation.perform( aValue );
}
};

ValueListActivity.prototype.dispose = function()
{
ValueListActivity.superclass.dispose.call( this );
};


return ValueListActivity;
}


var LinearValueListActivity = instantiate( ValueListActivityTemplate, ContinuousKeyTimeActivityBase );
var DiscreteValueListActivity = instantiate( ValueListActivityTemplate, DiscreteActivityBase );


function createActivity( aActivityParamSet, aAnimationNode, aAnimation, aInterpolator )
{
var eCalcMode = aAnimationNode.getCalcMode();

var sAttributeName = aAnimationNode.getAttributeName();
var aAttributeProp = aAttributeMap[ sAttributeName ];

var eValueType = aAttributeProp[ 'type' ];
var eValueSubtype = aAttributeProp[ 'subtype' ];

if( ! aInterpolator )
{
aInterpolator = aInterpolatorHandler.getInterpolator( eCalcMode,
eValueType,
eValueSubtype );
}

var bAccumulate = ( aAnimationNode.getAccumulate() === ACCUMULATE_MODE_SUM )
&& !( eValueType === BOOL_PROPERTY ||
eValueType === STRING_PROPERTY ||
eValueType === ENUM_PROPERTY );

if( aAnimationNode.getFormula() )
{
var sFormula =  aAnimationNode.getFormula();
var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;
sFormula = sFormula.replace(reMath, 'Math.$&');
sFormula = sFormula.replace(/pi(?!\w)/g, 'Math.PI');
sFormula = sFormula.replace(/e(?!\w)/g, 'Math.E');
sFormula = sFormula.replace(/\$/g, '__PARAM0__');

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aBBox = aAnimatedElement.getBaseBBox();

var width = aBBox.width / aActivityParamSet.nSlideWidth;
var height = aBBox.height / aActivityParamSet.nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / aActivityParamSet.nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / aActivityParamSet.nSlideHeight;

aActivityParamSet.aFormula = function( __PARAM0__ ) {

return eval(sFormula);
};
}

aActivityParamSet.aDiscreteTimes = aAnimationNode.getKeyTimes();

var aValueSet = aAnimationNode.getValues();
var nValueSetSize = aValueSet.length;

if( nValueSetSize != 0 )
{

if( aActivityParamSet.aDiscreteTimes.length == 0 )
{
for( var i = 0; i < nValueSetSize; ++i )
aActivityParamSet.aDiscreteTimes[i].push( i / nValueSetSize );
}

switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );

return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteValueListActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createValueListActivity( aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearValueListActivity,
bAccumulate,
eValueType );
}
}
else
{
switch( eCalcMode )
{
case CALC_MODE_DISCRETE:
log( 'createActivity: discrete calculation case not yet implemented' );
aActivityParamSet.aWakeupEvent =
new WakeupEvent( aActivityParamSet.aTimerEventQueue.getTimer(),
aActivityParamSet.aActivityQueue );
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
DiscreteFromToByActivity,
bAccumulate,
eValueType );

default:
log( 'createActivity: unexpected calculation mode: ' + eCalcMode );
case CALC_MODE_PACED :
case CALC_MODE_SPLINE :
case CALC_MODE_LINEAR:
return createFromToByActivity(  aActivityParamSet,
aAnimationNode,
aAnimation,
aInterpolator,
LinearFromToByActivity,
bAccumulate,
eValueType );
}
}
}


function createValueListActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{
var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createValueListActivity: no operator set found' );

var aValueSet = aAnimationNode.getValues();

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

for( var i = 0; i < aValueList.length; ++i )
{
ANIMDBG.print( 'createValueListActivity: value[' + i + '] = ' + aValueList[i] );
}

return new ClassTemplateInstance( aValueList, aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function createFromToByActivity( aActivityParamSet, aAnimationNode, aAnimation,
aInterpolator, ClassTemplateInstance, bAccumulate, eValueType )
{

var aAnimatedElement = aAnimationNode.getAnimatedElement();
var aOperatorSet = aOperatorSetMap[ eValueType ];
assert( aOperatorSet, 'createFromToByActivity: no operator set found' );

var aValueSet = [];
aValueSet[0] = aAnimationNode.getFromValue();
aValueSet[1] = aAnimationNode.getToValue();
aValueSet[2] = aAnimationNode.getByValue();

ANIMDBG.print( 'createFromToByActivity: value type: ' + aValueTypeOutMap[eValueType] +
', aFrom = ' + aValueSet[0] +
', aTo = ' + aValueSet[1] +
', aBy = ' + aValueSet[2] );

var aValueList = [];

extractAttributeValues( eValueType,
aValueList,
aValueSet,
aAnimatedElement.getBaseBBox(),
aActivityParamSet.nSlideWidth,
aActivityParamSet.nSlideHeight );

ANIMDBG.print( 'createFromToByActivity: ' +
', aFrom = ' + aValueList[0] +
', aTo = ' + aValueList[1] +
', aBy = ' + aValueList[2] );

return new ClassTemplateInstance( aValueList[0], aValueList[1], aValueList[2],
aActivityParamSet, aAnimation,
aInterpolator, aOperatorSet, bAccumulate );
}


function extractAttributeValues( eValueType, aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var i;
switch( eValueType )
{
case NUMBER_PROPERTY :
evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight );
break;
case BOOL_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
var aValue = booleanParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
case STRING_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case ENUM_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValueList.push( aValueSet[i] );
}
break;
case COLOR_PROPERTY :
for( i = 0; i < aValueSet.length; ++i )
{
aValue = colorParser( aValueSet[i] );
aValueList.push( aValue );
}
break;
default:
log( 'createValueListActivity: unexpected value type: ' + eValueType );
}

}


function evalValuesAttribute( aValueList, aValueSet, aBBox, nSlideWidth, nSlideHeight )
{
var width = aBBox.width / nSlideWidth;
var height = aBBox.height / nSlideHeight;
var x = ( aBBox.x + aBBox.width / 2 ) / nSlideWidth;
var y = ( aBBox.y + aBBox.height / 2 ) / nSlideHeight;

var reMath = /abs|sqrt|asin|acos|atan|sin|cos|tan|exp|log|min|max/g;

for( var i = 0; i < aValueSet.length; ++i )
{
var sValue = aValueSet[i];
sValue = sValue.replace(reMath, 'Math.$&');
sValue = sValue.replace(/pi(?!\w)/g, 'Math.PI');
sValue = sValue.replace(/e(?!\w)/g, 'Math.E');
var aValue =  eval( sValue );
aValueList.push( aValue );
}
}


var BACKWARD    = 0;
var FORWARD     = 1;

var MAXIMUM_FRAME_COUNT                 = 60;
var MINIMUM_TIMEOUT                     = 1.0 / MAXIMUM_FRAME_COUNT;
var MAXIMUM_TIMEOUT                     = 4.0;
var MINIMUM_FRAMES_PER_SECONDS          = 10;
var PREFERRED_FRAMES_PER_SECONDS        = 50;
var PREFERRED_FRAME_RATE                = 1.0 / PREFERRED_FRAMES_PER_SECONDS;


function Effect( nId )
{
this.nId = ( typeof( nId ) === typeof( 1 ) ) ? nId : -1;
this.eState = Effect.NOT_STARTED;
}
Effect.NOT_STARTED = 0;
Effect.PLAYING = 1;
Effect.ENDED = 2;

Effect.prototype.getId = function()
{
return this.nId;
};

Effect.prototype.isMainEffect = function()
{
return ( this.nId === -1 );
};

Effect.prototype.isPlaying = function()
{
return ( this.eState === Effect.PLAYING );
};

Effect.prototype.isEnded = function()
{
return ( this.eState === Effect.ENDED );
};

Effect.prototype.start = function()
{
assert( this.eState === Effect.NOT_STARTED, 'Effect.start: wrong state.' );
this.eState = Effect.PLAYING;
};

Effect.prototype.end = function()
{
assert( this.eState === Effect.PLAYING, 'Effect.end: wrong state.' );
this.eState = Effect.ENDED;
};


function SlideShow()
{
this.aTimer = new ElapsedTime();
this.aFrameSynchronization = new FrameSynchronization( PREFERRED_FRAME_RATE );
this.aTimerEventQueue = new TimerEventQueue( this.aTimer );
this.aActivityQueue = new ActivityQueue( this.aTimer );
this.aNextEffectEventArray = null;
this.aInteractiveAnimationSequenceMap = null;
this.aEventMultiplexer = null;

this.aContext = new SlideShowContext( this.aTimerEventQueue,
this.aEventMultiplexer,
this.aNextEffectEventArray,
this.aInteractiveAnimationSequenceMap,
this.aActivityQueue );
this.bIsIdle = true;
this.bIsEnabled = true;
this.bNoSlideTransition = false;
this.bIsTransitionRunning = false;

this.nCurrentEffect = 0;
this.bIsNextEffectRunning = false;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;
}

SlideShow.prototype.setSlideEvents = function( aNextEffectEventArray,
aInteractiveAnimationSequenceMap,
aEventMultiplexer )
{
if( !aNextEffectEventArray )
log( 'SlideShow.setSlideEvents: aNextEffectEventArray is not valid' );

if( !aInteractiveAnimationSequenceMap )
log( 'SlideShow.setSlideEvents:aInteractiveAnimationSequenceMap  is not valid' );

if( !aEventMultiplexer )
log( 'SlideShow.setSlideEvents: aEventMultiplexer is not valid' );

this.aContext.aNextEffectEventArray = aNextEffectEventArray;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aContext.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aContext.aEventMultiplexer = aEventMultiplexer;
this.aEventMultiplexer = aEventMultiplexer;
this.nCurrentEffect = 0;
};

SlideShow.prototype.createSlideTransition = function( aSlideTransitionHandler, aLeavingSlide, aEnteringSlide, aTransitionEndEvent )
{
if( !aEnteringSlide )
{
log( 'SlideShow.createSlideTransition: entering slide element is not valid.' );
return null;
}

if( this.bNoSlideTransition ) return null;

var aAnimatedLeavingSlide = null;
if( aLeavingSlide )
aAnimatedLeavingSlide = new AnimatedSlide( aLeavingSlide );
var aAnimatedEnteringSlide = new AnimatedSlide( aEnteringSlide );

var aSlideTransition = aSlideTransitionHandler.createSlideTransition( aAnimatedLeavingSlide, aAnimatedEnteringSlide );
if( !aSlideTransition ) return null;

var nDuration = 0.001;
if( aSlideTransitionHandler.getDuration().isValue() )
{
nDuration = aSlideTransitionHandler.getDuration().getValue();
}
else
{
log( 'SlideShow.createSlideTransition: duration is not a number' );
}

var aCommonParameterSet = new ActivityParamSet();
aCommonParameterSet.aEndEvent = aTransitionEndEvent;
aCommonParameterSet.aTimerEventQueue = this.aTimerEventQueue;
aCommonParameterSet.aActivityQueue = this.aActivityQueue;
aCommonParameterSet.nMinDuration = nDuration;
aCommonParameterSet.nMinNumberOfFrames = aSlideTransitionHandler.getMinFrameCount();
aCommonParameterSet.nSlideWidth = WIDTH;
aCommonParameterSet.nSlideHeight = HEIGHT;

return new SimpleActivity( aCommonParameterSet, aSlideTransition, FORWARD );

};

SlideShow.prototype.isEnabled = function()
{
return this.bIsEnabled;
};

SlideShow.prototype.isRunning = function()
{
return !this.bIsIdle;
};

SlideShow.prototype.isTransitionPlaying = function()
{
return this.bIsTransitionRunning;
};

SlideShow.prototype.isMainEffectPlaying = function()
{
return this.bIsNextEffectRunning;
};

SlideShow.prototype.isInteractiveEffectPlaying = function()
{
return ( this.nTotalInteractivePlayingEffects > 0 );
};

SlideShow.prototype.isAnyEffectPlaying = function()
{
return ( this.isMainEffectPlaying() || this.isInteractiveEffectPlaying() );
};

SlideShow.prototype.hasAnyEffectStarted = function()
{
return ( this.aStartedEffectList.length > 0 );
};

SlideShow.prototype.notifyNextEffectStart = function()
{
assert( !this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectStart: an effect is already started.' );
this.bIsNextEffectRunning = true;
this.aEventMultiplexer.registerNextEffectEndHandler( bind2( SlideShow.prototype.notifyNextEffectEnd, this ) );
var aEffect = new Effect();
aEffect.start();
this.aStartedEffectIndexMap[ -1 ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );


var aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nCurSlide].aSlideAnimationsHandler.aAnimatedElementMap;
for( var sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifyNextEffectStart( this.nCurrentEffect );
};

SlideShow.prototype.notifyNextEffectEnd = function()
{
assert( this.bIsNextEffectRunning,
'SlideShow.notifyNextEffectEnd: effect already ended.' );
this.bIsNextEffectRunning = false;

this.aStartedEffectList[ this.aStartedEffectIndexMap[ -1 ] ].end();
};

SlideShow.prototype.notifySlideStart = function( nNewSlideIndex, nOldSlideIndex )
{
this.nCurrentEffect = 0;
this.bIsRewinding = false;
this.bIsSkipping = false;
this.bIsSkippingAll = false;
this.nTotalInteractivePlayingEffects = 0;
this.aStartedEffectList = [];
this.aStartedEffectIndexMap = {};
this.aStartedEffectIndexMap[ -1 ] = undefined;

var aAnimatedElementMap;
var sId;
if( nOldSlideIndex !== undefined )
{
aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nOldSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideEnd();
}

aAnimatedElementMap = theMetaDoc.aMetaSlideSet[nNewSlideIndex].aSlideAnimationsHandler.aAnimatedElementMap;
for( sId in aAnimatedElementMap )
aAnimatedElementMap[ sId ].notifySlideStart( this.aContext );
};

SlideShow.prototype.notifyTransitionEnd = function( nSlideIndex )
{
if( theMetaDoc.getCurrentSlide() )
{
var sRef = 'url(#' + aPresentationClipPathId + ')';
theMetaDoc.getCurrentSlide().slideElement.setAttribute('clip-path', sRef);
}

this.bIsTransitionRunning = false;
if( this.bIsRewinding )
{
theMetaDoc.aMetaSlideSet[nSlideIndex].hide();
var nIndex = nCurSlide !== undefined ? nCurSlide : -1;
this.displaySlide( nIndex, true );
this.skipAllEffects();
this.bIsRewinding = false;
return;
}

theMetaDoc.setCurrentSlide(nSlideIndex);

if( this.aSlideViewElement )
{
theMetaDoc.getCurrentSlide().aVisibilityStatusElement.parentNode.removeChild( this.aSlideViewElement );
this.aSlideViewElement = null;
}
if( this.isEnabled() )
{
this.dispose();

theMetaDoc.getCurrentSlide().aSlideAnimationsHandler.start();
this.update();
}
};

SlideShow.prototype.notifyInteractiveAnimationSequenceStart = function( nNodeId )
{
++this.nTotalInteractivePlayingEffects;
var aEffect = new Effect( nNodeId );
aEffect.start();
this.aStartedEffectIndexMap[ nNodeId ] = this.aStartedEffectList.length;
this.aStartedEffectList.push( aEffect );
};

SlideShow.prototype.notifyInteractiveAnimationSequenceEnd = function( nNodeId )
{
assert( this.isInteractiveEffectPlaying(),
'SlideShow.notifyInteractiveAnimationSequenceEnd: no interactive effect playing.' );

this.aStartedEffectList[ this.aStartedEffectIndexMap[ nNodeId ] ].end();
--this.nTotalInteractivePlayingEffects;
};

SlideShow.prototype.nextEffect = function()
{
if( !this.isEnabled() )
return false;

if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
return true;
}

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
++this.nCurrentEffect;
this.update();
return true;
};

SlideShow.prototype.skipTransition  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsSkipping = true;

this.aActivityQueue.endAll();
this.aTimerEventQueue.forceEmpty();
this.aActivityQueue.endAll();
this.update();
this.bIsSkipping = false;
};

SlideShow.prototype.skipAllPlayingEffects  = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

this.bIsSkipping = true;
for( var i = 0; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
this.aEventMultiplexer.notifySkipEffectEvent();
else
this.aEventMultiplexer.notifySkipInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipNextEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return true;

assert( !this.isAnyEffectPlaying(),
'SlideShow.skipNextEffect' );

if( !this.aNextEffectEventArray )
return false;

if( this.nCurrentEffect >= this.aNextEffectEventArray.size() )
return false;

this.notifyNextEffectStart();

this.bIsSkipping = true;
this.aNextEffectEventArray.at( this.nCurrentEffect ).fire();
this.aEventMultiplexer.notifySkipEffectEvent();
++this.nCurrentEffect;
this.update();
this.bIsSkipping = false;
return true;
};

SlideShow.prototype.skipPlayingOrNextEffect = function()
{
if( this.isTransitionPlaying() )
{
this.skipTransition();
return true;
}

if( this.isAnyEffectPlaying() )
return this.skipAllPlayingEffects();
else
return this.skipNextEffect();
};


SlideShow.prototype.skipAllEffects = function()
{
if( this.bIsSkippingAll )
return true;

this.bIsSkippingAll = true;

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

if( this.isAnyEffectPlaying() )
{
this.skipAllPlayingEffects();
}
else if( !this.aNextEffectEventArray
|| ( this.nCurrentEffect >= this.aNextEffectEventArray.size() ) )
{
this.bIsSkippingAll = false;
return false;
}

while( this.nCurrentEffect < this.aNextEffectEventArray.size() )
{
this.skipNextEffect();
}
this.bIsSkippingAll = false;
return true;
};

SlideShow.prototype.rewindTransition = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

this.bIsRewinding = true;
this.aActivityQueue.endAll();
this.update();
this.bIsRewinding = false;
};

SlideShow.prototype.rewindEffect = function()
{
if( this.bIsSkipping || this.bIsRewinding )
return;

if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

this.bIsRewinding = true;

var nFirstPlayingEffectIndex = undefined;

var i = 0;
for( ; i < this.aStartedEffectList.length; ++i )
{
var aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
nFirstPlayingEffectIndex = i;
break;
}
}

if( nFirstPlayingEffectIndex !== undefined )
{
i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList[i];
if( aEffect.isPlaying() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindCurrentEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindRunningInteractiveEffectEvent( aEffect.getId() );
}
}
else if( aEffect.isEnded() )
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
}
this.update();

i = this.aStartedEffectList.length - 1;
for( ; i >= nFirstPlayingEffectIndex; --i )
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
}
}
else  // there is no playing effect
{
aEffect = this.aStartedEffectList.pop();
if( !aEffect.isMainEffect() )
delete this.aStartedEffectIndexMap[ aEffect.getId() ];
if( aEffect.isEnded() )  // Well that is almost an assertion.
{
if( aEffect.isMainEffect() )
{
this.aEventMultiplexer.notifyRewindLastEffectEvent();
if( this.nCurrentEffect > 0 )
--this.nCurrentEffect;
}
else
{
this.aEventMultiplexer.notifyRewindEndedInteractiveEffectEvent( aEffect.getId() );
}
}
this.update();
}

this.bIsRewinding = false;
};

SlideShow.prototype.rewindToPreviousSlide = function()
{
if( this.isTransitionPlaying() )
{
this.rewindTransition();
return;
}
if( this.isAnyEffectPlaying() )
return;
var nNewSlide = nCurSlide - 1;
this.displaySlide( nNewSlide, true );
this.skipAllEffects();
};

SlideShow.prototype.rewindAllEffects = function()
{
if( !this.hasAnyEffectStarted() )
{
this.rewindToPreviousSlide();
return;
}

while( this.hasAnyEffectStarted() )
{
this.rewindEffect();
}
};

SlideShow.prototype.displaySlide = function( nNewSlide, bSkipSlideTransition )
{
var aMetaDoc = theMetaDoc;
var nSlides = aMetaDoc.nNumberOfSlides;
if( nNewSlide < 0 && nSlides > 0 )
nNewSlide = nSlides - 1;
else if( nNewSlide >= nSlides )
nNewSlide = 0;

if( ( currentMode === INDEX_MODE ) && ( nNewSlide === nCurSlide ) )
{
aMetaDoc.getCurrentSlide().show();
return;
}

if( this.isTransitionPlaying() )
{
this.skipTransition();
}

var nOldSlide = nCurSlide;
if( nOldSlide !== undefined )
{
var oldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
if( this.isEnabled() )
{
if( oldMetaSlide.aSlideAnimationsHandler.isAnimated() )
{
oldMetaSlide.aSlideAnimationsHandler.end( bSkipSlideTransition );

this.dispose();
}
}
}

this.notifySlideStart( nNewSlide, nOldSlide );

if( this.isEnabled() && !bSkipSlideTransition  )
{
if ( ( ( nOldSlide !== undefined ) &&
( ( nNewSlide > nOldSlide ) ||
( ( nNewSlide == 0) && ( nOldSlide == (aMetaDoc.nNumberOfSlides - 1) ) ) ) ) ||
(  ( nOldSlide === undefined ) &&  ( nNewSlide == 0) )  // for transition on first slide
)
{

var aOldMetaSlide = null;
if( nOldSlide === undefined ) // for transition on first slide
{
aOldMetaSlide = aMetaDoc.theMetaDummySlide;
}
else
{
aOldMetaSlide = aMetaDoc.aMetaSlideSet[nOldSlide];
}
var aNewMetaSlide = aMetaDoc.aMetaSlideSet[nNewSlide];

var aSlideTransitionHandler = aNewMetaSlide.aTransitionHandler;
if( aSlideTransitionHandler && aSlideTransitionHandler.isValid() )
{
var sRef = 'url(#' + aPresentationClipPathShrinkId + ')';
aOldMetaSlide.slideElement.setAttribute( 'clip-path', sRef );

if( nOldSlide > nNewSlide )
{
this.aSlideViewElement = document.createElementNS( NSS['svg'], 'use' );
setNSAttribute( 'xlink', this.aSlideViewElement, 'href', '#' + aOldMetaSlide.slideContainerId );
aNewMetaSlide.aVisibilityStatusElement.parentNode.insertBefore( this.aSlideViewElement, aNewMetaSlide.aVisibilityStatusElement );
aOldMetaSlide.hide();
}

var aLeavingSlide = aOldMetaSlide;
var aEnteringSlide = aNewMetaSlide;
var aTransitionEndEvent = makeEvent( bind2( this.notifyTransitionEnd, this, nNewSlide ) );

var aTransitionActivity =
this.createSlideTransition( aSlideTransitionHandler, aLeavingSlide,
aEnteringSlide, aTransitionEndEvent );

if( aTransitionActivity )
{
this.bIsTransitionRunning = true;
this.aActivityQueue.addActivity( aTransitionActivity );
this.update();
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}
}
else
{
this.notifyTransitionEnd( nNewSlide );
}

};

SlideShow.prototype.update = function()
{
this.aTimer.holdTimer();

this.aTimerEventQueue.process();
this.aActivityQueue.process();

this.aFrameSynchronization.synchronize();

this.aActivityQueue.processDequeued();

this.aTimer.releaseTimer();

var bActivitiesLeft = ( ! this.aActivityQueue.isEmpty() );
var bTimerEventsLeft = ( ! this.aTimerEventQueue.isEmpty() );
var bEventsLeft = ( bActivitiesLeft || bTimerEventsLeft );


if( bEventsLeft )
{
var nNextTimeout;
if( bActivitiesLeft )
{
nNextTimeout = MINIMUM_TIMEOUT;
this.aFrameSynchronization.activate();
}
else
{
nNextTimeout = this.aTimerEventQueue.nextTimeout();
if( nNextTimeout < MINIMUM_TIMEOUT )
nNextTimeout = MINIMUM_TIMEOUT;
else if( nNextTimeout > MAXIMUM_TIMEOUT )
nNextTimeout = MAXIMUM_TIMEOUT;
this.aFrameSynchronization.deactivate();
}

this.bIsIdle = false;
window.setTimeout( 'aSlideShow.update()', nNextTimeout * 1000 );
}
else
{
this.bIsIdle = true;
}
};

SlideShow.prototype.dispose = function()
{
this.aTimerEventQueue.clear();
this.aActivityQueue.clear();
this.aNextEffectEventArray = null;
this.aEventMultiplexer = null;
};

SlideShow.prototype.getContext = function()
{
return this.aContext;
};

var aSlideShow = null;


function SlideShowContext( aTimerEventQueue, aEventMultiplexer, aNextEffectEventArray, aInteractiveAnimationSequenceMap, aActivityQueue)
{
this.aTimerEventQueue = aTimerEventQueue;
this.aEventMultiplexer = aEventMultiplexer;
this.aNextEffectEventArray = aNextEffectEventArray;
this.aInteractiveAnimationSequenceMap = aInteractiveAnimationSequenceMap;
this.aActivityQueue = aActivityQueue;
this.bIsSkipping = false;
}


function FrameSynchronization( nFrameDuration )
{
this.nFrameDuration = nFrameDuration;
this.aTimer = new ElapsedTime();
this.nNextFrameTargetTime = 0.0;
this.bIsActive = false;

this.markCurrentFrame();
}


FrameSynchronization.prototype.markCurrentFrame = function()
{
this.nNextFrameTargetTime = this.aTimer.getElapsedTime() + this.nFrameDuration;
};

FrameSynchronization.prototype.synchronize = function()
{
if( this.bIsActive )
{
while( this.aTimer.getElapsedTime() < this.nNextFrameTargetTime )
;
}

this.markCurrentFrame();

};

FrameSynchronization.prototype.activate = function()
{
this.bIsActive = true;
};

FrameSynchronization.prototype.deactivate = function()
{
this.bIsActive = false;
};


function NextEffectEventArray()
{
this.aEventArray = [];
}


NextEffectEventArray.prototype.size = function()
{
return this.aEventArray.length;
};

NextEffectEventArray.prototype.at = function( nIndex )
{
return this.aEventArray[ nIndex ];
};

NextEffectEventArray.prototype.appendEvent = function( aEvent )
{
var nSize = this.size();
for( var i = 0; i < nSize; ++i )
{
if( this.aEventArray[i].getId() == aEvent.getId() )
{
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') already present' );
return false;
}
}
this.aEventArray.push( aEvent );
aNextEffectEventArrayDebugPrinter.print( 'NextEffectEventArray.appendEvent: event(' + aEvent.getId() + ') appended' );
return true;
};

NextEffectEventArray.prototype.clear = function( )
{
this.aEventArray = [];
};


function TimerEventQueue( aTimer )
{
this.aTimer = aTimer;
this.aEventSet = new PriorityQueue( EventEntry.compare );
}


TimerEventQueue.prototype.addEvent = function( aEvent )
{
this.DBG( 'TimerEventQueue.addEvent event(' + aEvent.getId() + ') appended.' );
if( !aEvent )
{
log( 'TimerEventQueue.addEvent: null event' );
return false;
}

var nTime = aEvent.getActivationTime( this.aTimer.getElapsedTime() );
var aEventEntry = new EventEntry( aEvent, nTime );
this.aEventSet.push( aEventEntry );

return true;
};

TimerEventQueue.prototype.forceEmpty = function()
{
this.process_(true);
};


TimerEventQueue.prototype.process = function()
{
this.process_(false);
};

TimerEventQueue.prototype.process_ = function( bFireAllEvents )
{
var nCurrentTime = this.aTimer.getElapsedTime();

while( !this.isEmpty() && ( bFireAllEvents || ( this.aEventSet.top().nActivationTime <= nCurrentTime ) ) )
{
var aEventEntry = this.aEventSet.top();
this.aEventSet.pop();

var aEvent = aEventEntry.aEvent;
if( aEvent.isCharged() )
aEvent.fire();
}
};

TimerEventQueue.prototype.isEmpty = function()
{
return this.aEventSet.isEmpty();
};

TimerEventQueue.prototype.nextTimeout = function()
{
var nTimeout = Number.MAX_VALUE;
var nCurrentTime = this.aTimer.getElapsedTime();
if( !this.isEmpty() )
nTimeout = this.aEventSet.top().nActivationTime - nCurrentTime;
return nTimeout;
};

TimerEventQueue.prototype.clear = function()
{
this.DBG( 'TimerEventQueue.clear invoked' );
this.aEventSet.clear();
};

TimerEventQueue.prototype.getTimer = function()
{
return this.aTimer;
};

TimerEventQueue.prototype.DBG = function( sMessage, nTime )
{
aTimerEventQueueDebugPrinter.print( sMessage, nTime );
};


TimerEventQueue.prototype.insert = function( aEventEntry )
{
var nHoleIndex = this.aEventSet.length;
var nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );

while( ( nHoleIndex > 0 ) && this.aEventSet[ nParent ].compare( aEventEntry ) )
{
this.aEventSet[ nHoleIndex ] = this.aEventSet[ nParent ];
nHoleIndex = nParent;
nParent = Math.floor( ( nHoleIndex - 1 ) / 2 );
}
this.aEventSet[ nHoleIndex ] = aEventEntry;
};


function EventEntry( aEvent, nTime )
{
this.aEvent = aEvent;
this.nActivationTime = nTime;
}


EventEntry.compare = function( aLhsEventEntry, aRhsEventEntry )
{
if ( aLhsEventEntry.nActivationTime > aRhsEventEntry.nActivationTime )
{
return -1;
}
else if ( aLhsEventEntry.nActivationTime < aRhsEventEntry.nActivationTime )
{
return 1;
}
else
{
return 0;
}
};


function ActivityQueue( aTimer )
{
this.aTimer = aTimer;
this.aCurrentActivityWaitingSet = [];
this.aCurrentActivityReinsertSet = [];
this.aDequeuedActivitySet = [];
}


ActivityQueue.prototype.dispose = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dispose();

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dispose();
};

ActivityQueue.prototype.addActivity = function( aActivity )
{
if( !aActivity )
{
log( 'ActivityQueue.addActivity: activity is not valid' );
return false;
}

this.aCurrentActivityWaitingSet.push( aActivity );
aActivityQueueDebugPrinter.print( 'ActivityQueue.addActivity: activity appended' );
return true;
};

ActivityQueue.prototype.process = function()
{
var nSize = this.aCurrentActivityWaitingSet.length;
var nLag = 0.0;
for( var i = 0; i < nSize; ++i )
{
nLag = Math.max( nLag,this.aCurrentActivityWaitingSet[i].calcTimeLag()  );
}

if( nLag > 0.0 )
this.aTimer.adjustTimer( -nLag, true );


while( this.aCurrentActivityWaitingSet.length != 0 )
{
var aActivity = this.aCurrentActivityWaitingSet.shift();
var bReinsert = false;

bReinsert = aActivity.perform();

if( bReinsert )
{
this.aCurrentActivityReinsertSet.push( aActivity );
}
else
{
this.aDequeuedActivitySet.push( aActivity );
}
}

if( this.aCurrentActivityReinsertSet.length != 0 )
{
this.aCurrentActivityWaitingSet = this.aCurrentActivityReinsertSet;
this.aCurrentActivityReinsertSet = [];
}
};

ActivityQueue.prototype.processDequeued = function()
{
var nSize = this.aDequeuedActivitySet.length;
for( var i = 0; i < nSize; ++i )
this.aDequeuedActivitySet[i].dequeued();

this.aDequeuedActivitySet = [];
};

ActivityQueue.prototype.isEmpty = function()
{
return ( ( this.aCurrentActivityWaitingSet.length == 0 ) &&
( this.aCurrentActivityReinsertSet.length == 0 ) );
};

ActivityQueue.prototype.clear = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.clear invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].dequeued();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].dequeued();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.endAll = function()
{
aActivityQueueDebugPrinter.print( 'ActivityQueue.endAll invoked' );
var nSize = this.aCurrentActivityWaitingSet.length;
var i;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityWaitingSet[i].end();
this.aCurrentActivityWaitingSet = [];

nSize = this.aCurrentActivityReinsertSet.length;
for( i = 0; i < nSize; ++i )
this.aCurrentActivityReinsertSet[i].end();
this.aCurrentActivityReinsertSet = [];
};

ActivityQueue.prototype.getTimer = function()
{
return this.aTimer;
};

ActivityQueue.prototype.size = function()
{
return ( this.aCurrentActivityWaitingSet.length +
this.aCurrentActivityReinsertSet.length +
this.aDequeuedActivitySet.length );
};


function ElapsedTime( aTimeBase )
{
this.aTimeBase = aTimeBase;
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
}


ElapsedTime.prototype.getTimeBase = function()
{
return this.aTimeBase;
};

ElapsedTime.prototype.reset = function()
{
this.nLastQueriedTime = 0.0;
this.nStartTime = this.getCurrentTime();
this.nFrozenTime = 0.0;
this.bInPauseMode = false;
this.bInHoldMode = false;
};

ElapsedTime.prototype.getElapsedTime = function()
{
this.nLastQueriedTime = this.getElapsedTimeImpl();
return this.nLastQueriedTime;
};

ElapsedTime.prototype.pauseTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInPauseMode = true;
};

ElapsedTime.prototype.continueTimer = function()
{
this.bInPauseMode = false;

var nPauseDuration = this.getElapsedTimeImpl() - this.nFrozenTime;

this.nStartTime += nPauseDuration;
};

ElapsedTime.prototype.adjustTimer = function( nOffset, bLimitToLastQueriedTime )
{
if( bLimitToLastQueriedTime == undefined )
bLimitToLastQueriedTime = true;

this.nStartTime -= nOffset;

if( this.bInHoldMode || this.bInPauseMode )
this.nFrozenTime += nOffset;
};

ElapsedTime.prototype.holdTimer = function()
{
this.nFrozenTime = this.getElapsedTimeImpl();
this.bInHoldMode = true;
};

ElapsedTime.prototype.releaseTimer = function()
{
this.bInHoldMode = false;
};

ElapsedTime.prototype.getSystemTime = function()
{
return ( getCurrentSystemTime() / 1000.0 );
};

ElapsedTime.prototype.getCurrentTime = function()
{
var nCurrentTime;
if ( !this.aTimeBase )
{
nCurrentTime = this.getSystemTime();
}
else
{
nCurrentTime = this.aTimeBase.getElapsedTimeImpl();
}

assert( ( typeof( nCurrentTime ) === typeof( 0 ) ) && isFinite( nCurrentTime ),
'ElapsedTime.getCurrentTime: assertion failed: nCurrentTime == ' + nCurrentTime );


return nCurrentTime;
};

ElapsedTime.prototype.getElapsedTimeImpl = function()
{
if( this.bInHoldMode || this.bInPauseMode )
{
return this.nFrozenTime;
}

var nCurTime = this.getCurrentTime();
return ( nCurTime - this.nStartTime );
};


/*****
* @libreofficeend
*
* Several parts of the above code are the result of the porting,
* started on August 2011, of the C++ code included in the source files
* placed under the folder '/slideshow/source' and subfolders.
* @source https://cgit.freedesktop.org/libreoffice/core/tree/slideshow/source
*
*/

]]>
 </script>
</svg>